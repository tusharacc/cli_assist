{
  "timestamp": "2025-09-07T19:58:31.347137",
  "neo4j_uri": "bolt://localhost:7687",
  "enterprise_analysis": {
    "node_labels": [],
    "relationship_types": [
      {
        "type": "HAS_CLASSES",
        "count": 8267
      },
      {
        "type": "HAS_METHOD",
        "count": 8231
      },
      {
        "type": "CALLS_METHOD",
        "count": 6827
      },
      {
        "type": "HAS_ROUTES",
        "count": 578
      },
      {
        "type": "HAS_ENUMS",
        "count": 402
      },
      {
        "type": "DEPENDS_ON",
        "count": 206
      },
      {
        "type": "CALLS_SP",
        "count": 175
      },
      {
        "type": "HAS_CONSTANTS",
        "count": 121
      }
    ],
    "relationship_patterns": [
      {
        "from_labels": [
          "Repository"
        ],
        "relationship": "HAS_CLASSES",
        "to_labels": [
          "Class"
        ],
        "frequency": 8267
      },
      {
        "from_labels": [
          "Class"
        ],
        "relationship": "HAS_METHOD",
        "to_labels": [
          "Method"
        ],
        "frequency": 8231
      },
      {
        "from_labels": [
          "Method"
        ],
        "relationship": "CALLS_METHOD",
        "to_labels": [
          "Method"
        ],
        "frequency": 6827
      },
      {
        "from_labels": [
          "Repository"
        ],
        "relationship": "HAS_ROUTES",
        "to_labels": [
          "Controller"
        ],
        "frequency": 578
      },
      {
        "from_labels": [
          "Repository"
        ],
        "relationship": "HAS_ENUMS",
        "to_labels": [
          "Enum"
        ],
        "frequency": 402
      },
      {
        "from_labels": [
          "Repository"
        ],
        "relationship": "DEPENDS_ON",
        "to_labels": [
          "Repository"
        ],
        "frequency": 206
      },
      {
        "from_labels": [
          "Class"
        ],
        "relationship": "CALLS_SP",
        "to_labels": [
          "StoredProcedure"
        ],
        "frequency": 175
      },
      {
        "from_labels": [
          "Repository"
        ],
        "relationship": "HAS_CONSTANTS",
        "to_labels": [
          "Constant"
        ],
        "frequency": 121
      }
    ],
    "properties": [
      {
        "property": "name",
        "label_count": 7,
        "labels_using_property": [
          [
            "Class"
          ],
          [
            "Method"
          ],
          [
            "StoredProcedure"
          ],
          [
            "Enum"
          ],
          [
            "Constant"
          ],
          [
            "Repository"
          ],
          [
            "Controller"
          ]
        ]
      },
      {
        "property": "namespace",
        "label_count": 7,
        "labels_using_property": [
          [
            "Class"
          ],
          [
            "Method"
          ],
          [
            "StoredProcedure"
          ],
          [
            "Enum"
          ],
          [
            "Constant"
          ],
          [
            "Repository"
          ],
          [
            "Controller"
          ]
        ]
      },
      {
        "property": "type",
        "label_count": 7,
        "labels_using_property": [
          [
            "Class"
          ],
          [
            "Method"
          ],
          [
            "StoredProcedure"
          ],
          [
            "Enum"
          ],
          [
            "Constant"
          ],
          [
            "Repository"
          ],
          [
            "Controller"
          ]
        ]
      },
      {
        "property": "source",
        "label_count": 5,
        "labels_using_property": [
          [
            "Class"
          ],
          [
            "Method"
          ],
          [
            "StoredProcedure"
          ],
          [
            "Enum"
          ],
          [
            "Constant"
          ]
        ]
      },
      {
        "property": "modifier",
        "label_count": 2,
        "labels_using_property": [
          [
            "Class"
          ],
          [
            "Method"
          ]
        ]
      },
      {
        "property": "associated_class",
        "label_count": 1,
        "labels_using_property": [
          [
            "Method"
          ]
        ]
      },
      {
        "property": "ds",
        "label_count": 1,
        "labels_using_property": [
          [
            "Class"
          ]
        ]
      },
      {
        "property": "externalEndpoints",
        "label_count": 1,
        "labels_using_property": [
          [
            "Repository"
          ]
        ]
      },
      {
        "property": "file_path",
        "label_count": 1,
        "labels_using_property": [
          [
            "Class"
          ]
        ]
      },
      {
        "property": "properties",
        "label_count": 1,
        "labels_using_property": [
          [
            "Class"
          ]
        ]
      },
      {
        "property": "return_type",
        "label_count": 1,
        "labels_using_property": [
          [
            "Method"
          ]
        ]
      },
      {
        "property": "service_endpoint",
        "label_count": 1,
        "labels_using_property": [
          [
            "Method"
          ]
        ]
      }
    ],
    "old_schema_nodes": [],
    "new_schema_nodes": [
      {
        "node_labels": [
          "Class"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.Constants",
        "source_prop": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public class ServiceUrls\r\n    {\r\n        public const string CyberClassCodeAndHazardDataURL = \"CyberClassCodeAndHazardDataURL\";\r\n    }\r\n\r\n    public class AppetiteConstants\r\n    {\r\n        public const string ReferenceDatabaseConnection = \"ReferenceDatabaseConnection\";\r\n        public const string AppetiteSettings = \"AppetiteSettings\";\r\n        public const string BusinessSegmentsApiURL = \"BusinessSegmentsApiURL\";\r\n        public const string SCIProducerGroupId = \"SCIMarketplaceSCIGroup\";\r\n        public const string BOAProducerGroup = \"BOAProducerGroup\";\r\n        public const string ServiceName = \"ServiceName\";\r\n        public const string GetAppetiteData = \"GetAppetiteData\";\r\n        public const string CheckAppetite = \"CheckAppetite\";\r\n        public const string RewardsApiURL = \"RewardsApiURL\";\r\n        public const string RewardsEnabled = \"RewardsEnabled\";\r\n        public const string ProducerGroupsURL = \"ProducerGroupsURL\";\r\n        public const string BusinessPropertyDataURL = \"BusinessPropertyDataURL\";\r\n        public const string CacheWebsiteScoreData = \"CacheWebsiteScoreData\";\r\n        public const string CacheWebsiteSignalData = \"CacheWebsiteSignalData\";\r\n        public const string CacheWebsiteSignalDataWithTimeOut = \"CacheWebsiteSignalDataWithTimeOut\";\r\n        public const string CacheWebsiteScoreDataWithTimeOut = \"CacheWebsiteScoreDataWithTimeOut\";\r\n        public const string PanelProducerGroupCodes = \"PanelProducerGroupCodes\";\r\n\r\n        public const string TTSNotAccesibleByProducer = \"3\";\r\n        public const string AppetiteCheckResultError = \"1\";\r\n        public const string EnhancedAccountSearchURL = \"EnhancedAccountSearchURL\";\r\n        public const string P360AccountSearch = \"P360AccountSearch\";\r\n        public const string ExternalDataUrl = \"ExternalDataUrl\";\r\n        public const string ExternalDataAPI = \"ExternalDataAPI\";\r\n        public const string GetEnhancedAccountSearcTokenServiceUrl = \"GetEnhancedAccountSearcTokenServiceUrl\";\r\n        public const string P360IQApiHeaders = \"P360IQApiHeaders\";\r\n        public const string P360DnBApiHeaders = \"P360DnBApiHeaders\";\r\n        public const string IntelligentQuoteDb = \"IntelligentQuoteDb\";\r\n        public const string AccountSearchApiHeaders = \"AccountSearchApiHeaders\";\r\n        public const string P360DnBTokenApiHeaders = \"P360DnBTokenApiHeaders\";\r\n        public const string Standard = \"Standard\";\r\n        public const string IQ = \"IQ\";\r\n        public const string IQPrefill = \"IQ Prefill\";\r\n        public const string Common = \"Common\";\r\n        public const string GetTokenServiceUrl = \"GetTokenServiceUrl\";\r\n        public const string TransactionReportingApiURL = \"TransactionReportingApiURL\";\r\n        public const string TransactionReportingExternalApiURL = \"TransactionReportingExternalApiURL\";\r\n        public const string MatchAccountCount = \"MatchAccountCount\";\r\n        public const string Error404NotFound = \"The remote server returned an error: (404) Not Found\";\r\n        public const string SmallCommercialRevenueMax = \"SmallCommercialRevenueMax\";\r\n        public const string LowerMiddleMarketRevenueMax = \"LowerMiddleMarketRevenueMax\";\r\n        public const string ForeFrontRevenueMax = \"ForeFrontRevenueMax\";\r\n        public const string InsideSalesProducerGroups = \"InsideSalesProducerGroups\";\r\n        public const string BusinessSegmentDetails = \"BusinessSegmentDetails\";\r\n        public const string RegexTimeOut = \"RegexTimeOut\";\r\n        public const string TtsClassifyUpdateURL = \"TtsClassifyUpdateURL\";\r\n        public const string WAITFORSIGNALDATACALLTOCOMPLETE = \"WAITFORSIGNALDATACALLTOCOMPLETE\";\r\n        public const string EXTENDCCSTIMEOUT = \"EXTENDCCSTIMEOUT\";\r\n\r\n        public const string BOPCOMMERCIALLIABILITYELIGIBILITYSTATES = \"BOPCommercialLiabilityEligibilityStates\";\r\n        public const string COVERAGETYPE = \"CoverageType\";\r\n        public const string COMMERCIALLIABILITYONLY = \"CommercialLiabilityOnly\";\r\n\r\n    }\r\n\r\n    public static class BusinessClassification\r\n    {\r\n        public const string TTS = \"TTS\";\r\n        public const string CyberClassCode = \"CyberClassCode\";\r\n        public const string HazardGrade = \"HazardGrade\";\r\n        public const string P360TtsMatchCount = \"P360TtsMatchCount\";\r\n        public const string HighConfidenceBracket = \"high\";\r\n    }\r\n\r\n\r\n}\r\n",
        "all_properties": {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public class ServiceUrls\r\n    {\r\n        public const string CyberClassCodeAndHazardDataURL = \"CyberClassCodeAndHazardDataURL\";\r\n    }\r\n\r\n    public class AppetiteConstants\r\n    {\r\n        public const string ReferenceDatabaseConnection = \"ReferenceDatabaseConnection\";\r\n        public const string AppetiteSettings = \"AppetiteSettings\";\r\n        public const string BusinessSegmentsApiURL = \"BusinessSegmentsApiURL\";\r\n        public const string SCIProducerGroupId = \"SCIMarketplaceSCIGroup\";\r\n        public const string BOAProducerGroup = \"BOAProducerGroup\";\r\n        public const string ServiceName = \"ServiceName\";\r\n        public const string GetAppetiteData = \"GetAppetiteData\";\r\n        public const string CheckAppetite = \"CheckAppetite\";\r\n        public const string RewardsApiURL = \"RewardsApiURL\";\r\n        public const string RewardsEnabled = \"RewardsEnabled\";\r\n        public const string ProducerGroupsURL = \"ProducerGroupsURL\";\r\n        public const string BusinessPropertyDataURL = \"BusinessPropertyDataURL\";\r\n        public const string CacheWebsiteScoreData = \"CacheWebsiteScoreData\";\r\n        public const string CacheWebsiteSignalData = \"CacheWebsiteSignalData\";\r\n        public const string CacheWebsiteSignalDataWithTimeOut = \"CacheWebsiteSignalDataWithTimeOut\";\r\n        public const string CacheWebsiteScoreDataWithTimeOut = \"CacheWebsiteScoreDataWithTimeOut\";\r\n        public const string PanelProducerGroupCodes = \"PanelProducerGroupCodes\";\r\n\r\n        public const string TTSNotAccesibleByProducer = \"3\";\r\n        public const string AppetiteCheckResultError = \"1\";\r\n        public const string EnhancedAccountSearchURL = \"EnhancedAccountSearchURL\";\r\n        public const string P360AccountSearch = \"P360AccountSearch\";\r\n        public const string ExternalDataUrl = \"ExternalDataUrl\";\r\n        public const string ExternalDataAPI = \"ExternalDataAPI\";\r\n        public const string GetEnhancedAccountSearcTokenServiceUrl = \"GetEnhancedAccountSearcTokenServiceUrl\";\r\n        public const string P360IQApiHeaders = \"P360IQApiHeaders\";\r\n        public const string P360DnBApiHeaders = \"P360DnBApiHeaders\";\r\n        public const string IntelligentQuoteDb = \"IntelligentQuoteDb\";\r\n        public const string AccountSearchApiHeaders = \"AccountSearchApiHeaders\";\r\n        public const string P360DnBTokenApiHeaders = \"P360DnBTokenApiHeaders\";\r\n        public const string Standard = \"Standard\";\r\n        public const string IQ = \"IQ\";\r\n        public const string IQPrefill = \"IQ Prefill\";\r\n        public const string Common = \"Common\";\r\n        public const string GetTokenServiceUrl = \"GetTokenServiceUrl\";\r\n        public const string TransactionReportingApiURL = \"TransactionReportingApiURL\";\r\n        public const string TransactionReportingExternalApiURL = \"TransactionReportingExternalApiURL\";\r\n        public const string MatchAccountCount = \"MatchAccountCount\";\r\n        public const string Error404NotFound = \"The remote server returned an error: (404) Not Found\";\r\n        public const string SmallCommercialRevenueMax = \"SmallCommercialRevenueMax\";\r\n        public const string LowerMiddleMarketRevenueMax = \"LowerMiddleMarketRevenueMax\";\r\n        public const string ForeFrontRevenueMax = \"ForeFrontRevenueMax\";\r\n        public const string InsideSalesProducerGroups = \"InsideSalesProducerGroups\";\r\n        public const string BusinessSegmentDetails = \"BusinessSegmentDetails\";\r\n        public const string RegexTimeOut = \"RegexTimeOut\";\r\n        public const string TtsClassifyUpdateURL = \"TtsClassifyUpdateURL\";\r\n        public const string WAITFORSIGNALDATACALLTOCOMPLETE = \"WAITFORSIGNALDATACALLTOCOMPLETE\";\r\n        public const string EXTENDCCSTIMEOUT = \"EXTENDCCSTIMEOUT\";\r\n\r\n        public const string BOPCOMMERCIALLIABILITYELIGIBILITYSTATES = \"BOPCommercialLiabilityEligibilityStates\";\r\n        public const string COVERAGETYPE = \"CoverageType\";\r\n        public const string COMMERCIALLIABILITYONLY = \"CommercialLiabilityOnly\";\r\n\r\n    }\r\n\r\n    public static class BusinessClassification\r\n    {\r\n        public const string TTS = \"TTS\";\r\n        public const string CyberClassCode = \"CyberClassCode\";\r\n        public const string HazardGrade = \"HazardGrade\";\r\n        public const string P360TtsMatchCount = \"P360TtsMatchCount\";\r\n        public const string HighConfidenceBracket = \"high\";\r\n    }\r\n\r\n\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\AppetiteConstants.cs[269..4107))",
          "name": "AppetiteConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ReferenceDatabaseConnection\", \"DefaultValue\": \"\\\"ReferenceDatabaseConnection\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AppetiteSettings\", \"DefaultValue\": \"\\\"AppetiteSettings\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessSegmentsApiURL\", \"DefaultValue\": \"\\\"BusinessSegmentsApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SCIProducerGroupId\", \"DefaultValue\": \"\\\"SCIMarketplaceSCIGroup\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BOAProducerGroup\", \"DefaultValue\": \"\\\"BOAProducerGroup\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ServiceName\", \"DefaultValue\": \"\\\"ServiceName\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"GetAppetiteData\", \"DefaultValue\": \"\\\"GetAppetiteData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CheckAppetite\", \"DefaultValue\": \"\\\"CheckAppetite\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RewardsApiURL\", \"DefaultValue\": \"\\\"RewardsApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RewardsEnabled\", \"DefaultValue\": \"\\\"RewardsEnabled\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ProducerGroupsURL\", \"DefaultValue\": \"\\\"ProducerGroupsURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessPropertyDataURL\", \"DefaultValue\": \"\\\"BusinessPropertyDataURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteScoreData\", \"DefaultValue\": \"\\\"CacheWebsiteScoreData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteSignalData\", \"DefaultValue\": \"\\\"CacheWebsiteSignalData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteSignalDataWithTimeOut\", \"DefaultValue\": \"\\\"CacheWebsiteSignalDataWithTimeOut\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteScoreDataWithTimeOut\", \"DefaultValue\": \"\\\"CacheWebsiteScoreDataWithTimeOut\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"PanelProducerGroupCodes\", \"DefaultValue\": \"\\\"PanelProducerGroupCodes\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TTSNotAccesibleByProducer\", \"DefaultValue\": \"\\\"3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AppetiteCheckResultError\", \"DefaultValue\": \"\\\"1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"EnhancedAccountSearchURL\", \"DefaultValue\": \"\\\"EnhancedAccountSearchURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360AccountSearch\", \"DefaultValue\": \"\\\"P360AccountSearch\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ExternalDataUrl\", \"DefaultValue\": \"\\\"ExternalDataUrl\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ExternalDataAPI\", \"DefaultValue\": \"\\\"ExternalDataAPI\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"GetEnhancedAccountSearcTokenServiceUrl\", \"DefaultValue\": \"\\\"GetEnhancedAccountSearcTokenServiceUrl\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360IQApiHeaders\", \"DefaultValue\": \"\\\"P360IQApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360DnBApiHeaders\", \"DefaultValue\": \"\\\"P360DnBApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IntelligentQuoteDb\", \"DefaultValue\": \"\\\"IntelligentQuoteDb\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearchApiHeaders\", \"DefaultValue\": \"\\\"AccountSearchApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360DnBTokenApiHeaders\", \"DefaultValue\": \"\\\"P360DnBTokenApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Standard\", \"DefaultValue\": \"\\\"Standard\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQ\", \"DefaultValue\": \"\\\"IQ\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQPrefill\", \"DefaultValue\": \"\\\"IQ Prefill\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Common\", \"DefaultValue\": \"\\\"Common\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"GetTokenServiceUrl\", \"DefaultValue\": \"\\\"GetTokenServiceUrl\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TransactionReportingApiURL\", \"DefaultValue\": \"\\\"TransactionReportingApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TransactionReportingExternalApiURL\", \"DefaultValue\": \"\\\"TransactionReportingExternalApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"MatchAccountCount\", \"DefaultValue\": \"\\\"MatchAccountCount\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Error404NotFound\", \"DefaultValue\": \"\\\"The remote server returned an error: (404) Not Found\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SmallCommercialRevenueMax\", \"DefaultValue\": \"\\\"SmallCommercialRevenueMax\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"LowerMiddleMarketRevenueMax\", \"DefaultValue\": \"\\\"LowerMiddleMarketRevenueMax\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ForeFrontRevenueMax\", \"DefaultValue\": \"\\\"ForeFrontRevenueMax\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"InsideSalesProducerGroups\", \"DefaultValue\": \"\\\"InsideSalesProducerGroups\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessSegmentDetails\", \"DefaultValue\": \"\\\"BusinessSegmentDetails\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RegexTimeOut\", \"DefaultValue\": \"\\\"RegexTimeOut\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TtsClassifyUpdateURL\", \"DefaultValue\": \"\\\"TtsClassifyUpdateURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"WAITFORSIGNALDATACALLTOCOMPLETE\", \"DefaultValue\": \"\\\"WAITFORSIGNALDATACALLTOCOMPLETE\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"EXTENDCCSTIMEOUT\", \"DefaultValue\": \"\\\"EXTENDCCSTIMEOUT\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BOPCOMMERCIALLIABILITYELIGIBILITYSTATES\", \"DefaultValue\": \"\\\"BOPCommercialLiabilityEligibilityStates\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"COVERAGETYPE\", \"DefaultValue\": \"\\\"CoverageType\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"COMMERCIALLIABILITYONLY\", \"DefaultValue\": \"\\\"CommercialLiabilityOnly\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        }
      },
      {
        "node_labels": [
          "Class"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.Constants",
        "source_prop": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public class ServiceUrls\r\n    {\r\n        public const string CyberClassCodeAndHazardDataURL = \"CyberClassCodeAndHazardDataURL\";\r\n    }\r\n\r\n    public class AppetiteConstants\r\n    {\r\n        public const string ReferenceDatabaseConnection = \"ReferenceDatabaseConnection\";\r\n        public const string AppetiteSettings = \"AppetiteSettings\";\r\n        public const string BusinessSegmentsApiURL = \"BusinessSegmentsApiURL\";\r\n        public const string SCIProducerGroupId = \"SCIMarketplaceSCIGroup\";\r\n        public const string BOAProducerGroup = \"BOAProducerGroup\";\r\n        public const string ServiceName = \"ServiceName\";\r\n        public const string GetAppetiteData = \"GetAppetiteData\";\r\n        public const string CheckAppetite = \"CheckAppetite\";\r\n        public const string RewardsApiURL = \"RewardsApiURL\";\r\n        public const string RewardsEnabled = \"RewardsEnabled\";\r\n        public const string ProducerGroupsURL = \"ProducerGroupsURL\";\r\n        public const string BusinessPropertyDataURL = \"BusinessPropertyDataURL\";\r\n        public const string CacheWebsiteScoreData = \"CacheWebsiteScoreData\";\r\n        public const string CacheWebsiteSignalData = \"CacheWebsiteSignalData\";\r\n        public const string CacheWebsiteSignalDataWithTimeOut = \"CacheWebsiteSignalDataWithTimeOut\";\r\n        public const string CacheWebsiteScoreDataWithTimeOut = \"CacheWebsiteScoreDataWithTimeOut\";\r\n        public const string PanelProducerGroupCodes = \"PanelProducerGroupCodes\";\r\n\r\n        public const string TTSNotAccesibleByProducer = \"3\";\r\n        public const string AppetiteCheckResultError = \"1\";\r\n        public const string EnhancedAccountSearchURL = \"EnhancedAccountSearchURL\";\r\n        public const string P360AccountSearch = \"P360AccountSearch\";\r\n        public const string ExternalDataUrl = \"ExternalDataUrl\";\r\n        public const string ExternalDataAPI = \"ExternalDataAPI\";\r\n        public const string GetEnhancedAccountSearcTokenServiceUrl = \"GetEnhancedAccountSearcTokenServiceUrl\";\r\n        public const string P360IQApiHeaders = \"P360IQApiHeaders\";\r\n        public const string P360DnBApiHeaders = \"P360DnBApiHeaders\";\r\n        public const string IntelligentQuoteDb = \"IntelligentQuoteDb\";\r\n        public const string AccountSearchApiHeaders = \"AccountSearchApiHeaders\";\r\n        public const string P360DnBTokenApiHeaders = \"P360DnBTokenApiHeaders\";\r\n        public const string Standard = \"Standard\";\r\n        public const string IQ = \"IQ\";\r\n        public const string IQPrefill = \"IQ Prefill\";\r\n        public const string Common = \"Common\";\r\n        public const string GetTokenServiceUrl = \"GetTokenServiceUrl\";\r\n        public const string TransactionReportingApiURL = \"TransactionReportingApiURL\";\r\n        public const string TransactionReportingExternalApiURL = \"TransactionReportingExternalApiURL\";\r\n        public const string MatchAccountCount = \"MatchAccountCount\";\r\n        public const string Error404NotFound = \"The remote server returned an error: (404) Not Found\";\r\n        public const string SmallCommercialRevenueMax = \"SmallCommercialRevenueMax\";\r\n        public const string LowerMiddleMarketRevenueMax = \"LowerMiddleMarketRevenueMax\";\r\n        public const string ForeFrontRevenueMax = \"ForeFrontRevenueMax\";\r\n        public const string InsideSalesProducerGroups = \"InsideSalesProducerGroups\";\r\n        public const string BusinessSegmentDetails = \"BusinessSegmentDetails\";\r\n        public const string RegexTimeOut = \"RegexTimeOut\";\r\n        public const string TtsClassifyUpdateURL = \"TtsClassifyUpdateURL\";\r\n        public const string WAITFORSIGNALDATACALLTOCOMPLETE = \"WAITFORSIGNALDATACALLTOCOMPLETE\";\r\n        public const string EXTENDCCSTIMEOUT = \"EXTENDCCSTIMEOUT\";\r\n\r\n        public const string BOPCOMMERCIALLIABILITYELIGIBILITYSTATES = \"BOPCommercialLiabilityEligibilityStates\";\r\n        public const string COVERAGETYPE = \"CoverageType\";\r\n        public const string COMMERCIALLIABILITYONLY = \"CommercialLiabilityOnly\";\r\n\r\n    }\r\n\r\n    public static class BusinessClassification\r\n    {\r\n        public const string TTS = \"TTS\";\r\n        public const string CyberClassCode = \"CyberClassCode\";\r\n        public const string HazardGrade = \"HazardGrade\";\r\n        public const string P360TtsMatchCount = \"P360TtsMatchCount\";\r\n        public const string HighConfidenceBracket = \"high\";\r\n    }\r\n\r\n\r\n}\r\n",
        "all_properties": {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public class ServiceUrls\r\n    {\r\n        public const string CyberClassCodeAndHazardDataURL = \"CyberClassCodeAndHazardDataURL\";\r\n    }\r\n\r\n    public class AppetiteConstants\r\n    {\r\n        public const string ReferenceDatabaseConnection = \"ReferenceDatabaseConnection\";\r\n        public const string AppetiteSettings = \"AppetiteSettings\";\r\n        public const string BusinessSegmentsApiURL = \"BusinessSegmentsApiURL\";\r\n        public const string SCIProducerGroupId = \"SCIMarketplaceSCIGroup\";\r\n        public const string BOAProducerGroup = \"BOAProducerGroup\";\r\n        public const string ServiceName = \"ServiceName\";\r\n        public const string GetAppetiteData = \"GetAppetiteData\";\r\n        public const string CheckAppetite = \"CheckAppetite\";\r\n        public const string RewardsApiURL = \"RewardsApiURL\";\r\n        public const string RewardsEnabled = \"RewardsEnabled\";\r\n        public const string ProducerGroupsURL = \"ProducerGroupsURL\";\r\n        public const string BusinessPropertyDataURL = \"BusinessPropertyDataURL\";\r\n        public const string CacheWebsiteScoreData = \"CacheWebsiteScoreData\";\r\n        public const string CacheWebsiteSignalData = \"CacheWebsiteSignalData\";\r\n        public const string CacheWebsiteSignalDataWithTimeOut = \"CacheWebsiteSignalDataWithTimeOut\";\r\n        public const string CacheWebsiteScoreDataWithTimeOut = \"CacheWebsiteScoreDataWithTimeOut\";\r\n        public const string PanelProducerGroupCodes = \"PanelProducerGroupCodes\";\r\n\r\n        public const string TTSNotAccesibleByProducer = \"3\";\r\n        public const string AppetiteCheckResultError = \"1\";\r\n        public const string EnhancedAccountSearchURL = \"EnhancedAccountSearchURL\";\r\n        public const string P360AccountSearch = \"P360AccountSearch\";\r\n        public const string ExternalDataUrl = \"ExternalDataUrl\";\r\n        public const string ExternalDataAPI = \"ExternalDataAPI\";\r\n        public const string GetEnhancedAccountSearcTokenServiceUrl = \"GetEnhancedAccountSearcTokenServiceUrl\";\r\n        public const string P360IQApiHeaders = \"P360IQApiHeaders\";\r\n        public const string P360DnBApiHeaders = \"P360DnBApiHeaders\";\r\n        public const string IntelligentQuoteDb = \"IntelligentQuoteDb\";\r\n        public const string AccountSearchApiHeaders = \"AccountSearchApiHeaders\";\r\n        public const string P360DnBTokenApiHeaders = \"P360DnBTokenApiHeaders\";\r\n        public const string Standard = \"Standard\";\r\n        public const string IQ = \"IQ\";\r\n        public const string IQPrefill = \"IQ Prefill\";\r\n        public const string Common = \"Common\";\r\n        public const string GetTokenServiceUrl = \"GetTokenServiceUrl\";\r\n        public const string TransactionReportingApiURL = \"TransactionReportingApiURL\";\r\n        public const string TransactionReportingExternalApiURL = \"TransactionReportingExternalApiURL\";\r\n        public const string MatchAccountCount = \"MatchAccountCount\";\r\n        public const string Error404NotFound = \"The remote server returned an error: (404) Not Found\";\r\n        public const string SmallCommercialRevenueMax = \"SmallCommercialRevenueMax\";\r\n        public const string LowerMiddleMarketRevenueMax = \"LowerMiddleMarketRevenueMax\";\r\n        public const string ForeFrontRevenueMax = \"ForeFrontRevenueMax\";\r\n        public const string InsideSalesProducerGroups = \"InsideSalesProducerGroups\";\r\n        public const string BusinessSegmentDetails = \"BusinessSegmentDetails\";\r\n        public const string RegexTimeOut = \"RegexTimeOut\";\r\n        public const string TtsClassifyUpdateURL = \"TtsClassifyUpdateURL\";\r\n        public const string WAITFORSIGNALDATACALLTOCOMPLETE = \"WAITFORSIGNALDATACALLTOCOMPLETE\";\r\n        public const string EXTENDCCSTIMEOUT = \"EXTENDCCSTIMEOUT\";\r\n\r\n        public const string BOPCOMMERCIALLIABILITYELIGIBILITYSTATES = \"BOPCommercialLiabilityEligibilityStates\";\r\n        public const string COVERAGETYPE = \"CoverageType\";\r\n        public const string COMMERCIALLIABILITYONLY = \"CommercialLiabilityOnly\";\r\n\r\n    }\r\n\r\n    public static class BusinessClassification\r\n    {\r\n        public const string TTS = \"TTS\";\r\n        public const string CyberClassCode = \"CyberClassCode\";\r\n        public const string HazardGrade = \"HazardGrade\";\r\n        public const string P360TtsMatchCount = \"P360TtsMatchCount\";\r\n        public const string HighConfidenceBracket = \"high\";\r\n    }\r\n\r\n\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\AppetiteConstants.cs[4115..4466))",
          "name": "BusinessClassification",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TTS\", \"DefaultValue\": \"\\\"TTS\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberClassCode\", \"DefaultValue\": \"\\\"CyberClassCode\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HazardGrade\", \"DefaultValue\": \"\\\"HazardGrade\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360TtsMatchCount\", \"DefaultValue\": \"\\\"P360TtsMatchCount\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HighConfidenceBracket\", \"DefaultValue\": \"\\\"high\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        }
      },
      {
        "node_labels": [
          "Class"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.Constants",
        "source_prop": "\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public static class CacheKeyConstants\r\n    {\r\n        public static readonly string ProducerGroupsKeyItemId = \"ProducerGroups\";\r\n        public static readonly string BusinessSegmentListKeyItemId = \"BusinessSegmentList\";\r\n\r\n        public static readonly string PreQuoteKey = \"PreQuote\";\r\n        public static readonly string ProducerGroupsByPolicyTypeKeyItemId = \"ProducerGroupsByPolicyType\";\r\n\r\n        public static readonly string EligibilityResponseId = \"EligibilityResponse\";\r\n        public static readonly string ClassificationDataKey = \"ClassificationData\";\r\n        public static readonly string AccountSearch = \"AccountSearch\";\r\n\r\n    }\r\n}\r\n",
        "all_properties": {
          "modifier": "public",
          "source": "\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public static class CacheKeyConstants\r\n    {\r\n        public static readonly string ProducerGroupsKeyItemId = \"ProducerGroups\";\r\n        public static readonly string BusinessSegmentListKeyItemId = \"BusinessSegmentList\";\r\n\r\n        public static readonly string PreQuoteKey = \"PreQuote\";\r\n        public static readonly string ProducerGroupsByPolicyTypeKeyItemId = \"ProducerGroupsByPolicyType\";\r\n\r\n        public static readonly string EligibilityResponseId = \"EligibilityResponse\";\r\n        public static readonly string ClassificationDataKey = \"ClassificationData\";\r\n        public static readonly string AccountSearch = \"AccountSearch\";\r\n\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\CacheKeyConstants.cs[57..705))",
          "name": "CacheKeyConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ProducerGroupsKeyItemId\", \"DefaultValue\": \"\\\"ProducerGroups\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessSegmentListKeyItemId\", \"DefaultValue\": \"\\\"BusinessSegmentList\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"PreQuoteKey\", \"DefaultValue\": \"\\\"PreQuote\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ProducerGroupsByPolicyTypeKeyItemId\", \"DefaultValue\": \"\\\"ProducerGroupsByPolicyType\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"EligibilityResponseId\", \"DefaultValue\": \"\\\"EligibilityResponse\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationDataKey\", \"DefaultValue\": \"\\\"ClassificationData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearch\", \"DefaultValue\": \"\\\"AccountSearch\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        }
      },
      {
        "node_labels": [
          "Class"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.Constants",
        "source_prop": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    internal static class DataAccessConstants\r\n    {\r\n        internal static string SP_GetDynamicEligibilityAttributes = \"[dbsciref].[usp_GetDynamicEligibilityAttributes]\";\r\n    }\r\n}\r\n",
        "all_properties": {
          "modifier": "internal",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    internal static class DataAccessConstants\r\n    {\r\n        internal static string SP_GetDynamicEligibilityAttributes = \"[dbsciref].[usp_GetDynamicEligibilityAttributes]\";\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\DataAccessConstants.cs[127..303))",
          "name": "DataAccessConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"internal\", \"Name\": \"SP_GetDynamicEligibilityAttributes\", \"DefaultValue\": \"\\\"[dbsciref].[usp_GetDynamicEligibilityAttributes]\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        }
      },
      {
        "node_labels": [
          "Class"
        ],
        "namespace_prop": "Chubb.Marketplace.NewBusiness.Constants.Enums",
        "source_prop": "using System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Reflection;\r\nusing System.Runtime.Serialization;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.NewBusiness.Constants.Enums\r\n{\r\n    public enum IndicativeQuoteProductEnum\r\n    {\r\n        [Description(\"None\")]\r\n        None,\r\n        [Description(\"BOP\")]\r\n        BOP,\r\n        [Description(\"CYBER-ERM\")]\r\n        CYBERERM,\r\n        [Description(\"CYBER-DIGITECT\")]\r\n        CYBERDIGITECT,\r\n        [Description(\"CYBER-PROERM\")]\r\n        CYBERPROERM,\r\n        [Description(\"Appetite\")]\r\n        Appetite,\r\n        [Description(\"Clearance\")]\r\n        Clearance\r\n    }\r\n\r\n    public static class EnumExtensions\r\n    {\r\n        // Note that we never need to expire these cache items, so we just use ConcurrentDictionary rather than MemoryCache\r\n        private static readonly\r\n            ConcurrentDictionary<string, string> DisplayNameCache = new ConcurrentDictionary<string, string>();\r\n\r\n        public static string DisplayName(this Enum value)\r\n        {\r\n            var key = $\"{value.GetType().FullName}.{value}\";\r\n\r\n            var displayName = DisplayNameCache.GetOrAdd(key, x =>\r\n            {\r\n                var name = (DescriptionAttribute[])value\r\n                    .GetType()\r\n                    .GetTypeInfo()\r\n                    .GetField(value.ToString())\r\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\r\n\r\n                return name.Length > 0 ? name[0].Description : value.ToString();\r\n            });\r\n\r\n            return displayName;\r\n        }\r\n    }\r\n}\r\n\r\n",
        "all_properties": {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Reflection;\r\nusing System.Runtime.Serialization;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.NewBusiness.Constants.Enums\r\n{\r\n    public enum IndicativeQuoteProductEnum\r\n    {\r\n        [Description(\"None\")]\r\n        None,\r\n        [Description(\"BOP\")]\r\n        BOP,\r\n        [Description(\"CYBER-ERM\")]\r\n        CYBERERM,\r\n        [Description(\"CYBER-DIGITECT\")]\r\n        CYBERDIGITECT,\r\n        [Description(\"CYBER-PROERM\")]\r\n        CYBERPROERM,\r\n        [Description(\"Appetite\")]\r\n        Appetite,\r\n        [Description(\"Clearance\")]\r\n        Clearance\r\n    }\r\n\r\n    public static class EnumExtensions\r\n    {\r\n        // Note that we never need to expire these cache items, so we just use ConcurrentDictionary rather than MemoryCache\r\n        private static readonly\r\n            ConcurrentDictionary<string, string> DisplayNameCache = new ConcurrentDictionary<string, string>();\r\n\r\n        public static string DisplayName(this Enum value)\r\n        {\r\n            var key = $\"{value.GetType().FullName}.{value}\";\r\n\r\n            var displayName = DisplayNameCache.GetOrAdd(key, x =>\r\n            {\r\n                var name = (DescriptionAttribute[])value\r\n                    .GetType()\r\n                    .GetTypeInfo()\r\n                    .GetField(value.ToString())\r\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\r\n\r\n                return name.Length > 0 ? name[0].Description : value.ToString();\r\n            });\r\n\r\n            return displayName;\r\n        }\r\n    }\r\n}\r\n\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\IndicativeQuoteProductEnum.cs[707..1646))",
          "name": "EnumExtensions",
          "properties": "[{\"Type\": \"ConcurrentDictionary<string, string>\", \"AccessModifier\": \"private\", \"Name\": \"DisplayNameCache\", \"DefaultValue\": \"new ConcurrentDictionary<string, string>()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"key\", \"DefaultValue\": \"$\\\"{value.GetType().FullName}.{value}\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"displayName\", \"DefaultValue\": \"DisplayNameCache.GetOrAdd(key, x =>\\r\\n            {\\r\\n                var name = (DescriptionAttribute[])value\\r\\n                    .GetType()\\r\\n                    .GetTypeInfo()\\r\\n                    .GetField(value.ToString())\\r\\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\\r\\n\\r\\n                return name.Length > 0 ? name[0].Description : value.ToString();\\r\\n            })\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"name\", \"DefaultValue\": \"(DescriptionAttribute[])value\\r\\n                    .GetType()\\r\\n                    .GetTypeInfo()\\r\\n                    .GetField(value.ToString())\\r\\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false)\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": true,
          "namespace": "Chubb.Marketplace.NewBusiness.Constants.Enums"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.NewBusiness.Constants.Enums",
        "source_prop": "{\r\n            var key = $\"{value.GetType().FullName}.{value}\";\r\n\r\n            var displayName = DisplayNameCache.GetOrAdd(key, x =>\r\n            {\r\n                var name = (DescriptionAttribute[])value\r\n                    .GetType()\r\n                    .GetTypeInfo()\r\n                    .GetField(value.ToString())\r\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\r\n\r\n                return name.Length > 0 ? name[0].Description : value.ToString();\r\n            });\r\n\r\n            return displayName;\r\n        }",
        "all_properties": {
          "modifier": "public",
          "associated_class": "EnumExtensions",
          "source": "{\r\n            var key = $\"{value.GetType().FullName}.{value}\";\r\n\r\n            var displayName = DisplayNameCache.GetOrAdd(key, x =>\r\n            {\r\n                var name = (DescriptionAttribute[])value\r\n                    .GetType()\r\n                    .GetTypeInfo()\r\n                    .GetField(value.ToString())\r\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\r\n\r\n                return name.Length > 0 ? name[0].Description : value.ToString();\r\n            });\r\n\r\n            return displayName;\r\n        }",
          "service_endpoint": "[]",
          "name": "DisplayName",
          "return_type": "string",
          "type": "Method",
          "namespace": "Chubb.Marketplace.NewBusiness.Constants.Enums"
        }
      },
      {
        "node_labels": [
          "Class"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.Constants",
        "source_prop": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n   \r\n    public class TransactionReportingConstants\r\n    {\r\n\r\n       \r\n        \r\n        \r\n        //AddressSelection\r\n        public const string AddressSelectionTransactionTypeCode = \"TTC1\";\r\n\r\n        public const string StreetLookupTransactionSubTypeCode = \"TTC1_TSTC2\";\r\n        public const string AddressTypeStreetLookup = \"Street lookup\";\r\n\r\n        public const string StandardizedAddressTransactionSubTypeCode = \"TTC1_TSTC4\";\r\n        public const string AddressTypeStandardizedAddress = \"Standardized Address\";\r\n\r\n        public const string NonStandardizedAddressTransactionSubTypeCode = \"TTC1_TSTC5\";\r\n        public const string AddressTypeNonStandardizedAddress = \"Non Standardized Address\";\r\n\r\n        //Key\r\n        public const string Address = \"Address\";\r\n\r\n        //Qualification\r\n        public const string QualificationTransactionTypeCode = \"TTC2\";\r\n\r\n        public const string BopIQQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC1\";\r\n        public const string CyberIQQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC2\";\r\n        public const string CyberIQHazardQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC3\";\r\n        public const string CyberIQSingalQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC4\";\r\n        public const string SuggestedTTSAppetiteTransactionTypeCode = \"TTC6\";\r\n        public const string SuggestedTTSAppetiteTransactionSubTypeCode = \"TTC6_TSTC3\";\r\n\r\n        public const string NonIQUserERC = \"ERC1\";\r\n        public const string StateIsNotEligibleForIQERC = \"ERC101\";\r\n        public const string RevenueExceedsIQRangeERC = \"ERC2\";\r\n        public const string RevenueExceedsIQPrefillRangeERC = \"ERC3\";\r\n        public const string UserEnteredTTSIsNotEligibleForIQERC = \"ERC4\";\r\n        public const string UserSelectedTTSIsNotEligibleForIQERC = \"ERC13\";\r\n        public const string SubmissionIsIQEligibleERC = \"ERC5\";\r\n        public const string BOPProductIsUnavailableERC = \"ERC17\";\r\n        public const string CyberProductIsUnavailableERC = \"ERC33\";\r\n\r\n        public const string InEligibleHazardGrade = \"ERC33\";\r\n        public const string NosignalDataResults = \"ERC25\";\r\n\r\n        //AccountSelection\r\n        public const string AccountSelectionTransactionTypeCode = \"TTC3\";\r\n\r\n        public const string NoAccountMatchTransactionSubTypeCode = \"TTC3_TSTC1\";\r\n        public const string OneAccountMatchTransactionSubTypeCode = \"TTC3_TSTC2\";\r\n        public const string MultipleAccountMatchTransactionSubTypeCode = \"TTC3_TSTC3\";\r\n\r\n        public const string AccountNotFoundIQEligibilityRulesCode = \"ERC6\";\r\n        public const string AccountSearchAPITimedoutIQEligibilityRulesCode = \"ERC7\";\r\n        public const string APIExceptionIQEligibilityRulesCode = \"ERC8\";\r\n        public const string ClassificationAPIResponseTimedOut = \"ERC10\";\r\n\r\n        //Classification\r\n        public const string ClassificationTransactionTypeCode = \"TTC5\";\r\n\r\n        public const string ClassificationAPIRequestTransactionSubTypeCode = \"TTC5_TSTC1\";\r\n\r\n        //Key\r\n        public const string State = \"State\";\r\n        public const string TTSCode = \"TTSCode\";\r\n        public const string Revenue = \"Revenue\";\r\n        public const string HasProductAppetite = \"HasProductAppetite\";\r\n        public const string AccountSearchRequest = \"AccountSearchRequest\";\r\n        public const string QuestionsAreValid = \"QuestionsAreValid\";\r\n        public const string HazardSignal = \"HazardSignal\";\r\n\r\n        //KnockoutQuestions\r\n        public const string KnockoutQuestionsTransactionTypeCode = \"TTC4\";\r\n\r\n        public const string OutOfAppetiteTransactionSubTypeCode = \"TTC4_TSTC1\";\r\n\r\n        //SubmissionPath\r\n        public const string IQSubmissionPathCode = \"SPC1\";\r\n        public const string IQPrefillSubmissionPathCode = \"SPC2\";\r\n        public const string StandardSubmissionPathCode = \"SPC3\";\r\n        public const string CommonSubmissionPathCode = \"SPC4\";\r\n\r\n        public const string LongDateTime = \"MM/dd/yyyy HH:mm:ss.fff tt\";\r\n\r\n    }\r\n}\r\n",
        "all_properties": {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n   \r\n    public class TransactionReportingConstants\r\n    {\r\n\r\n       \r\n        \r\n        \r\n        //AddressSelection\r\n        public const string AddressSelectionTransactionTypeCode = \"TTC1\";\r\n\r\n        public const string StreetLookupTransactionSubTypeCode = \"TTC1_TSTC2\";\r\n        public const string AddressTypeStreetLookup = \"Street lookup\";\r\n\r\n        public const string StandardizedAddressTransactionSubTypeCode = \"TTC1_TSTC4\";\r\n        public const string AddressTypeStandardizedAddress = \"Standardized Address\";\r\n\r\n        public const string NonStandardizedAddressTransactionSubTypeCode = \"TTC1_TSTC5\";\r\n        public const string AddressTypeNonStandardizedAddress = \"Non Standardized Address\";\r\n\r\n        //Key\r\n        public const string Address = \"Address\";\r\n\r\n        //Qualification\r\n        public const string QualificationTransactionTypeCode = \"TTC2\";\r\n\r\n        public const string BopIQQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC1\";\r\n        public const string CyberIQQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC2\";\r\n        public const string CyberIQHazardQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC3\";\r\n        public const string CyberIQSingalQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC4\";\r\n        public const string SuggestedTTSAppetiteTransactionTypeCode = \"TTC6\";\r\n        public const string SuggestedTTSAppetiteTransactionSubTypeCode = \"TTC6_TSTC3\";\r\n\r\n        public const string NonIQUserERC = \"ERC1\";\r\n        public const string StateIsNotEligibleForIQERC = \"ERC101\";\r\n        public const string RevenueExceedsIQRangeERC = \"ERC2\";\r\n        public const string RevenueExceedsIQPrefillRangeERC = \"ERC3\";\r\n        public const string UserEnteredTTSIsNotEligibleForIQERC = \"ERC4\";\r\n        public const string UserSelectedTTSIsNotEligibleForIQERC = \"ERC13\";\r\n        public const string SubmissionIsIQEligibleERC = \"ERC5\";\r\n        public const string BOPProductIsUnavailableERC = \"ERC17\";\r\n        public const string CyberProductIsUnavailableERC = \"ERC33\";\r\n\r\n        public const string InEligibleHazardGrade = \"ERC33\";\r\n        public const string NosignalDataResults = \"ERC25\";\r\n\r\n        //AccountSelection\r\n        public const string AccountSelectionTransactionTypeCode = \"TTC3\";\r\n\r\n        public const string NoAccountMatchTransactionSubTypeCode = \"TTC3_TSTC1\";\r\n        public const string OneAccountMatchTransactionSubTypeCode = \"TTC3_TSTC2\";\r\n        public const string MultipleAccountMatchTransactionSubTypeCode = \"TTC3_TSTC3\";\r\n\r\n        public const string AccountNotFoundIQEligibilityRulesCode = \"ERC6\";\r\n        public const string AccountSearchAPITimedoutIQEligibilityRulesCode = \"ERC7\";\r\n        public const string APIExceptionIQEligibilityRulesCode = \"ERC8\";\r\n        public const string ClassificationAPIResponseTimedOut = \"ERC10\";\r\n\r\n        //Classification\r\n        public const string ClassificationTransactionTypeCode = \"TTC5\";\r\n\r\n        public const string ClassificationAPIRequestTransactionSubTypeCode = \"TTC5_TSTC1\";\r\n\r\n        //Key\r\n        public const string State = \"State\";\r\n        public const string TTSCode = \"TTSCode\";\r\n        public const string Revenue = \"Revenue\";\r\n        public const string HasProductAppetite = \"HasProductAppetite\";\r\n        public const string AccountSearchRequest = \"AccountSearchRequest\";\r\n        public const string QuestionsAreValid = \"QuestionsAreValid\";\r\n        public const string HazardSignal = \"HazardSignal\";\r\n\r\n        //KnockoutQuestions\r\n        public const string KnockoutQuestionsTransactionTypeCode = \"TTC4\";\r\n\r\n        public const string OutOfAppetiteTransactionSubTypeCode = \"TTC4_TSTC1\";\r\n\r\n        //SubmissionPath\r\n        public const string IQSubmissionPathCode = \"SPC1\";\r\n        public const string IQPrefillSubmissionPathCode = \"SPC2\";\r\n        public const string StandardSubmissionPathCode = \"SPC3\";\r\n        public const string CommonSubmissionPathCode = \"SPC4\";\r\n\r\n        public const string LongDateTime = \"MM/dd/yyyy HH:mm:ss.fff tt\";\r\n\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\TransactionReportingConstants.cs[132..4153))",
          "name": "TransactionReportingConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressSelectionTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StreetLookupTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC1_TSTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressTypeStreetLookup\", \"DefaultValue\": \"\\\"Street lookup\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StandardizedAddressTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC1_TSTC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressTypeStandardizedAddress\", \"DefaultValue\": \"\\\"Standardized Address\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NonStandardizedAddressTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC1_TSTC5\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressTypeNonStandardizedAddress\", \"DefaultValue\": \"\\\"Non Standardized Address\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Address\", \"DefaultValue\": \"\\\"Address\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"QualificationTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BopIQQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberIQQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberIQHazardQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberIQSingalQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SuggestedTTSAppetiteTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC6\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SuggestedTTSAppetiteTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC6_TSTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NonIQUserERC\", \"DefaultValue\": \"\\\"ERC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StateIsNotEligibleForIQERC\", \"DefaultValue\": \"\\\"ERC101\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RevenueExceedsIQRangeERC\", \"DefaultValue\": \"\\\"ERC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RevenueExceedsIQPrefillRangeERC\", \"DefaultValue\": \"\\\"ERC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"UserEnteredTTSIsNotEligibleForIQERC\", \"DefaultValue\": \"\\\"ERC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"UserSelectedTTSIsNotEligibleForIQERC\", \"DefaultValue\": \"\\\"ERC13\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SubmissionIsIQEligibleERC\", \"DefaultValue\": \"\\\"ERC5\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BOPProductIsUnavailableERC\", \"DefaultValue\": \"\\\"ERC17\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberProductIsUnavailableERC\", \"DefaultValue\": \"\\\"ERC33\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"InEligibleHazardGrade\", \"DefaultValue\": \"\\\"ERC33\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NosignalDataResults\", \"DefaultValue\": \"\\\"ERC25\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSelectionTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NoAccountMatchTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC3_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"OneAccountMatchTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC3_TSTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"MultipleAccountMatchTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC3_TSTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountNotFoundIQEligibilityRulesCode\", \"DefaultValue\": \"\\\"ERC6\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearchAPITimedoutIQEligibilityRulesCode\", \"DefaultValue\": \"\\\"ERC7\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"APIExceptionIQEligibilityRulesCode\", \"DefaultValue\": \"\\\"ERC8\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationAPIResponseTimedOut\", \"DefaultValue\": \"\\\"ERC10\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC5\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationAPIRequestTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC5_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"State\", \"DefaultValue\": \"\\\"State\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TTSCode\", \"DefaultValue\": \"\\\"TTSCode\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Revenue\", \"DefaultValue\": \"\\\"Revenue\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HasProductAppetite\", \"DefaultValue\": \"\\\"HasProductAppetite\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearchRequest\", \"DefaultValue\": \"\\\"AccountSearchRequest\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"QuestionsAreValid\", \"DefaultValue\": \"\\\"QuestionsAreValid\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HazardSignal\", \"DefaultValue\": \"\\\"HazardSignal\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"KnockoutQuestionsTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"OutOfAppetiteTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC4_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQPrefillSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StandardSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CommonSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"LongDateTime\", \"DefaultValue\": \"\\\"MM/dd/yyyy HH:mm:ss.fff tt\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        }
      },
      {
        "node_labels": [
          "Class"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "using Chubb.Core.Bases;\r\nusing Chubb.Core.Caching.Interfaces;\r\nusing Chubb.Core.Database;\r\nusing Chubb.Core.Logging;\r\nusing Chubb.Marketplace.Appetite.Constants;\r\nusing Chubb.Marketplace.Appetite.Entities;\r\nusing Chubb.Marketplace.Appetite.Enums;\r\nusing Chubb.Marketplace.Appetite.Extentions;\r\nusing Chubb.Marketplace.Framework.Entities;\r\nusing Chubb.Marketplace.Framework.Service;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.DataAccess\r\n{\r\n    public class AppetiteServiceDataAccess\r\n    {\r\n        private DatabaseHelper _dbHelper;\r\n        private IAuthorizedServiceContext _serviceContext;\r\n        private User _userContext;\r\n        private IConfiguration _configuration;\r\n        private ApiLogger _logger;\r\n        private StringBuilder _sbLogClassifications;\r\n        private ICacheManager _cacheManager = null;\r\n        // private string _token;\r\n\r\n        public AppetiteServiceDataAccess(IAuthorizedServiceContext serviceContext)\r\n        {\r\n            _serviceContext = serviceContext;\r\n            _configuration = serviceContext.Configuration;\r\n            _userContext = serviceContext.RequestContext.User;\r\n            _logger = serviceContext.Logger;\r\n            _cacheManager = serviceContext.Cache;\r\n            // _token = serviceContext.RequestContext.Token.EncodedToken;\r\n            _dbHelper = new DatabaseHelper(_configuration, AppetiteConstants.ReferenceDatabaseConnection);\r\n        }\r\n\r\n\r\n        public BusinessSegmentListResponse GetBusinessSegmentList(BusinessSegmentListRequest request)\r\n        {\r\n            BusinessSegmentListResponse response = null;\r\n            BusinessSegmentListRequest ttsRequest = new BusinessSegmentListRequest();\r\n            string businessSegmentListKey = Cache.CacheKeys.GetBusinessSegmentListKey();\r\n            if (_cacheManager?.Exists(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey) == true)\r\n            {\r\n                response = new BusinessSegmentListResponse\r\n                {\r\n                    BusinessClassDetails = _cacheManager.Get<List<BusinessSegmentData>>(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey)\r\n                };\r\n            }\r\n\r\n            if (response?.BusinessClassDetails == null)\r\n            {\r\n                string strRequest = JsonConvert.SerializeObject(request);\r\n                Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n                RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n                response = JsonConvert.DeserializeObject<BusinessSegmentListResponse>(service.ResponseData);\r\n                _cacheManager?.Push(response.BusinessClassDetails, CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey);\r\n            }\r\n\r\n            if (response?.BusinessClassDetails != null)\r\n            {\r\n                response.BusinessClassDetails = request.IsPrimaryOnly == true ? response?.BusinessClassDetails.Where(x => x.IsPrimaryOnly == 1).ToList() : response.BusinessClassDetails;\r\n            }\r\n\r\n            return response;\r\n        }\r\n\r\n        public AppetiteResultResponse GetAppetiteList(AppetiteResultRequest request)\r\n        {\r\n            AppetiteResultResponse appetiteResponse = new AppetiteResultResponse();\r\n            try\r\n            {\r\n                List<AppetiteCheckResult> appetiteResultList = new List<AppetiteCheckResult>();\r\n                List<AppetiteCheckResult> inaccessibleProducts = new List<AppetiteCheckResult>();\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteCheckResult]\";\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = GetAppetiteCheckParameterCollection(request);\r\n                    DatabaseParameter retParam = new DatabaseParameter();\r\n                    retParam.Name = \"@Result\";\r\n                    retParam.SqlType = SqlDbType.Int;\r\n                    retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                    parameterCollection.Add(retParam);\r\n\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            if (DataRecordExtensions.HasColumn(dr, \"PolicyTypeCode\"))\r\n                            {\r\n                                decimal lAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"AppetiteLevel\"]), out lAppetiteLevel);\r\n                                bool lAppetiteRevenueIndicator;\r\n                                bool.TryParse(Convert.ToString(dr[\"AppetiteRevenueIndicator\"]), out lAppetiteRevenueIndicator);\r\n                                bool accessible = true;\r\n                                if (dr.HasColumn(\"Accessible\") && dr[\"Accessible\"] != DBNull.Value)\r\n                                {\r\n                                    bool.TryParse(Convert.ToString(dr[\"Accessible\"]), out accessible);\r\n                                }\r\n\r\n                                AppetiteCheckResult output = new AppetiteCheckResult();\r\n                                output.PolicyTypeCode = Convert.ToString(dr[\"PolicyTypeCode\"]);\r\n                                output.PolicySubTypeCode = Convert.ToString(dr[\"PolicySubTypeCode\"]);\r\n                                output.PolicyType = PolicyType.Unknown.ParsePolicyType(output.PolicyTypeCode, output.PolicySubTypeCode);\r\n                                output.AppetiteLevelValue = lAppetiteLevel;\r\n                                output.AppetiteShortDescription = Convert.ToString(dr[\"AppetiteShortDescription\"]);\r\n                                output.AppetiteLongDescription = Convert.ToString(dr[\"AppetiteLongDescription\"]);\r\n\r\n                                if (dr.HasColumn(\"RevenueLimit\") && dr[\"RevenueLimit\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimit\"]), out decimal revenueMax);\r\n                                    output.AppetiteRevenueMax = revenueMax;\r\n                                }\r\n\r\n                                if (dr.HasColumn(\"RevenueLimitMin\") && dr[\"RevenueLimitMin\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimitMin\"]), out decimal revenueMin);\r\n                                    output.AppetiteRevenueMin = revenueMin;\r\n                                }\r\n\r\n                                output.AnnualRevenueAppetiteIndicator = lAppetiteRevenueIndicator;\r\n                                output.UnderwriterNotes = Convert.ToString(dr[\"UnderwriterNotes\"]);\r\n                                if (accessible)\r\n                                    appetiteResultList.Add(output);\r\n                                else\r\n                                    inaccessibleProducts.Add(output);\r\n\r\n                                decimal lBaseAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"BaseAppetiteLevel\"]), out lBaseAppetiteLevel);\r\n                                output.BaseAppetiteLevel = lBaseAppetiteLevel;\r\n                            }\r\n\r\n                            if (DataRecordExtensions.HasColumn(dr, \"ErrorNumber\") && DataRecordExtensions.HasColumn(dr, \"ErrorMessage\"))\r\n                            {\r\n                                if (dr[\"ErrorNumber\"] != null)\r\n                                {\r\n                                    ErrorNumber = Convert.ToString(dr[\"ErrorNumber\"]);\r\n                                }\r\n                                if (dr[\"ErrorMessage\"] != null)\r\n                                {\r\n                                    ErrorMessage = Convert.ToString(dr[\"ErrorMessage\"]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n\r\n                    appetiteResponse.Status = ResponseStatus.Success;\r\n\r\n                    if (retParam != null && retParam.Value != null)\r\n                    {\r\n                        appetiteResponse.Messages = new List<ResponseMessage>();\r\n                        switch (Convert.ToString(retParam.Value))\r\n                        {\r\n                            case AppetiteConstants.TTSNotAccesibleByProducer:\r\n                                appetiteResponse.TTSNotAccesibleByProducer = true;\r\n                                break;\r\n\r\n                            case AppetiteConstants.AppetiteCheckResultError:\r\n                                appetiteResponse.Messages.Add(new ResponseMessage()\r\n                                {\r\n                                    MessageCode = ErrorNumber,\r\n                                    MessageText = ErrorMessage,\r\n                                    MessageType = MessageType.Error\r\n                                });\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    appetiteResponse.AppetiteCheckResults = appetiteResultList;\r\n                    appetiteResponse.InaccessibleProducts = inaccessibleProducts;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                appetiteResponse.Status = ResponseStatus.Failure;\r\n            }\r\n            return appetiteResponse;\r\n        }\r\n\r\n\r\n        public bool GetCyberTTSCodeEligibility (TTSCodeEligibilityRequest request)\r\n        {\r\n            bool IsTTSCodeEligible=false;\r\n            try\r\n            {\r\n                string spName = \"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\";\r\n\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n\r\n                    parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode));\r\n\r\n                    using (var dr = _dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            IsTTSCodeEligible = Convert.ToBoolean(dr[\"res\"]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n            }\r\n            return IsTTSCodeEligible;\r\n\r\n        }\r\n\r\n        public AppetiteOverrideResponse GetAppetiteOverride(AppetiteOverrideRequest request)\r\n        {\r\n            var response = new AppetiteOverrideResponse();\r\n            try\r\n            {\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteOverride]\";\r\n                DatabaseParameterCollection parameterCollection = GetAppetiteOverrideParameterCollection(request);\r\n                DatabaseParameter retParam = new DatabaseParameter();\r\n                retParam.Name = \"@Result\";\r\n                retParam.SqlType = SqlDbType.Int;\r\n                retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                parameterCollection.Add(retParam);\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n\r\n                            response.PolicyTypeCode = Convert.ToString(dr[\"POL_TY_C\"]);\r\n                            response.PolicySubTypeCode = Convert.ToString(dr[\"POL_SUB_TY_C\"]);\r\n                            response.StateCode = Convert.ToString(dr[\"ST_C\"]);\r\n                            response.AppetiteLevelValue = Convert.ToDecimal(dr[\"APPETITE_LVL_V\"]);\r\n                            response.RuleOrderEx = Convert.ToInt32(dr[\"RULE_ORDER_EX\"]);\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n                }\r\n                response.Status = ResponseStatus.Success;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                response.Status = ResponseStatus.Failure;\r\n            }\r\n            return response;\r\n        }\r\n        DatabaseParameterCollection GetAppetiteCheckParameterCollection(AppetiteResultRequest request)\r\n        {\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            bool isEmpAppetiteCheck = _userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent);\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@IsEmpAppetiteCheck\", isEmpAppetiteCheck, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }\r\n        DatabaseParameterCollection GetAppetiteOverrideParameterCollection(AppetiteOverrideRequest request)\r\n        {\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicyTypeCode\", request.PolicyTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicySubTypeCode\", string.IsNullOrEmpty(request.PolicySubTypeCode) ? string.Empty : request.PolicySubTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }\r\n\r\n          public BaseServiceResponse PostUserEvents(PostUserEventRequest request)\r\n        {\r\n            BaseServiceResponse response = null;\r\n\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Framework.Service.RestfulClient client = new\r\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<BaseServiceResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }\r\n\r\n        public DynamicEligibilityComponent GetDynamicEligibilityAttributes(GetEligibilityQuestionsRequest request)\r\n        {\r\n            string spName = DataAccessConstants.SP_GetDynamicEligibilityAttributes;\r\n            DynamicEligibilityComponent response = new DynamicEligibilityComponent()\r\n            {\r\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\r\n                Messages = new List<ResponseMessage>(),\r\n                Status = ResponseStatus.Failure\r\n            };\r\n            DatabaseParameterCollection paramCollection = new DatabaseParameterCollection();\r\n            try\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(request?.TTSCode))\r\n                {\r\n                    paramCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode, DbType.String));\r\n                    paramCollection.Add(new DatabaseParameter(\"@StateCode\", !string.IsNullOrWhiteSpace(request.StateCode) ? request.StateCode : (object)DBNull.Value, DbType.String));\r\n\r\n                    using (IDbConnection connection = _dbHelper.GetConnObject())\r\n                    {\r\n                        using (IDataReader dr = _dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure))\r\n                        {\r\n                            while (dr.Read())\r\n                            {\r\n                                DynamicEligibilityAttribute dynamicEligibilityAttribute = new DynamicEligibilityAttribute();\r\n                                if (dr[\"VALUE\"] != DBNull.Value) dynamicEligibilityAttribute.Value = dr[\"VALUE\"].ToString();\r\n                                if (dr[\"DATA_TYPE\"] != DBNull.Value) dynamicEligibilityAttribute.DynamicEligibilityDataType = Enum.Parse<DynamicEligibilityDataType>(dr[\"DATA_TYPE\"].ToString());\r\n                                if (dr[\"ELEMENTNAME\"] != DBNull.Value)\r\n                                {\r\n                                    response.DynamicEligibilityAttributes.Add(dr[\"ELEMENTNAME\"].ToString(), dynamicEligibilityAttribute);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    response.Status = ResponseStatus.Success;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                response.Status = ResponseStatus.Failure;\r\n                _logger.LogException(ex, $\"Error occurred in GetDynamicEligibilityAttributes. {ex.Message}\");\r\n            }\r\n            return response;\r\n        }\r\n\r\n        private DataTable CreateAppetiteDataTable(AppetiteResultRequest request)\r\n        {\r\n            string producersString = string.Empty;\r\n            string producerGroupsString = string.Empty;\r\n\r\n            _sbLogClassifications = new StringBuilder();\r\n\r\n            DataTable table = new DataTable(\"AppetiteCheck\");\r\n            DataRow row;\r\n\r\n            table.Columns.Add(\"ClassificationCode\", typeof(string));\r\n            table.Columns.Add(\"ClassificationType\", typeof(string));\r\n            table.Columns.Add(\"PolicyType\", typeof(string));\r\n            table.Columns.Add(\"PolicySubType\", typeof(string));\r\n            table.Columns.Add(\"Producer\", typeof(string));\r\n            table.Columns.Add(\"ProducerGroup\", typeof(string));\r\n\r\n\r\n\r\n            // Get producerGroups from request\r\n            producerGroupsString = GetProducerGroups(request.ProducerGroupsDBList);\r\n\r\n\r\n            string producerGroups = string.Empty;\r\n            if ((_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)) && !request.UseRequestedProducerOnly)\r\n            {\r\n                producerGroups = GetProducerGroupIds();\r\n            }\r\n\r\n            foreach (BusinessClassificationDB bc in request.BusinessClassificationListDB)\r\n            {\r\n                row = table.NewRow();\r\n\r\n                row[\"ClassificationCode\"] = bc.ClassificationCode;\r\n                row[\"ClassificationType\"] = bc.ClassificationType;\r\n                row[\"PolicyType\"] = string.IsNullOrEmpty(bc.PolicyType) ? string.Empty : bc.PolicyType;\r\n                row[\"PolicySubType\"] = string.IsNullOrEmpty(bc.PolicySubType) ? string.Empty : bc.PolicySubType;\r\n\r\n                producersString = GetProducers(bc.Producers);\r\n                row[\"Producer\"] = !string.IsNullOrEmpty(producersString) ? producersString : string.Empty;\r\n\r\n                \r\n                row[\"ProducerGroup\"] = string.IsNullOrEmpty(producerGroups)? bc.ProducerGroups : producerGroups;\r\n\r\n                table.Rows.Add(row);\r\n\r\n                // Add business classifications to log string\r\n                _sbLogClassifications.AppendFormat(\"\\n ClassificationCode:{0} ClassificationType:{1} PolicyType:{2} PolicySubType:{3} Producer:{4} ProducerGrp:{5}\\n\",\r\n                    bc.ClassificationCode, bc.ClassificationType, bc.PolicyType,\r\n                    bc.PolicySubType, producersString, bc.ProducerGroups);\r\n            }\r\n\r\n            return table;\r\n        }\r\n\r\n        private string GetProducers(List<Producer> producers)\r\n        {\r\n            StringBuilder producerSB = new StringBuilder();\r\n            string producersString;\r\n\r\n            if (producers != null)\r\n            {\r\n                foreach (Producer p in producers)\r\n                {\r\n                    producerSB.AppendFormat(\"{0}-{1},\", string.IsNullOrEmpty(p.ProducerNumber) ? \"\" : p.ProducerNumber,\r\n                        string.IsNullOrEmpty(p.ProducerSubNumber) ? \"\" : p.ProducerSubNumber);\r\n                }\r\n            }\r\n\r\n\r\n            producersString = producerSB.ToString();\r\n\r\n            if (producersString.Length > 0)\r\n            {\r\n                //remove the last comma\r\n                producersString = producersString.Remove(producersString.Length - 1);\r\n            }\r\n\r\n            return producersString;\r\n        }\r\n\r\n        private string GetProducerGroups(List<ProducerGroup> producerGroups)\r\n        {\r\n            StringBuilder prodGrpsStringBuilder = new StringBuilder();\r\n            string producerGroupsString;\r\n\r\n            if (producerGroups != null)\r\n            {\r\n                foreach (ProducerGroup pg in producerGroups)\r\n                {\r\n                    prodGrpsStringBuilder.Append(string.IsNullOrEmpty(pg.ProducerGroupTypeCode) ? \"\" : pg.ProducerGroupTypeCode + \",\");\r\n                }\r\n            }\r\n\r\n\r\n            producerGroupsString = prodGrpsStringBuilder.ToString();\r\n\r\n            if (producerGroupsString.Length > 0)\r\n            {\r\n                //remove last comma\r\n                producerGroupsString = producerGroupsString.Remove(producerGroupsString.Length - 1, 1);\r\n            }\r\n\r\n            return producerGroupsString;\r\n        }\r\n        private string GetProducerGroupIds()\r\n        {\r\n            return _configuration.GetSection(AppetiteConstants.InsideSalesProducerGroups)?.Value;\r\n        }\r\n\r\n        public GetProducerGroupDetailsResponse GetProducerGroupFilteredList(GetProducerGroupDetailsRequest request)\r\n        {\r\n            GetProducerGroupDetailsResponse response = new GetProducerGroupDetailsResponse();\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.ProducerGroupsURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<GetProducerGroupDetailsResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }\r\n\r\n    }\r\n}\r\n",
        "all_properties": {
          "modifier": "public",
          "source": "using Chubb.Core.Bases;\r\nusing Chubb.Core.Caching.Interfaces;\r\nusing Chubb.Core.Database;\r\nusing Chubb.Core.Logging;\r\nusing Chubb.Marketplace.Appetite.Constants;\r\nusing Chubb.Marketplace.Appetite.Entities;\r\nusing Chubb.Marketplace.Appetite.Enums;\r\nusing Chubb.Marketplace.Appetite.Extentions;\r\nusing Chubb.Marketplace.Framework.Entities;\r\nusing Chubb.Marketplace.Framework.Service;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.DataAccess\r\n{\r\n    public class AppetiteServiceDataAccess\r\n    {\r\n        private DatabaseHelper _dbHelper;\r\n        private IAuthorizedServiceContext _serviceContext;\r\n        private User _userContext;\r\n        private IConfiguration _configuration;\r\n        private ApiLogger _logger;\r\n        private StringBuilder _sbLogClassifications;\r\n        private ICacheManager _cacheManager = null;\r\n        // private string _token;\r\n\r\n        public AppetiteServiceDataAccess(IAuthorizedServiceContext serviceContext)\r\n        {\r\n            _serviceContext = serviceContext;\r\n            _configuration = serviceContext.Configuration;\r\n            _userContext = serviceContext.RequestContext.User;\r\n            _logger = serviceContext.Logger;\r\n            _cacheManager = serviceContext.Cache;\r\n            // _token = serviceContext.RequestContext.Token.EncodedToken;\r\n            _dbHelper = new DatabaseHelper(_configuration, AppetiteConstants.ReferenceDatabaseConnection);\r\n        }\r\n\r\n\r\n        public BusinessSegmentListResponse GetBusinessSegmentList(BusinessSegmentListRequest request)\r\n        {\r\n            BusinessSegmentListResponse response = null;\r\n            BusinessSegmentListRequest ttsRequest = new BusinessSegmentListRequest();\r\n            string businessSegmentListKey = Cache.CacheKeys.GetBusinessSegmentListKey();\r\n            if (_cacheManager?.Exists(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey) == true)\r\n            {\r\n                response = new BusinessSegmentListResponse\r\n                {\r\n                    BusinessClassDetails = _cacheManager.Get<List<BusinessSegmentData>>(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey)\r\n                };\r\n            }\r\n\r\n            if (response?.BusinessClassDetails == null)\r\n            {\r\n                string strRequest = JsonConvert.SerializeObject(request);\r\n                Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n                RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n                response = JsonConvert.DeserializeObject<BusinessSegmentListResponse>(service.ResponseData);\r\n                _cacheManager?.Push(response.BusinessClassDetails, CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey);\r\n            }\r\n\r\n            if (response?.BusinessClassDetails != null)\r\n            {\r\n                response.BusinessClassDetails = request.IsPrimaryOnly == true ? response?.BusinessClassDetails.Where(x => x.IsPrimaryOnly == 1).ToList() : response.BusinessClassDetails;\r\n            }\r\n\r\n            return response;\r\n        }\r\n\r\n        public AppetiteResultResponse GetAppetiteList(AppetiteResultRequest request)\r\n        {\r\n            AppetiteResultResponse appetiteResponse = new AppetiteResultResponse();\r\n            try\r\n            {\r\n                List<AppetiteCheckResult> appetiteResultList = new List<AppetiteCheckResult>();\r\n                List<AppetiteCheckResult> inaccessibleProducts = new List<AppetiteCheckResult>();\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteCheckResult]\";\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = GetAppetiteCheckParameterCollection(request);\r\n                    DatabaseParameter retParam = new DatabaseParameter();\r\n                    retParam.Name = \"@Result\";\r\n                    retParam.SqlType = SqlDbType.Int;\r\n                    retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                    parameterCollection.Add(retParam);\r\n\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            if (DataRecordExtensions.HasColumn(dr, \"PolicyTypeCode\"))\r\n                            {\r\n                                decimal lAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"AppetiteLevel\"]), out lAppetiteLevel);\r\n                                bool lAppetiteRevenueIndicator;\r\n                                bool.TryParse(Convert.ToString(dr[\"AppetiteRevenueIndicator\"]), out lAppetiteRevenueIndicator);\r\n                                bool accessible = true;\r\n                                if (dr.HasColumn(\"Accessible\") && dr[\"Accessible\"] != DBNull.Value)\r\n                                {\r\n                                    bool.TryParse(Convert.ToString(dr[\"Accessible\"]), out accessible);\r\n                                }\r\n\r\n                                AppetiteCheckResult output = new AppetiteCheckResult();\r\n                                output.PolicyTypeCode = Convert.ToString(dr[\"PolicyTypeCode\"]);\r\n                                output.PolicySubTypeCode = Convert.ToString(dr[\"PolicySubTypeCode\"]);\r\n                                output.PolicyType = PolicyType.Unknown.ParsePolicyType(output.PolicyTypeCode, output.PolicySubTypeCode);\r\n                                output.AppetiteLevelValue = lAppetiteLevel;\r\n                                output.AppetiteShortDescription = Convert.ToString(dr[\"AppetiteShortDescription\"]);\r\n                                output.AppetiteLongDescription = Convert.ToString(dr[\"AppetiteLongDescription\"]);\r\n\r\n                                if (dr.HasColumn(\"RevenueLimit\") && dr[\"RevenueLimit\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimit\"]), out decimal revenueMax);\r\n                                    output.AppetiteRevenueMax = revenueMax;\r\n                                }\r\n\r\n                                if (dr.HasColumn(\"RevenueLimitMin\") && dr[\"RevenueLimitMin\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimitMin\"]), out decimal revenueMin);\r\n                                    output.AppetiteRevenueMin = revenueMin;\r\n                                }\r\n\r\n                                output.AnnualRevenueAppetiteIndicator = lAppetiteRevenueIndicator;\r\n                                output.UnderwriterNotes = Convert.ToString(dr[\"UnderwriterNotes\"]);\r\n                                if (accessible)\r\n                                    appetiteResultList.Add(output);\r\n                                else\r\n                                    inaccessibleProducts.Add(output);\r\n\r\n                                decimal lBaseAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"BaseAppetiteLevel\"]), out lBaseAppetiteLevel);\r\n                                output.BaseAppetiteLevel = lBaseAppetiteLevel;\r\n                            }\r\n\r\n                            if (DataRecordExtensions.HasColumn(dr, \"ErrorNumber\") && DataRecordExtensions.HasColumn(dr, \"ErrorMessage\"))\r\n                            {\r\n                                if (dr[\"ErrorNumber\"] != null)\r\n                                {\r\n                                    ErrorNumber = Convert.ToString(dr[\"ErrorNumber\"]);\r\n                                }\r\n                                if (dr[\"ErrorMessage\"] != null)\r\n                                {\r\n                                    ErrorMessage = Convert.ToString(dr[\"ErrorMessage\"]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n\r\n                    appetiteResponse.Status = ResponseStatus.Success;\r\n\r\n                    if (retParam != null && retParam.Value != null)\r\n                    {\r\n                        appetiteResponse.Messages = new List<ResponseMessage>();\r\n                        switch (Convert.ToString(retParam.Value))\r\n                        {\r\n                            case AppetiteConstants.TTSNotAccesibleByProducer:\r\n                                appetiteResponse.TTSNotAccesibleByProducer = true;\r\n                                break;\r\n\r\n                            case AppetiteConstants.AppetiteCheckResultError:\r\n                                appetiteResponse.Messages.Add(new ResponseMessage()\r\n                                {\r\n                                    MessageCode = ErrorNumber,\r\n                                    MessageText = ErrorMessage,\r\n                                    MessageType = MessageType.Error\r\n                                });\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    appetiteResponse.AppetiteCheckResults = appetiteResultList;\r\n                    appetiteResponse.InaccessibleProducts = inaccessibleProducts;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                appetiteResponse.Status = ResponseStatus.Failure;\r\n            }\r\n            return appetiteResponse;\r\n        }\r\n\r\n\r\n        public bool GetCyberTTSCodeEligibility (TTSCodeEligibilityRequest request)\r\n        {\r\n            bool IsTTSCodeEligible=false;\r\n            try\r\n            {\r\n                string spName = \"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\";\r\n\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n\r\n                    parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode));\r\n\r\n                    using (var dr = _dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            IsTTSCodeEligible = Convert.ToBoolean(dr[\"res\"]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n            }\r\n            return IsTTSCodeEligible;\r\n\r\n        }\r\n\r\n        public AppetiteOverrideResponse GetAppetiteOverride(AppetiteOverrideRequest request)\r\n        {\r\n            var response = new AppetiteOverrideResponse();\r\n            try\r\n            {\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteOverride]\";\r\n                DatabaseParameterCollection parameterCollection = GetAppetiteOverrideParameterCollection(request);\r\n                DatabaseParameter retParam = new DatabaseParameter();\r\n                retParam.Name = \"@Result\";\r\n                retParam.SqlType = SqlDbType.Int;\r\n                retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                parameterCollection.Add(retParam);\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n\r\n                            response.PolicyTypeCode = Convert.ToString(dr[\"POL_TY_C\"]);\r\n                            response.PolicySubTypeCode = Convert.ToString(dr[\"POL_SUB_TY_C\"]);\r\n                            response.StateCode = Convert.ToString(dr[\"ST_C\"]);\r\n                            response.AppetiteLevelValue = Convert.ToDecimal(dr[\"APPETITE_LVL_V\"]);\r\n                            response.RuleOrderEx = Convert.ToInt32(dr[\"RULE_ORDER_EX\"]);\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n                }\r\n                response.Status = ResponseStatus.Success;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                response.Status = ResponseStatus.Failure;\r\n            }\r\n            return response;\r\n        }\r\n        DatabaseParameterCollection GetAppetiteCheckParameterCollection(AppetiteResultRequest request)\r\n        {\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            bool isEmpAppetiteCheck = _userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent);\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@IsEmpAppetiteCheck\", isEmpAppetiteCheck, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }\r\n        DatabaseParameterCollection GetAppetiteOverrideParameterCollection(AppetiteOverrideRequest request)\r\n        {\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicyTypeCode\", request.PolicyTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicySubTypeCode\", string.IsNullOrEmpty(request.PolicySubTypeCode) ? string.Empty : request.PolicySubTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }\r\n\r\n          public BaseServiceResponse PostUserEvents(PostUserEventRequest request)\r\n        {\r\n            BaseServiceResponse response = null;\r\n\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Framework.Service.RestfulClient client = new\r\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<BaseServiceResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }\r\n\r\n        public DynamicEligibilityComponent GetDynamicEligibilityAttributes(GetEligibilityQuestionsRequest request)\r\n        {\r\n            string spName = DataAccessConstants.SP_GetDynamicEligibilityAttributes;\r\n            DynamicEligibilityComponent response = new DynamicEligibilityComponent()\r\n            {\r\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\r\n                Messages = new List<ResponseMessage>(),\r\n                Status = ResponseStatus.Failure\r\n            };\r\n            DatabaseParameterCollection paramCollection = new DatabaseParameterCollection();\r\n            try\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(request?.TTSCode))\r\n                {\r\n                    paramCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode, DbType.String));\r\n                    paramCollection.Add(new DatabaseParameter(\"@StateCode\", !string.IsNullOrWhiteSpace(request.StateCode) ? request.StateCode : (object)DBNull.Value, DbType.String));\r\n\r\n                    using (IDbConnection connection = _dbHelper.GetConnObject())\r\n                    {\r\n                        using (IDataReader dr = _dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure))\r\n                        {\r\n                            while (dr.Read())\r\n                            {\r\n                                DynamicEligibilityAttribute dynamicEligibilityAttribute = new DynamicEligibilityAttribute();\r\n                                if (dr[\"VALUE\"] != DBNull.Value) dynamicEligibilityAttribute.Value = dr[\"VALUE\"].ToString();\r\n                                if (dr[\"DATA_TYPE\"] != DBNull.Value) dynamicEligibilityAttribute.DynamicEligibilityDataType = Enum.Parse<DynamicEligibilityDataType>(dr[\"DATA_TYPE\"].ToString());\r\n                                if (dr[\"ELEMENTNAME\"] != DBNull.Value)\r\n                                {\r\n                                    response.DynamicEligibilityAttributes.Add(dr[\"ELEMENTNAME\"].ToString(), dynamicEligibilityAttribute);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    response.Status = ResponseStatus.Success;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                response.Status = ResponseStatus.Failure;\r\n                _logger.LogException(ex, $\"Error occurred in GetDynamicEligibilityAttributes. {ex.Message}\");\r\n            }\r\n            return response;\r\n        }\r\n\r\n        private DataTable CreateAppetiteDataTable(AppetiteResultRequest request)\r\n        {\r\n            string producersString = string.Empty;\r\n            string producerGroupsString = string.Empty;\r\n\r\n            _sbLogClassifications = new StringBuilder();\r\n\r\n            DataTable table = new DataTable(\"AppetiteCheck\");\r\n            DataRow row;\r\n\r\n            table.Columns.Add(\"ClassificationCode\", typeof(string));\r\n            table.Columns.Add(\"ClassificationType\", typeof(string));\r\n            table.Columns.Add(\"PolicyType\", typeof(string));\r\n            table.Columns.Add(\"PolicySubType\", typeof(string));\r\n            table.Columns.Add(\"Producer\", typeof(string));\r\n            table.Columns.Add(\"ProducerGroup\", typeof(string));\r\n\r\n\r\n\r\n            // Get producerGroups from request\r\n            producerGroupsString = GetProducerGroups(request.ProducerGroupsDBList);\r\n\r\n\r\n            string producerGroups = string.Empty;\r\n            if ((_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)) && !request.UseRequestedProducerOnly)\r\n            {\r\n                producerGroups = GetProducerGroupIds();\r\n            }\r\n\r\n            foreach (BusinessClassificationDB bc in request.BusinessClassificationListDB)\r\n            {\r\n                row = table.NewRow();\r\n\r\n                row[\"ClassificationCode\"] = bc.ClassificationCode;\r\n                row[\"ClassificationType\"] = bc.ClassificationType;\r\n                row[\"PolicyType\"] = string.IsNullOrEmpty(bc.PolicyType) ? string.Empty : bc.PolicyType;\r\n                row[\"PolicySubType\"] = string.IsNullOrEmpty(bc.PolicySubType) ? string.Empty : bc.PolicySubType;\r\n\r\n                producersString = GetProducers(bc.Producers);\r\n                row[\"Producer\"] = !string.IsNullOrEmpty(producersString) ? producersString : string.Empty;\r\n\r\n                \r\n                row[\"ProducerGroup\"] = string.IsNullOrEmpty(producerGroups)? bc.ProducerGroups : producerGroups;\r\n\r\n                table.Rows.Add(row);\r\n\r\n                // Add business classifications to log string\r\n                _sbLogClassifications.AppendFormat(\"\\n ClassificationCode:{0} ClassificationType:{1} PolicyType:{2} PolicySubType:{3} Producer:{4} ProducerGrp:{5}\\n\",\r\n                    bc.ClassificationCode, bc.ClassificationType, bc.PolicyType,\r\n                    bc.PolicySubType, producersString, bc.ProducerGroups);\r\n            }\r\n\r\n            return table;\r\n        }\r\n\r\n        private string GetProducers(List<Producer> producers)\r\n        {\r\n            StringBuilder producerSB = new StringBuilder();\r\n            string producersString;\r\n\r\n            if (producers != null)\r\n            {\r\n                foreach (Producer p in producers)\r\n                {\r\n                    producerSB.AppendFormat(\"{0}-{1},\", string.IsNullOrEmpty(p.ProducerNumber) ? \"\" : p.ProducerNumber,\r\n                        string.IsNullOrEmpty(p.ProducerSubNumber) ? \"\" : p.ProducerSubNumber);\r\n                }\r\n            }\r\n\r\n\r\n            producersString = producerSB.ToString();\r\n\r\n            if (producersString.Length > 0)\r\n            {\r\n                //remove the last comma\r\n                producersString = producersString.Remove(producersString.Length - 1);\r\n            }\r\n\r\n            return producersString;\r\n        }\r\n\r\n        private string GetProducerGroups(List<ProducerGroup> producerGroups)\r\n        {\r\n            StringBuilder prodGrpsStringBuilder = new StringBuilder();\r\n            string producerGroupsString;\r\n\r\n            if (producerGroups != null)\r\n            {\r\n                foreach (ProducerGroup pg in producerGroups)\r\n                {\r\n                    prodGrpsStringBuilder.Append(string.IsNullOrEmpty(pg.ProducerGroupTypeCode) ? \"\" : pg.ProducerGroupTypeCode + \",\");\r\n                }\r\n            }\r\n\r\n\r\n            producerGroupsString = prodGrpsStringBuilder.ToString();\r\n\r\n            if (producerGroupsString.Length > 0)\r\n            {\r\n                //remove last comma\r\n                producerGroupsString = producerGroupsString.Remove(producerGroupsString.Length - 1, 1);\r\n            }\r\n\r\n            return producerGroupsString;\r\n        }\r\n        private string GetProducerGroupIds()\r\n        {\r\n            return _configuration.GetSection(AppetiteConstants.InsideSalesProducerGroups)?.Value;\r\n        }\r\n\r\n        public GetProducerGroupDetailsResponse GetProducerGroupFilteredList(GetProducerGroupDetailsRequest request)\r\n        {\r\n            GetProducerGroupDetailsResponse response = new GetProducerGroupDetailsResponse();\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.ProducerGroupsURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<GetProducerGroupDetailsResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }\r\n\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\DataAccess\\AppetiteServiceDataAccess.cs[618..24505))",
          "name": "AppetiteServiceDataAccess",
          "properties": "[{\"Type\": \"DatabaseHelper\", \"AccessModifier\": \"private\", \"Name\": \"_dbHelper\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"IAuthorizedServiceContext\", \"AccessModifier\": \"private\", \"Name\": \"_serviceContext\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"User\", \"AccessModifier\": \"private\", \"Name\": \"_userContext\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"IConfiguration\", \"AccessModifier\": \"private\", \"Name\": \"_configuration\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"ApiLogger\", \"AccessModifier\": \"private\", \"Name\": \"_logger\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"StringBuilder\", \"AccessModifier\": \"private\", \"Name\": \"_sbLogClassifications\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"ICacheManager\", \"AccessModifier\": \"private\", \"Name\": \"_cacheManager\", \"DefaultValue\": \"null\", \"DependentClasses\": []}, {\"Type\": \"BusinessSegmentListResponse\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"null\", \"DependentClasses\": []}, {\"Type\": \"BusinessSegmentListRequest\", \"AccessModifier\": \"private\", \"Name\": \"ttsRequest\", \"DefaultValue\": \"new BusinessSegmentListRequest()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"businessSegmentListKey\", \"DefaultValue\": \"Cache.CacheKeys.GetBusinessSegmentListKey()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"strRequest\", \"DefaultValue\": \"JsonConvert.SerializeObject(request)\", \"DependentClasses\": []}, {\"Type\": \"Chubb.Marketplace.Framework.Service.RestfulClient\", \"AccessModifier\": \"private\", \"Name\": \"client\", \"DefaultValue\": \"new\\r\\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext)\", \"DependentClasses\": []}, {\"Type\": \"RestApiResponse\", \"AccessModifier\": \"private\", \"Name\": \"service\", \"DefaultValue\": \"client.ExecuteAuthorizeRequest(strRequest)\", \"DependentClasses\": []}, {\"Type\": \"AppetiteResultResponse\", \"AccessModifier\": \"private\", \"Name\": \"appetiteResponse\", \"DefaultValue\": \"new AppetiteResultResponse()\", \"DependentClasses\": []}, {\"Type\": \"List<AppetiteCheckResult>\", \"AccessModifier\": \"private\", \"Name\": \"appetiteResultList\", \"DefaultValue\": \"new List<AppetiteCheckResult>()\", \"DependentClasses\": []}, {\"Type\": \"List<AppetiteCheckResult>\", \"AccessModifier\": \"private\", \"Name\": \"inaccessibleProducts\", \"DefaultValue\": \"new List<AppetiteCheckResult>()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorNumber\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorMessage\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"sProcName\", \"DefaultValue\": \"\\\"[dbsciref].[usp_GetAppetiteCheckResult]\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"GetAppetiteCheckParameterCollection(request)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"retParam\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"decimal\", \"AccessModifier\": \"private\", \"Name\": \"lAppetiteLevel\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"lAppetiteRevenueIndicator\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"accessible\", \"DefaultValue\": \"true\", \"DependentClasses\": []}, {\"Type\": \"AppetiteCheckResult\", \"AccessModifier\": \"private\", \"Name\": \"output\", \"DefaultValue\": \"new AppetiteCheckResult()\", \"DependentClasses\": []}, {\"Type\": \"decimal\", \"AccessModifier\": \"private\", \"Name\": \"lBaseAppetiteLevel\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"IsTTSCodeEligible\", \"DefaultValue\": \"false\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"spName\", \"DefaultValue\": \"\\\"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"new AppetiteOverrideResponse()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorNumber\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorMessage\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"sProcName\", \"DefaultValue\": \"\\\"[dbsciref].[usp_GetAppetiteOverride]\\\"\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"GetAppetiteOverrideParameterCollection(request)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"retParam\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"appetiteCheck\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"DataTable\", \"AccessModifier\": \"private\", \"Name\": \"dt\", \"DefaultValue\": \"CreateAppetiteDataTable(request)\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"isEmpAppetiteCheck\", \"DefaultValue\": \"_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"appetiteCheck\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"DataTable\", \"AccessModifier\": \"private\", \"Name\": \"dt\", \"DefaultValue\": \"CreateAppetiteDataTable(request)\", \"DependentClasses\": []}, {\"Type\": \"BaseServiceResponse\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"null\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"strRequest\", \"DefaultValue\": \"JsonConvert.SerializeObject(request)\", \"DependentClasses\": []}, {\"Type\": \"Framework.Service.RestfulClient\", \"AccessModifier\": \"private\", \"Name\": \"client\", \"DefaultValue\": \"new\\r\\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext)\", \"DependentClasses\": []}, {\"Type\": \"RestApiResponse\", \"AccessModifier\": \"private\", \"Name\": \"service\", \"DefaultValue\": \"client.ExecuteAuthorizeRequest(strRequest)\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"spName\", \"DefaultValue\": \"DataAccessConstants.SP_GetDynamicEligibilityAttributes\", \"DependentClasses\": []}, {\"Type\": \"DynamicEligibilityComponent\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"new DynamicEligibilityComponent()\\r\\n            {\\r\\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\\r\\n                Messages = new List<ResponseMessage>(),\\r\\n                Status = ResponseStatus.Failure\\r\\n            }\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"paramCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"IDbConnection\", \"AccessModifier\": \"private\", \"Name\": \"connection\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"DynamicEligibilityAttribute\", \"AccessModifier\": \"private\", \"Name\": \"dynamicEligibilityAttribute\", \"DefaultValue\": \"new DynamicEligibilityAttribute()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producersString\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producerGroupsString\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"DataTable\", \"AccessModifier\": \"private\", \"Name\": \"table\", \"DefaultValue\": \"new DataTable(\\\"AppetiteCheck\\\")\", \"DependentClasses\": []}, {\"Type\": \"DataRow\", \"AccessModifier\": \"private\", \"Name\": \"row\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producerGroups\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"StringBuilder\", \"AccessModifier\": \"private\", \"Name\": \"producerSB\", \"DefaultValue\": \"new StringBuilder()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producersString\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"StringBuilder\", \"AccessModifier\": \"private\", \"Name\": \"prodGrpsStringBuilder\", \"DefaultValue\": \"new StringBuilder()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producerGroupsString\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"GetProducerGroupDetailsResponse\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"new GetProducerGroupDetailsResponse()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"strRequest\", \"DefaultValue\": \"JsonConvert.SerializeObject(request)\", \"DependentClasses\": []}, {\"Type\": \"Chubb.Marketplace.Framework.Service.RestfulClient\", \"AccessModifier\": \"private\", \"Name\": \"client\", \"DefaultValue\": \"new\\r\\n                Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.ProducerGroupsURL, _configuration, _serviceContext.RequestContext)\", \"DependentClasses\": []}, {\"Type\": \"RestApiResponse\", \"AccessModifier\": \"private\", \"Name\": \"service\", \"DefaultValue\": \"client.ExecuteRequest(strRequest)\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": true,
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            BusinessSegmentListResponse response = null;\r\n            BusinessSegmentListRequest ttsRequest = new BusinessSegmentListRequest();\r\n            string businessSegmentListKey = Cache.CacheKeys.GetBusinessSegmentListKey();\r\n            if (_cacheManager?.Exists(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey) == true)\r\n            {\r\n                response = new BusinessSegmentListResponse\r\n                {\r\n                    BusinessClassDetails = _cacheManager.Get<List<BusinessSegmentData>>(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey)\r\n                };\r\n            }\r\n\r\n            if (response?.BusinessClassDetails == null)\r\n            {\r\n                string strRequest = JsonConvert.SerializeObject(request);\r\n                Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n                RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n                response = JsonConvert.DeserializeObject<BusinessSegmentListResponse>(service.ResponseData);\r\n                _cacheManager?.Push(response.BusinessClassDetails, CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey);\r\n            }\r\n\r\n            if (response?.BusinessClassDetails != null)\r\n            {\r\n                response.BusinessClassDetails = request.IsPrimaryOnly == true ? response?.BusinessClassDetails.Where(x => x.IsPrimaryOnly == 1).ToList() : response.BusinessClassDetails;\r\n            }\r\n\r\n            return response;\r\n        }",
        "all_properties": {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            BusinessSegmentListResponse response = null;\r\n            BusinessSegmentListRequest ttsRequest = new BusinessSegmentListRequest();\r\n            string businessSegmentListKey = Cache.CacheKeys.GetBusinessSegmentListKey();\r\n            if (_cacheManager?.Exists(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey) == true)\r\n            {\r\n                response = new BusinessSegmentListResponse\r\n                {\r\n                    BusinessClassDetails = _cacheManager.Get<List<BusinessSegmentData>>(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey)\r\n                };\r\n            }\r\n\r\n            if (response?.BusinessClassDetails == null)\r\n            {\r\n                string strRequest = JsonConvert.SerializeObject(request);\r\n                Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n                RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n                response = JsonConvert.DeserializeObject<BusinessSegmentListResponse>(service.ResponseData);\r\n                _cacheManager?.Push(response.BusinessClassDetails, CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey);\r\n            }\r\n\r\n            if (response?.BusinessClassDetails != null)\r\n            {\r\n                response.BusinessClassDetails = request.IsPrimaryOnly == true ? response?.BusinessClassDetails.Where(x => x.IsPrimaryOnly == 1).ToList() : response.BusinessClassDetails;\r\n            }\r\n\r\n            return response;\r\n        }",
          "service_endpoint": "[{\"Name\": \"BusinessSegmentsApiURL\", \"Endpoint\": \"http://localhost/V1/businesssegment/GetBusinessSegmentList\"}]",
          "name": "GetBusinessSegmentList",
          "return_type": "BusinessSegmentListResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            AppetiteResultResponse appetiteResponse = new AppetiteResultResponse();\r\n            try\r\n            {\r\n                List<AppetiteCheckResult> appetiteResultList = new List<AppetiteCheckResult>();\r\n                List<AppetiteCheckResult> inaccessibleProducts = new List<AppetiteCheckResult>();\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteCheckResult]\";\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = GetAppetiteCheckParameterCollection(request);\r\n                    DatabaseParameter retParam = new DatabaseParameter();\r\n                    retParam.Name = \"@Result\";\r\n                    retParam.SqlType = SqlDbType.Int;\r\n                    retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                    parameterCollection.Add(retParam);\r\n\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            if (DataRecordExtensions.HasColumn(dr, \"PolicyTypeCode\"))\r\n                            {\r\n                                decimal lAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"AppetiteLevel\"]), out lAppetiteLevel);\r\n                                bool lAppetiteRevenueIndicator;\r\n                                bool.TryParse(Convert.ToString(dr[\"AppetiteRevenueIndicator\"]), out lAppetiteRevenueIndicator);\r\n                                bool accessible = true;\r\n                                if (dr.HasColumn(\"Accessible\") && dr[\"Accessible\"] != DBNull.Value)\r\n                                {\r\n                                    bool.TryParse(Convert.ToString(dr[\"Accessible\"]), out accessible);\r\n                                }\r\n\r\n                                AppetiteCheckResult output = new AppetiteCheckResult();\r\n                                output.PolicyTypeCode = Convert.ToString(dr[\"PolicyTypeCode\"]);\r\n                                output.PolicySubTypeCode = Convert.ToString(dr[\"PolicySubTypeCode\"]);\r\n                                output.PolicyType = PolicyType.Unknown.ParsePolicyType(output.PolicyTypeCode, output.PolicySubTypeCode);\r\n                                output.AppetiteLevelValue = lAppetiteLevel;\r\n                                output.AppetiteShortDescription = Convert.ToString(dr[\"AppetiteShortDescription\"]);\r\n                                output.AppetiteLongDescription = Convert.ToString(dr[\"AppetiteLongDescription\"]);\r\n\r\n                                if (dr.HasColumn(\"RevenueLimit\") && dr[\"RevenueLimit\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimit\"]), out decimal revenueMax);\r\n                                    output.AppetiteRevenueMax = revenueMax;\r\n                                }\r\n\r\n                                if (dr.HasColumn(\"RevenueLimitMin\") && dr[\"RevenueLimitMin\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimitMin\"]), out decimal revenueMin);\r\n                                    output.AppetiteRevenueMin = revenueMin;\r\n                                }\r\n\r\n                                output.AnnualRevenueAppetiteIndicator = lAppetiteRevenueIndicator;\r\n                                output.UnderwriterNotes = Convert.ToString(dr[\"UnderwriterNotes\"]);\r\n                                if (accessible)\r\n                                    appetiteResultList.Add(output);\r\n                                else\r\n                                    inaccessibleProducts.Add(output);\r\n\r\n                                decimal lBaseAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"BaseAppetiteLevel\"]), out lBaseAppetiteLevel);\r\n                                output.BaseAppetiteLevel = lBaseAppetiteLevel;\r\n                            }\r\n\r\n                            if (DataRecordExtensions.HasColumn(dr, \"ErrorNumber\") && DataRecordExtensions.HasColumn(dr, \"ErrorMessage\"))\r\n                            {\r\n                                if (dr[\"ErrorNumber\"] != null)\r\n                                {\r\n                                    ErrorNumber = Convert.ToString(dr[\"ErrorNumber\"]);\r\n                                }\r\n                                if (dr[\"ErrorMessage\"] != null)\r\n                                {\r\n                                    ErrorMessage = Convert.ToString(dr[\"ErrorMessage\"]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n\r\n                    appetiteResponse.Status = ResponseStatus.Success;\r\n\r\n                    if (retParam != null && retParam.Value != null)\r\n                    {\r\n                        appetiteResponse.Messages = new List<ResponseMessage>();\r\n                        switch (Convert.ToString(retParam.Value))\r\n                        {\r\n                            case AppetiteConstants.TTSNotAccesibleByProducer:\r\n                                appetiteResponse.TTSNotAccesibleByProducer = true;\r\n                                break;\r\n\r\n                            case AppetiteConstants.AppetiteCheckResultError:\r\n                                appetiteResponse.Messages.Add(new ResponseMessage()\r\n                                {\r\n                                    MessageCode = ErrorNumber,\r\n                                    MessageText = ErrorMessage,\r\n                                    MessageType = MessageType.Error\r\n                                });\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    appetiteResponse.AppetiteCheckResults = appetiteResultList;\r\n                    appetiteResponse.InaccessibleProducts = inaccessibleProducts;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                appetiteResponse.Status = ResponseStatus.Failure;\r\n            }\r\n            return appetiteResponse;\r\n        }",
        "all_properties": {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            AppetiteResultResponse appetiteResponse = new AppetiteResultResponse();\r\n            try\r\n            {\r\n                List<AppetiteCheckResult> appetiteResultList = new List<AppetiteCheckResult>();\r\n                List<AppetiteCheckResult> inaccessibleProducts = new List<AppetiteCheckResult>();\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteCheckResult]\";\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = GetAppetiteCheckParameterCollection(request);\r\n                    DatabaseParameter retParam = new DatabaseParameter();\r\n                    retParam.Name = \"@Result\";\r\n                    retParam.SqlType = SqlDbType.Int;\r\n                    retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                    parameterCollection.Add(retParam);\r\n\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            if (DataRecordExtensions.HasColumn(dr, \"PolicyTypeCode\"))\r\n                            {\r\n                                decimal lAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"AppetiteLevel\"]), out lAppetiteLevel);\r\n                                bool lAppetiteRevenueIndicator;\r\n                                bool.TryParse(Convert.ToString(dr[\"AppetiteRevenueIndicator\"]), out lAppetiteRevenueIndicator);\r\n                                bool accessible = true;\r\n                                if (dr.HasColumn(\"Accessible\") && dr[\"Accessible\"] != DBNull.Value)\r\n                                {\r\n                                    bool.TryParse(Convert.ToString(dr[\"Accessible\"]), out accessible);\r\n                                }\r\n\r\n                                AppetiteCheckResult output = new AppetiteCheckResult();\r\n                                output.PolicyTypeCode = Convert.ToString(dr[\"PolicyTypeCode\"]);\r\n                                output.PolicySubTypeCode = Convert.ToString(dr[\"PolicySubTypeCode\"]);\r\n                                output.PolicyType = PolicyType.Unknown.ParsePolicyType(output.PolicyTypeCode, output.PolicySubTypeCode);\r\n                                output.AppetiteLevelValue = lAppetiteLevel;\r\n                                output.AppetiteShortDescription = Convert.ToString(dr[\"AppetiteShortDescription\"]);\r\n                                output.AppetiteLongDescription = Convert.ToString(dr[\"AppetiteLongDescription\"]);\r\n\r\n                                if (dr.HasColumn(\"RevenueLimit\") && dr[\"RevenueLimit\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimit\"]), out decimal revenueMax);\r\n                                    output.AppetiteRevenueMax = revenueMax;\r\n                                }\r\n\r\n                                if (dr.HasColumn(\"RevenueLimitMin\") && dr[\"RevenueLimitMin\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimitMin\"]), out decimal revenueMin);\r\n                                    output.AppetiteRevenueMin = revenueMin;\r\n                                }\r\n\r\n                                output.AnnualRevenueAppetiteIndicator = lAppetiteRevenueIndicator;\r\n                                output.UnderwriterNotes = Convert.ToString(dr[\"UnderwriterNotes\"]);\r\n                                if (accessible)\r\n                                    appetiteResultList.Add(output);\r\n                                else\r\n                                    inaccessibleProducts.Add(output);\r\n\r\n                                decimal lBaseAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"BaseAppetiteLevel\"]), out lBaseAppetiteLevel);\r\n                                output.BaseAppetiteLevel = lBaseAppetiteLevel;\r\n                            }\r\n\r\n                            if (DataRecordExtensions.HasColumn(dr, \"ErrorNumber\") && DataRecordExtensions.HasColumn(dr, \"ErrorMessage\"))\r\n                            {\r\n                                if (dr[\"ErrorNumber\"] != null)\r\n                                {\r\n                                    ErrorNumber = Convert.ToString(dr[\"ErrorNumber\"]);\r\n                                }\r\n                                if (dr[\"ErrorMessage\"] != null)\r\n                                {\r\n                                    ErrorMessage = Convert.ToString(dr[\"ErrorMessage\"]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n\r\n                    appetiteResponse.Status = ResponseStatus.Success;\r\n\r\n                    if (retParam != null && retParam.Value != null)\r\n                    {\r\n                        appetiteResponse.Messages = new List<ResponseMessage>();\r\n                        switch (Convert.ToString(retParam.Value))\r\n                        {\r\n                            case AppetiteConstants.TTSNotAccesibleByProducer:\r\n                                appetiteResponse.TTSNotAccesibleByProducer = true;\r\n                                break;\r\n\r\n                            case AppetiteConstants.AppetiteCheckResultError:\r\n                                appetiteResponse.Messages.Add(new ResponseMessage()\r\n                                {\r\n                                    MessageCode = ErrorNumber,\r\n                                    MessageText = ErrorMessage,\r\n                                    MessageType = MessageType.Error\r\n                                });\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    appetiteResponse.AppetiteCheckResults = appetiteResultList;\r\n                    appetiteResponse.InaccessibleProducts = inaccessibleProducts;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                appetiteResponse.Status = ResponseStatus.Failure;\r\n            }\r\n            return appetiteResponse;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteList",
          "return_type": "AppetiteResultResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            bool IsTTSCodeEligible=false;\r\n            try\r\n            {\r\n                string spName = \"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\";\r\n\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n\r\n                    parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode));\r\n\r\n                    using (var dr = _dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            IsTTSCodeEligible = Convert.ToBoolean(dr[\"res\"]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n            }\r\n            return IsTTSCodeEligible;\r\n\r\n        }",
        "all_properties": {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            bool IsTTSCodeEligible=false;\r\n            try\r\n            {\r\n                string spName = \"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\";\r\n\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n\r\n                    parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode));\r\n\r\n                    using (var dr = _dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            IsTTSCodeEligible = Convert.ToBoolean(dr[\"res\"]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n            }\r\n            return IsTTSCodeEligible;\r\n\r\n        }",
          "service_endpoint": "[]",
          "name": "GetCyberTTSCodeEligibility",
          "return_type": "bool",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            var response = new AppetiteOverrideResponse();\r\n            try\r\n            {\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteOverride]\";\r\n                DatabaseParameterCollection parameterCollection = GetAppetiteOverrideParameterCollection(request);\r\n                DatabaseParameter retParam = new DatabaseParameter();\r\n                retParam.Name = \"@Result\";\r\n                retParam.SqlType = SqlDbType.Int;\r\n                retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                parameterCollection.Add(retParam);\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n\r\n                            response.PolicyTypeCode = Convert.ToString(dr[\"POL_TY_C\"]);\r\n                            response.PolicySubTypeCode = Convert.ToString(dr[\"POL_SUB_TY_C\"]);\r\n                            response.StateCode = Convert.ToString(dr[\"ST_C\"]);\r\n                            response.AppetiteLevelValue = Convert.ToDecimal(dr[\"APPETITE_LVL_V\"]);\r\n                            response.RuleOrderEx = Convert.ToInt32(dr[\"RULE_ORDER_EX\"]);\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n                }\r\n                response.Status = ResponseStatus.Success;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                response.Status = ResponseStatus.Failure;\r\n            }\r\n            return response;\r\n        }",
        "all_properties": {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            var response = new AppetiteOverrideResponse();\r\n            try\r\n            {\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteOverride]\";\r\n                DatabaseParameterCollection parameterCollection = GetAppetiteOverrideParameterCollection(request);\r\n                DatabaseParameter retParam = new DatabaseParameter();\r\n                retParam.Name = \"@Result\";\r\n                retParam.SqlType = SqlDbType.Int;\r\n                retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                parameterCollection.Add(retParam);\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n\r\n                            response.PolicyTypeCode = Convert.ToString(dr[\"POL_TY_C\"]);\r\n                            response.PolicySubTypeCode = Convert.ToString(dr[\"POL_SUB_TY_C\"]);\r\n                            response.StateCode = Convert.ToString(dr[\"ST_C\"]);\r\n                            response.AppetiteLevelValue = Convert.ToDecimal(dr[\"APPETITE_LVL_V\"]);\r\n                            response.RuleOrderEx = Convert.ToInt32(dr[\"RULE_ORDER_EX\"]);\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n                }\r\n                response.Status = ResponseStatus.Success;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                response.Status = ResponseStatus.Failure;\r\n            }\r\n            return response;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteOverride",
          "return_type": "AppetiteOverrideResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            bool isEmpAppetiteCheck = _userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent);\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@IsEmpAppetiteCheck\", isEmpAppetiteCheck, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }",
        "all_properties": {
          "modifier": "",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            bool isEmpAppetiteCheck = _userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent);\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@IsEmpAppetiteCheck\", isEmpAppetiteCheck, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteCheckParameterCollection",
          "return_type": "DatabaseParameterCollection",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicyTypeCode\", request.PolicyTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicySubTypeCode\", string.IsNullOrEmpty(request.PolicySubTypeCode) ? string.Empty : request.PolicySubTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }",
        "all_properties": {
          "modifier": "",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicyTypeCode\", request.PolicyTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicySubTypeCode\", string.IsNullOrEmpty(request.PolicySubTypeCode) ? string.Empty : request.PolicySubTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteOverrideParameterCollection",
          "return_type": "DatabaseParameterCollection",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            BaseServiceResponse response = null;\r\n\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Framework.Service.RestfulClient client = new\r\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<BaseServiceResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }",
        "all_properties": {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            BaseServiceResponse response = null;\r\n\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Framework.Service.RestfulClient client = new\r\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<BaseServiceResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }",
          "service_endpoint": "[{\"Name\": \"RewardsApiURL\", \"Endpoint\": \"http://localhost/V1/Rewards/PostUserEvent\"}]",
          "name": "PostUserEvents",
          "return_type": "BaseServiceResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            string spName = DataAccessConstants.SP_GetDynamicEligibilityAttributes;\r\n            DynamicEligibilityComponent response = new DynamicEligibilityComponent()\r\n            {\r\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\r\n                Messages = new List<ResponseMessage>(),\r\n                Status = ResponseStatus.Failure\r\n            };\r\n            DatabaseParameterCollection paramCollection = new DatabaseParameterCollection();\r\n            try\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(request?.TTSCode))\r\n                {\r\n                    paramCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode, DbType.String));\r\n                    paramCollection.Add(new DatabaseParameter(\"@StateCode\", !string.IsNullOrWhiteSpace(request.StateCode) ? request.StateCode : (object)DBNull.Value, DbType.String));\r\n\r\n                    using (IDbConnection connection = _dbHelper.GetConnObject())\r\n                    {\r\n                        using (IDataReader dr = _dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure))\r\n                        {\r\n                            while (dr.Read())\r\n                            {\r\n                                DynamicEligibilityAttribute dynamicEligibilityAttribute = new DynamicEligibilityAttribute();\r\n                                if (dr[\"VALUE\"] != DBNull.Value) dynamicEligibilityAttribute.Value = dr[\"VALUE\"].ToString();\r\n                                if (dr[\"DATA_TYPE\"] != DBNull.Value) dynamicEligibilityAttribute.DynamicEligibilityDataType = Enum.Parse<DynamicEligibilityDataType>(dr[\"DATA_TYPE\"].ToString());\r\n                                if (dr[\"ELEMENTNAME\"] != DBNull.Value)\r\n                                {\r\n                                    response.DynamicEligibilityAttributes.Add(dr[\"ELEMENTNAME\"].ToString(), dynamicEligibilityAttribute);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    response.Status = ResponseStatus.Success;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                response.Status = ResponseStatus.Failure;\r\n                _logger.LogException(ex, $\"Error occurred in GetDynamicEligibilityAttributes. {ex.Message}\");\r\n            }\r\n            return response;\r\n        }",
        "all_properties": {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            string spName = DataAccessConstants.SP_GetDynamicEligibilityAttributes;\r\n            DynamicEligibilityComponent response = new DynamicEligibilityComponent()\r\n            {\r\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\r\n                Messages = new List<ResponseMessage>(),\r\n                Status = ResponseStatus.Failure\r\n            };\r\n            DatabaseParameterCollection paramCollection = new DatabaseParameterCollection();\r\n            try\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(request?.TTSCode))\r\n                {\r\n                    paramCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode, DbType.String));\r\n                    paramCollection.Add(new DatabaseParameter(\"@StateCode\", !string.IsNullOrWhiteSpace(request.StateCode) ? request.StateCode : (object)DBNull.Value, DbType.String));\r\n\r\n                    using (IDbConnection connection = _dbHelper.GetConnObject())\r\n                    {\r\n                        using (IDataReader dr = _dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure))\r\n                        {\r\n                            while (dr.Read())\r\n                            {\r\n                                DynamicEligibilityAttribute dynamicEligibilityAttribute = new DynamicEligibilityAttribute();\r\n                                if (dr[\"VALUE\"] != DBNull.Value) dynamicEligibilityAttribute.Value = dr[\"VALUE\"].ToString();\r\n                                if (dr[\"DATA_TYPE\"] != DBNull.Value) dynamicEligibilityAttribute.DynamicEligibilityDataType = Enum.Parse<DynamicEligibilityDataType>(dr[\"DATA_TYPE\"].ToString());\r\n                                if (dr[\"ELEMENTNAME\"] != DBNull.Value)\r\n                                {\r\n                                    response.DynamicEligibilityAttributes.Add(dr[\"ELEMENTNAME\"].ToString(), dynamicEligibilityAttribute);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    response.Status = ResponseStatus.Success;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                response.Status = ResponseStatus.Failure;\r\n                _logger.LogException(ex, $\"Error occurred in GetDynamicEligibilityAttributes. {ex.Message}\");\r\n            }\r\n            return response;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetDynamicEligibilityAttributes",
          "return_type": "DynamicEligibilityComponent",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            string producersString = string.Empty;\r\n            string producerGroupsString = string.Empty;\r\n\r\n            _sbLogClassifications = new StringBuilder();\r\n\r\n            DataTable table = new DataTable(\"AppetiteCheck\");\r\n            DataRow row;\r\n\r\n            table.Columns.Add(\"ClassificationCode\", typeof(string));\r\n            table.Columns.Add(\"ClassificationType\", typeof(string));\r\n            table.Columns.Add(\"PolicyType\", typeof(string));\r\n            table.Columns.Add(\"PolicySubType\", typeof(string));\r\n            table.Columns.Add(\"Producer\", typeof(string));\r\n            table.Columns.Add(\"ProducerGroup\", typeof(string));\r\n\r\n\r\n\r\n            // Get producerGroups from request\r\n            producerGroupsString = GetProducerGroups(request.ProducerGroupsDBList);\r\n\r\n\r\n            string producerGroups = string.Empty;\r\n            if ((_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)) && !request.UseRequestedProducerOnly)\r\n            {\r\n                producerGroups = GetProducerGroupIds();\r\n            }\r\n\r\n            foreach (BusinessClassificationDB bc in request.BusinessClassificationListDB)\r\n            {\r\n                row = table.NewRow();\r\n\r\n                row[\"ClassificationCode\"] = bc.ClassificationCode;\r\n                row[\"ClassificationType\"] = bc.ClassificationType;\r\n                row[\"PolicyType\"] = string.IsNullOrEmpty(bc.PolicyType) ? string.Empty : bc.PolicyType;\r\n                row[\"PolicySubType\"] = string.IsNullOrEmpty(bc.PolicySubType) ? string.Empty : bc.PolicySubType;\r\n\r\n                producersString = GetProducers(bc.Producers);\r\n                row[\"Producer\"] = !string.IsNullOrEmpty(producersString) ? producersString : string.Empty;\r\n\r\n                \r\n                row[\"ProducerGroup\"] = string.IsNullOrEmpty(producerGroups)? bc.ProducerGroups : producerGroups;\r\n\r\n                table.Rows.Add(row);\r\n\r\n                // Add business classifications to log string\r\n                _sbLogClassifications.AppendFormat(\"\\n ClassificationCode:{0} ClassificationType:{1} PolicyType:{2} PolicySubType:{3} Producer:{4} ProducerGrp:{5}\\n\",\r\n                    bc.ClassificationCode, bc.ClassificationType, bc.PolicyType,\r\n                    bc.PolicySubType, producersString, bc.ProducerGroups);\r\n            }\r\n\r\n            return table;\r\n        }",
        "all_properties": {
          "modifier": "private",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            string producersString = string.Empty;\r\n            string producerGroupsString = string.Empty;\r\n\r\n            _sbLogClassifications = new StringBuilder();\r\n\r\n            DataTable table = new DataTable(\"AppetiteCheck\");\r\n            DataRow row;\r\n\r\n            table.Columns.Add(\"ClassificationCode\", typeof(string));\r\n            table.Columns.Add(\"ClassificationType\", typeof(string));\r\n            table.Columns.Add(\"PolicyType\", typeof(string));\r\n            table.Columns.Add(\"PolicySubType\", typeof(string));\r\n            table.Columns.Add(\"Producer\", typeof(string));\r\n            table.Columns.Add(\"ProducerGroup\", typeof(string));\r\n\r\n\r\n\r\n            // Get producerGroups from request\r\n            producerGroupsString = GetProducerGroups(request.ProducerGroupsDBList);\r\n\r\n\r\n            string producerGroups = string.Empty;\r\n            if ((_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)) && !request.UseRequestedProducerOnly)\r\n            {\r\n                producerGroups = GetProducerGroupIds();\r\n            }\r\n\r\n            foreach (BusinessClassificationDB bc in request.BusinessClassificationListDB)\r\n            {\r\n                row = table.NewRow();\r\n\r\n                row[\"ClassificationCode\"] = bc.ClassificationCode;\r\n                row[\"ClassificationType\"] = bc.ClassificationType;\r\n                row[\"PolicyType\"] = string.IsNullOrEmpty(bc.PolicyType) ? string.Empty : bc.PolicyType;\r\n                row[\"PolicySubType\"] = string.IsNullOrEmpty(bc.PolicySubType) ? string.Empty : bc.PolicySubType;\r\n\r\n                producersString = GetProducers(bc.Producers);\r\n                row[\"Producer\"] = !string.IsNullOrEmpty(producersString) ? producersString : string.Empty;\r\n\r\n                \r\n                row[\"ProducerGroup\"] = string.IsNullOrEmpty(producerGroups)? bc.ProducerGroups : producerGroups;\r\n\r\n                table.Rows.Add(row);\r\n\r\n                // Add business classifications to log string\r\n                _sbLogClassifications.AppendFormat(\"\\n ClassificationCode:{0} ClassificationType:{1} PolicyType:{2} PolicySubType:{3} Producer:{4} ProducerGrp:{5}\\n\",\r\n                    bc.ClassificationCode, bc.ClassificationType, bc.PolicyType,\r\n                    bc.PolicySubType, producersString, bc.ProducerGroups);\r\n            }\r\n\r\n            return table;\r\n        }",
          "service_endpoint": "[]",
          "name": "CreateAppetiteDataTable",
          "return_type": "DataTable",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            StringBuilder producerSB = new StringBuilder();\r\n            string producersString;\r\n\r\n            if (producers != null)\r\n            {\r\n                foreach (Producer p in producers)\r\n                {\r\n                    producerSB.AppendFormat(\"{0}-{1},\", string.IsNullOrEmpty(p.ProducerNumber) ? \"\" : p.ProducerNumber,\r\n                        string.IsNullOrEmpty(p.ProducerSubNumber) ? \"\" : p.ProducerSubNumber);\r\n                }\r\n            }\r\n\r\n\r\n            producersString = producerSB.ToString();\r\n\r\n            if (producersString.Length > 0)\r\n            {\r\n                //remove the last comma\r\n                producersString = producersString.Remove(producersString.Length - 1);\r\n            }\r\n\r\n            return producersString;\r\n        }",
        "all_properties": {
          "modifier": "private",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            StringBuilder producerSB = new StringBuilder();\r\n            string producersString;\r\n\r\n            if (producers != null)\r\n            {\r\n                foreach (Producer p in producers)\r\n                {\r\n                    producerSB.AppendFormat(\"{0}-{1},\", string.IsNullOrEmpty(p.ProducerNumber) ? \"\" : p.ProducerNumber,\r\n                        string.IsNullOrEmpty(p.ProducerSubNumber) ? \"\" : p.ProducerSubNumber);\r\n                }\r\n            }\r\n\r\n\r\n            producersString = producerSB.ToString();\r\n\r\n            if (producersString.Length > 0)\r\n            {\r\n                //remove the last comma\r\n                producersString = producersString.Remove(producersString.Length - 1);\r\n            }\r\n\r\n            return producersString;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetProducers",
          "return_type": "string",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            StringBuilder prodGrpsStringBuilder = new StringBuilder();\r\n            string producerGroupsString;\r\n\r\n            if (producerGroups != null)\r\n            {\r\n                foreach (ProducerGroup pg in producerGroups)\r\n                {\r\n                    prodGrpsStringBuilder.Append(string.IsNullOrEmpty(pg.ProducerGroupTypeCode) ? \"\" : pg.ProducerGroupTypeCode + \",\");\r\n                }\r\n            }\r\n\r\n\r\n            producerGroupsString = prodGrpsStringBuilder.ToString();\r\n\r\n            if (producerGroupsString.Length > 0)\r\n            {\r\n                //remove last comma\r\n                producerGroupsString = producerGroupsString.Remove(producerGroupsString.Length - 1, 1);\r\n            }\r\n\r\n            return producerGroupsString;\r\n        }",
        "all_properties": {
          "modifier": "private",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            StringBuilder prodGrpsStringBuilder = new StringBuilder();\r\n            string producerGroupsString;\r\n\r\n            if (producerGroups != null)\r\n            {\r\n                foreach (ProducerGroup pg in producerGroups)\r\n                {\r\n                    prodGrpsStringBuilder.Append(string.IsNullOrEmpty(pg.ProducerGroupTypeCode) ? \"\" : pg.ProducerGroupTypeCode + \",\");\r\n                }\r\n            }\r\n\r\n\r\n            producerGroupsString = prodGrpsStringBuilder.ToString();\r\n\r\n            if (producerGroupsString.Length > 0)\r\n            {\r\n                //remove last comma\r\n                producerGroupsString = producerGroupsString.Remove(producerGroupsString.Length - 1, 1);\r\n            }\r\n\r\n            return producerGroupsString;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetProducerGroups",
          "return_type": "string",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      },
      {
        "node_labels": [
          "Method"
        ],
        "namespace_prop": "Chubb.Marketplace.Appetite.DataAccess",
        "source_prop": "{\r\n            return _configuration.GetSection(AppetiteConstants.InsideSalesProducerGroups)?.Value;\r\n        }",
        "all_properties": {
          "modifier": "private",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            return _configuration.GetSection(AppetiteConstants.InsideSalesProducerGroups)?.Value;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetProducerGroupIds",
          "return_type": "string",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      }
    ],
    "specific_nodes": {
      "repository_nodes": [
        {
          "externalEndpoints": "[]",
          "name": "autoidcard",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[{\"Name\": \"BillingAccountRetrievalURL\", \"Endpoint\": \"https://eibillacctrtrvlcrm34x1-cid.chubb.com/CRM9ServicesWeb/sca/BillingAccountRetrievalCRM34X1Http\"}, {\"Name\": \"CustomerUpdateURL\", \"Endpoint\": \"https://eicustupdatecrm40x1-cid.chubb.com/CRM2ServicesWeb/sca/CustomerUpdateCRM40X1Http\"}, {\"Name\": \"EnrollmentManagementURL\", \"Endpoint\": \"https://eibussvcenrollmentmgmtcrm37x1.chubb.com/CRM9ServicesWeb/sca/BusinessServiceEnrollmentManagementCRM37X1Http\"}, {\"Name\": \"PartnerConfigApi\", \"Endpoint\": \"https://nae2paasap0019.naasedigital.chubb.com/api/partner/config/commercial\"}, {\"Name\": \"BillAccountPolicyAssociationRetrievalURL\", \"Endpoint\": \"https://chubbio.cks-na-prod01.chubbdigital.com/crm-services/commercial/billing/billing-account-association/retrieval/v2\"}, {\"Name\": \"ICCDocumentListUrl\", \"Endpoint\": \"https://EIDOCLISTRTRVLBCMS5X1.chubb.com/ContentManagementServicesWeb/sca/DocumentListRetrievalCMS5X1Http\"}, {\"Name\": \"MajescoBillingAccountActivityUrl\", \"Endpoint\": \"https://studiogateway.chubb.com/billing.enquiry/billing/account/activity\"}, {\"Name\": \"MajescoPaymentScheduleUrl\", \"Endpoint\": \"https://studiogateway.chubb.com/billing.enquiry/Payment/schedule\"}, {\"Name\": \"GetTokenDigitalServiceUrl\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.operations.authorization?Identity=AAD\"}, {\"Name\": \"MajescoBillingAccountDetailsUrl\", \"Endpoint\": \"https://studiogateway.chubb.com/billing.enquiry/billing/accounts\"}, {\"Name\": \"MajescoBillingAddressUpdateUrl\", \"Endpoint\": \"https://chubbio.cks-na-prod01.chubbdigital.com/crm-services/commercial/billing/billing-account/v1\"}]",
          "name": "billing",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[{\"Name\": \"ProMatrixGetTokenServiceUrl\", \"Endpoint\": \"https://veriskcpapiuat.iso.com/login\"}, {\"Name\": \"GetBurReportURL\", \"Endpoint\": \"https://prometrixapiuat.iso.com/uw/Risk\"}, {\"Name\": \"GetBurReportPDF\", \"Endpoint\": \"https://prometrixapiuat.iso.com/uw/Risk/{0}/Report/UnderWriting/pdf\"}, {\"Name\": \"ProMatrixAddressSearchUrl\", \"Endpoint\": \"https://prometrixapiuat.iso.com/uw/Address\"}]",
          "name": "burreport",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[]",
          "name": "businessprocess",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[]",
          "name": "businesssegment",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[{\"Name\": \"GetTokenDigitalServiceUrl\", \"Endpoint\": \"https://na.chubbdigital.com/api/tokens\"}, {\"Name\": \"SolrContentApiUrl\", \"Endpoint\": \"https://na.chubbdigital.com/digital.solrsearch/solr/chubb-sci-portal\"}, {\"Name\": \"GetGraphQLTokenServiceUrl\", \"Endpoint\": \"https://na.chubbdigital.com/enterprise.operations.authorization\"}, {\"Name\": \"GraphQLContentApiUrl\", \"Endpoint\": \"https://na.chubbdigital.com/digital.aem/graphql/execute.json/chubb-portal\"}]",
          "name": "content",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[{\"Name\": \"PartnerConfigApi\", \"Endpoint\": \"https://nae2paasap0019.naasedigital.sit.chubb.com//api/partner/config/commercial\"}, {\"Name\": \"ICCCustomerUpdateURL\", \"Endpoint\": \"https://eicustupdatecrm40x1-cid.chubb.com/CRM2ServicesWeb/sca/CustomerUpdateCRM40X1Http\"}]",
          "name": "customerdata",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[{\"Name\": \"P360TokenServiceUrl\", \"Endpoint\": \"https://login.microsoftonline.com/chubbgroup.onmicrosoft.com/oauth2/token\"}, {\"Name\": \"BusinessClassificationV2URL\", \"Endpoint\": \"https://na.chubbdigital.com/digital.operations.prospect360-underwriting/iq/sci-bop-p360/acct-clsfy-frmgrphc\"}, {\"Name\": \"UnderwritingQuestionsURL\", \"Endpoint\": \"https://na.chubbdigital.com/digital.operations.prospect360-underwriting/iq/sci-bop-p360/class-specific\"}, {\"Name\": \"PropertyDataURL\", \"Endpoint\": \"https://na.chubbdigital.com/digital.operations.prospect360-underwriting/iq/sci-bop-p360/property-data\"}]",
          "name": "customerprefill",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[{\"Name\": \"GlobalCustomerSearchURL\", \"Endpoint\": \"https://EICOMMCUSTSRCHCRM4X4P-cid.chubb.com/CRM2ServicesWeb/sca/CommercialCustomerSearchCRM4X4Http\"}, {\"Name\": \"CommercialPolicyRetrievalURL\", \"Endpoint\": \"https://eicomlinsdgrppolrtrvlcrm33x2-cid.chubb.com/CRM6ServicesWeb/sca/CommercialInsuredGroupPolicyRetrievalCRM33X2Http\"}, {\"Name\": \"CustomerUpdateURL\", \"Endpoint\": \"https://eicustupdatecrm40x1-cid.chubb.com/CRM2ServicesWeb/sca/CustomerUpdateCRM40X1Http\"}, {\"Name\": \"ContactRetrievalURL\", \"Endpoint\": \"https://eicntctretvlcrp30x1-cid.chubb.com/Corporate4ServicesWeb/sca/ContactRetrievalCRP30X1Http\"}, {\"Name\": \"UserAuthorizationRetrievalURL\", \"Endpoint\": \"https://EIDIGITALUSERSERVICES.chubb.com:8010/DigitalUserServices/UserAuthorizationRetrievalEBE5X1\"}, {\"Name\": \"DigitalUsersURL\", \"Endpoint\": \"https://eidigitaluserservices.chubb.com:8010/DigitalUserServices/DigitalUserServiceProvider\"}, {\"Name\": \"AipmAuthenticationURL\", \"Endpoint\": \"https://na.chubbdigital.com/api/tokens\"}, {\"Name\": \"MDMContactRetrievalURL\", \"Endpoint\": \"https://na.chubbdigital.com/api/mdm/commercial/searchcustomer\"}, {\"Name\": \"MDMContactUpdateURL\", \"Endpoint\": \"https://na.chubbdigital.com/api/mdm/commercial/recordpolicy\"}, {\"Name\": \"MDMAuthUrl\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.operations.authorization?Identity=AAD\"}, {\"Name\": \"MDMContactRetrievalAPIM2URL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.operations.mdm/api-retrieve/commercial/customer\"}, {\"Name\": \"MDMContactUpdateAPIM2URL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.operations.mdm/api-record/commercial/policy\"}, {\"Name\": \"OnboardingServiceURL\", \"Endpoint\": \"https://na-digital-api.chubb.com/FastTrackApi/api/message\"}, {\"Name\": \"ExactTargetUrl\", \"Endpoint\": \"https://mc0fg4tv29db3j89qw46wmj1kdb8.rest.marketingcloudapis.com/messaging/v1/messageDefinitionSends/key:945309/send\"}, {\"Name\": \"ExactTargetToken\", \"Endpoint\": \"https://mc0fg4tv29db3j89qw46wmj1kdb8.auth.marketingcloudapis.com/v2/token\"}, {\"Name\": \"RAFMyCustomerURL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.automation.rafservice/renewal/account/dateRange\"}, {\"Name\": \"RAFAllCustomerURL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.automation.rafservice/renewal/producer/dateRange\"}, {\"Name\": \"RAFRenewalSummaryURL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.automation.rafservice/renewal/summary\"}, {\"Name\": \"RAFAccountActivityURL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.automation.rafservice/renewal/account/activity\"}, {\"Name\": \"RAFSearchURL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.automation.rafservice/renewal/search\"}, {\"Name\": \"RAFSummaryOfChangeURL\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.automation.rafservice/renewal/summaryOfChange\"}, {\"Name\": \"ADB2CRAFAuthUrl\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.operations.authorization?Identity=AAD\"}, {\"Name\": \"ManageClaimsAuthUrl\", \"Endpoint\": \"https://na.chubbdigital.com/enterprise.operations.authorization/?Identity=AAD\"}, {\"Name\": \"ManageClaimsEncryptionUrl\", \"Endpoint\": \"https://na.chubbdigital.com/enterprise.operations.crypto/encrypt\"}]",
          "name": "customer",
          "type": "Repository",
          "namespace": ""
        },
        {
          "externalEndpoints": "[{\"Name\": \"DuckCreekServiceUrl\", \"Endpoint\": \"https://scispft.chubb.com/duckcreek/dctserver.aspx\"}, {\"Name\": \"BatchDuckCreekServiceUrl\", \"Endpoint\": \"https://batchsci-dcsquare.chubb.com/scisrv/dctserver.aspx\"}, {\"Name\": \"QuoteCoverageOptionsUrl\", \"Endpoint\": \"https://nae2paasap0133.naasedigital.chubb.com/QuoteOptions/Consolidate\"}, {\"Name\": \"CyberRiskReportServiceUrl\", \"Endpoint\": \"https://na.chubbdigital.com/operations.cyber-risk-report-data/\"}, {\"Name\": \"AuthorizeTokenService\", \"Endpoint\": \"https://na.chubbdigital.com/enterprise.operations.authorization/?Identity=AAD\"}, {\"Name\": \"AuthorizeTokenService2\", \"Endpoint\": \"https://studiogateway.chubb.com/enterprise.operations.authorization?Identity=AAD\"}, {\"Name\": \"QuoteCoverageOptionsUrl2\", \"Endpoint\": \"https://studiogateway.chubb.com/small-business.sales.px-cyber/QuoteOptions/Consolidate\"}]",
          "name": "cyberquote",
          "type": "Repository",
          "namespace": ""
        }
      ],
      "class_nodes": [
        {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public class ServiceUrls\r\n    {\r\n        public const string CyberClassCodeAndHazardDataURL = \"CyberClassCodeAndHazardDataURL\";\r\n    }\r\n\r\n    public class AppetiteConstants\r\n    {\r\n        public const string ReferenceDatabaseConnection = \"ReferenceDatabaseConnection\";\r\n        public const string AppetiteSettings = \"AppetiteSettings\";\r\n        public const string BusinessSegmentsApiURL = \"BusinessSegmentsApiURL\";\r\n        public const string SCIProducerGroupId = \"SCIMarketplaceSCIGroup\";\r\n        public const string BOAProducerGroup = \"BOAProducerGroup\";\r\n        public const string ServiceName = \"ServiceName\";\r\n        public const string GetAppetiteData = \"GetAppetiteData\";\r\n        public const string CheckAppetite = \"CheckAppetite\";\r\n        public const string RewardsApiURL = \"RewardsApiURL\";\r\n        public const string RewardsEnabled = \"RewardsEnabled\";\r\n        public const string ProducerGroupsURL = \"ProducerGroupsURL\";\r\n        public const string BusinessPropertyDataURL = \"BusinessPropertyDataURL\";\r\n        public const string CacheWebsiteScoreData = \"CacheWebsiteScoreData\";\r\n        public const string CacheWebsiteSignalData = \"CacheWebsiteSignalData\";\r\n        public const string CacheWebsiteSignalDataWithTimeOut = \"CacheWebsiteSignalDataWithTimeOut\";\r\n        public const string CacheWebsiteScoreDataWithTimeOut = \"CacheWebsiteScoreDataWithTimeOut\";\r\n        public const string PanelProducerGroupCodes = \"PanelProducerGroupCodes\";\r\n\r\n        public const string TTSNotAccesibleByProducer = \"3\";\r\n        public const string AppetiteCheckResultError = \"1\";\r\n        public const string EnhancedAccountSearchURL = \"EnhancedAccountSearchURL\";\r\n        public const string P360AccountSearch = \"P360AccountSearch\";\r\n        public const string ExternalDataUrl = \"ExternalDataUrl\";\r\n        public const string ExternalDataAPI = \"ExternalDataAPI\";\r\n        public const string GetEnhancedAccountSearcTokenServiceUrl = \"GetEnhancedAccountSearcTokenServiceUrl\";\r\n        public const string P360IQApiHeaders = \"P360IQApiHeaders\";\r\n        public const string P360DnBApiHeaders = \"P360DnBApiHeaders\";\r\n        public const string IntelligentQuoteDb = \"IntelligentQuoteDb\";\r\n        public const string AccountSearchApiHeaders = \"AccountSearchApiHeaders\";\r\n        public const string P360DnBTokenApiHeaders = \"P360DnBTokenApiHeaders\";\r\n        public const string Standard = \"Standard\";\r\n        public const string IQ = \"IQ\";\r\n        public const string IQPrefill = \"IQ Prefill\";\r\n        public const string Common = \"Common\";\r\n        public const string GetTokenServiceUrl = \"GetTokenServiceUrl\";\r\n        public const string TransactionReportingApiURL = \"TransactionReportingApiURL\";\r\n        public const string TransactionReportingExternalApiURL = \"TransactionReportingExternalApiURL\";\r\n        public const string MatchAccountCount = \"MatchAccountCount\";\r\n        public const string Error404NotFound = \"The remote server returned an error: (404) Not Found\";\r\n        public const string SmallCommercialRevenueMax = \"SmallCommercialRevenueMax\";\r\n        public const string LowerMiddleMarketRevenueMax = \"LowerMiddleMarketRevenueMax\";\r\n        public const string ForeFrontRevenueMax = \"ForeFrontRevenueMax\";\r\n        public const string InsideSalesProducerGroups = \"InsideSalesProducerGroups\";\r\n        public const string BusinessSegmentDetails = \"BusinessSegmentDetails\";\r\n        public const string RegexTimeOut = \"RegexTimeOut\";\r\n        public const string TtsClassifyUpdateURL = \"TtsClassifyUpdateURL\";\r\n        public const string WAITFORSIGNALDATACALLTOCOMPLETE = \"WAITFORSIGNALDATACALLTOCOMPLETE\";\r\n        public const string EXTENDCCSTIMEOUT = \"EXTENDCCSTIMEOUT\";\r\n\r\n        public const string BOPCOMMERCIALLIABILITYELIGIBILITYSTATES = \"BOPCommercialLiabilityEligibilityStates\";\r\n        public const string COVERAGETYPE = \"CoverageType\";\r\n        public const string COMMERCIALLIABILITYONLY = \"CommercialLiabilityOnly\";\r\n\r\n    }\r\n\r\n    public static class BusinessClassification\r\n    {\r\n        public const string TTS = \"TTS\";\r\n        public const string CyberClassCode = \"CyberClassCode\";\r\n        public const string HazardGrade = \"HazardGrade\";\r\n        public const string P360TtsMatchCount = \"P360TtsMatchCount\";\r\n        public const string HighConfidenceBracket = \"high\";\r\n    }\r\n\r\n\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\AppetiteConstants.cs[269..4107))",
          "name": "AppetiteConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ReferenceDatabaseConnection\", \"DefaultValue\": \"\\\"ReferenceDatabaseConnection\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AppetiteSettings\", \"DefaultValue\": \"\\\"AppetiteSettings\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessSegmentsApiURL\", \"DefaultValue\": \"\\\"BusinessSegmentsApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SCIProducerGroupId\", \"DefaultValue\": \"\\\"SCIMarketplaceSCIGroup\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BOAProducerGroup\", \"DefaultValue\": \"\\\"BOAProducerGroup\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ServiceName\", \"DefaultValue\": \"\\\"ServiceName\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"GetAppetiteData\", \"DefaultValue\": \"\\\"GetAppetiteData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CheckAppetite\", \"DefaultValue\": \"\\\"CheckAppetite\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RewardsApiURL\", \"DefaultValue\": \"\\\"RewardsApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RewardsEnabled\", \"DefaultValue\": \"\\\"RewardsEnabled\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ProducerGroupsURL\", \"DefaultValue\": \"\\\"ProducerGroupsURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessPropertyDataURL\", \"DefaultValue\": \"\\\"BusinessPropertyDataURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteScoreData\", \"DefaultValue\": \"\\\"CacheWebsiteScoreData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteSignalData\", \"DefaultValue\": \"\\\"CacheWebsiteSignalData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteSignalDataWithTimeOut\", \"DefaultValue\": \"\\\"CacheWebsiteSignalDataWithTimeOut\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CacheWebsiteScoreDataWithTimeOut\", \"DefaultValue\": \"\\\"CacheWebsiteScoreDataWithTimeOut\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"PanelProducerGroupCodes\", \"DefaultValue\": \"\\\"PanelProducerGroupCodes\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TTSNotAccesibleByProducer\", \"DefaultValue\": \"\\\"3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AppetiteCheckResultError\", \"DefaultValue\": \"\\\"1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"EnhancedAccountSearchURL\", \"DefaultValue\": \"\\\"EnhancedAccountSearchURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360AccountSearch\", \"DefaultValue\": \"\\\"P360AccountSearch\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ExternalDataUrl\", \"DefaultValue\": \"\\\"ExternalDataUrl\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ExternalDataAPI\", \"DefaultValue\": \"\\\"ExternalDataAPI\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"GetEnhancedAccountSearcTokenServiceUrl\", \"DefaultValue\": \"\\\"GetEnhancedAccountSearcTokenServiceUrl\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360IQApiHeaders\", \"DefaultValue\": \"\\\"P360IQApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360DnBApiHeaders\", \"DefaultValue\": \"\\\"P360DnBApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IntelligentQuoteDb\", \"DefaultValue\": \"\\\"IntelligentQuoteDb\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearchApiHeaders\", \"DefaultValue\": \"\\\"AccountSearchApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360DnBTokenApiHeaders\", \"DefaultValue\": \"\\\"P360DnBTokenApiHeaders\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Standard\", \"DefaultValue\": \"\\\"Standard\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQ\", \"DefaultValue\": \"\\\"IQ\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQPrefill\", \"DefaultValue\": \"\\\"IQ Prefill\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Common\", \"DefaultValue\": \"\\\"Common\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"GetTokenServiceUrl\", \"DefaultValue\": \"\\\"GetTokenServiceUrl\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TransactionReportingApiURL\", \"DefaultValue\": \"\\\"TransactionReportingApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TransactionReportingExternalApiURL\", \"DefaultValue\": \"\\\"TransactionReportingExternalApiURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"MatchAccountCount\", \"DefaultValue\": \"\\\"MatchAccountCount\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Error404NotFound\", \"DefaultValue\": \"\\\"The remote server returned an error: (404) Not Found\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SmallCommercialRevenueMax\", \"DefaultValue\": \"\\\"SmallCommercialRevenueMax\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"LowerMiddleMarketRevenueMax\", \"DefaultValue\": \"\\\"LowerMiddleMarketRevenueMax\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ForeFrontRevenueMax\", \"DefaultValue\": \"\\\"ForeFrontRevenueMax\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"InsideSalesProducerGroups\", \"DefaultValue\": \"\\\"InsideSalesProducerGroups\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessSegmentDetails\", \"DefaultValue\": \"\\\"BusinessSegmentDetails\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RegexTimeOut\", \"DefaultValue\": \"\\\"RegexTimeOut\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TtsClassifyUpdateURL\", \"DefaultValue\": \"\\\"TtsClassifyUpdateURL\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"WAITFORSIGNALDATACALLTOCOMPLETE\", \"DefaultValue\": \"\\\"WAITFORSIGNALDATACALLTOCOMPLETE\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"EXTENDCCSTIMEOUT\", \"DefaultValue\": \"\\\"EXTENDCCSTIMEOUT\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BOPCOMMERCIALLIABILITYELIGIBILITYSTATES\", \"DefaultValue\": \"\\\"BOPCommercialLiabilityEligibilityStates\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"COVERAGETYPE\", \"DefaultValue\": \"\\\"CoverageType\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"COMMERCIALLIABILITYONLY\", \"DefaultValue\": \"\\\"CommercialLiabilityOnly\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        },
        {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public class ServiceUrls\r\n    {\r\n        public const string CyberClassCodeAndHazardDataURL = \"CyberClassCodeAndHazardDataURL\";\r\n    }\r\n\r\n    public class AppetiteConstants\r\n    {\r\n        public const string ReferenceDatabaseConnection = \"ReferenceDatabaseConnection\";\r\n        public const string AppetiteSettings = \"AppetiteSettings\";\r\n        public const string BusinessSegmentsApiURL = \"BusinessSegmentsApiURL\";\r\n        public const string SCIProducerGroupId = \"SCIMarketplaceSCIGroup\";\r\n        public const string BOAProducerGroup = \"BOAProducerGroup\";\r\n        public const string ServiceName = \"ServiceName\";\r\n        public const string GetAppetiteData = \"GetAppetiteData\";\r\n        public const string CheckAppetite = \"CheckAppetite\";\r\n        public const string RewardsApiURL = \"RewardsApiURL\";\r\n        public const string RewardsEnabled = \"RewardsEnabled\";\r\n        public const string ProducerGroupsURL = \"ProducerGroupsURL\";\r\n        public const string BusinessPropertyDataURL = \"BusinessPropertyDataURL\";\r\n        public const string CacheWebsiteScoreData = \"CacheWebsiteScoreData\";\r\n        public const string CacheWebsiteSignalData = \"CacheWebsiteSignalData\";\r\n        public const string CacheWebsiteSignalDataWithTimeOut = \"CacheWebsiteSignalDataWithTimeOut\";\r\n        public const string CacheWebsiteScoreDataWithTimeOut = \"CacheWebsiteScoreDataWithTimeOut\";\r\n        public const string PanelProducerGroupCodes = \"PanelProducerGroupCodes\";\r\n\r\n        public const string TTSNotAccesibleByProducer = \"3\";\r\n        public const string AppetiteCheckResultError = \"1\";\r\n        public const string EnhancedAccountSearchURL = \"EnhancedAccountSearchURL\";\r\n        public const string P360AccountSearch = \"P360AccountSearch\";\r\n        public const string ExternalDataUrl = \"ExternalDataUrl\";\r\n        public const string ExternalDataAPI = \"ExternalDataAPI\";\r\n        public const string GetEnhancedAccountSearcTokenServiceUrl = \"GetEnhancedAccountSearcTokenServiceUrl\";\r\n        public const string P360IQApiHeaders = \"P360IQApiHeaders\";\r\n        public const string P360DnBApiHeaders = \"P360DnBApiHeaders\";\r\n        public const string IntelligentQuoteDb = \"IntelligentQuoteDb\";\r\n        public const string AccountSearchApiHeaders = \"AccountSearchApiHeaders\";\r\n        public const string P360DnBTokenApiHeaders = \"P360DnBTokenApiHeaders\";\r\n        public const string Standard = \"Standard\";\r\n        public const string IQ = \"IQ\";\r\n        public const string IQPrefill = \"IQ Prefill\";\r\n        public const string Common = \"Common\";\r\n        public const string GetTokenServiceUrl = \"GetTokenServiceUrl\";\r\n        public const string TransactionReportingApiURL = \"TransactionReportingApiURL\";\r\n        public const string TransactionReportingExternalApiURL = \"TransactionReportingExternalApiURL\";\r\n        public const string MatchAccountCount = \"MatchAccountCount\";\r\n        public const string Error404NotFound = \"The remote server returned an error: (404) Not Found\";\r\n        public const string SmallCommercialRevenueMax = \"SmallCommercialRevenueMax\";\r\n        public const string LowerMiddleMarketRevenueMax = \"LowerMiddleMarketRevenueMax\";\r\n        public const string ForeFrontRevenueMax = \"ForeFrontRevenueMax\";\r\n        public const string InsideSalesProducerGroups = \"InsideSalesProducerGroups\";\r\n        public const string BusinessSegmentDetails = \"BusinessSegmentDetails\";\r\n        public const string RegexTimeOut = \"RegexTimeOut\";\r\n        public const string TtsClassifyUpdateURL = \"TtsClassifyUpdateURL\";\r\n        public const string WAITFORSIGNALDATACALLTOCOMPLETE = \"WAITFORSIGNALDATACALLTOCOMPLETE\";\r\n        public const string EXTENDCCSTIMEOUT = \"EXTENDCCSTIMEOUT\";\r\n\r\n        public const string BOPCOMMERCIALLIABILITYELIGIBILITYSTATES = \"BOPCommercialLiabilityEligibilityStates\";\r\n        public const string COVERAGETYPE = \"CoverageType\";\r\n        public const string COMMERCIALLIABILITYONLY = \"CommercialLiabilityOnly\";\r\n\r\n    }\r\n\r\n    public static class BusinessClassification\r\n    {\r\n        public const string TTS = \"TTS\";\r\n        public const string CyberClassCode = \"CyberClassCode\";\r\n        public const string HazardGrade = \"HazardGrade\";\r\n        public const string P360TtsMatchCount = \"P360TtsMatchCount\";\r\n        public const string HighConfidenceBracket = \"high\";\r\n    }\r\n\r\n\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\AppetiteConstants.cs[4115..4466))",
          "name": "BusinessClassification",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TTS\", \"DefaultValue\": \"\\\"TTS\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberClassCode\", \"DefaultValue\": \"\\\"CyberClassCode\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HazardGrade\", \"DefaultValue\": \"\\\"HazardGrade\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"P360TtsMatchCount\", \"DefaultValue\": \"\\\"P360TtsMatchCount\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HighConfidenceBracket\", \"DefaultValue\": \"\\\"high\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        },
        {
          "modifier": "public",
          "source": "\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    public static class CacheKeyConstants\r\n    {\r\n        public static readonly string ProducerGroupsKeyItemId = \"ProducerGroups\";\r\n        public static readonly string BusinessSegmentListKeyItemId = \"BusinessSegmentList\";\r\n\r\n        public static readonly string PreQuoteKey = \"PreQuote\";\r\n        public static readonly string ProducerGroupsByPolicyTypeKeyItemId = \"ProducerGroupsByPolicyType\";\r\n\r\n        public static readonly string EligibilityResponseId = \"EligibilityResponse\";\r\n        public static readonly string ClassificationDataKey = \"ClassificationData\";\r\n        public static readonly string AccountSearch = \"AccountSearch\";\r\n\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\CacheKeyConstants.cs[57..705))",
          "name": "CacheKeyConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ProducerGroupsKeyItemId\", \"DefaultValue\": \"\\\"ProducerGroups\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BusinessSegmentListKeyItemId\", \"DefaultValue\": \"\\\"BusinessSegmentList\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"PreQuoteKey\", \"DefaultValue\": \"\\\"PreQuote\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ProducerGroupsByPolicyTypeKeyItemId\", \"DefaultValue\": \"\\\"ProducerGroupsByPolicyType\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"EligibilityResponseId\", \"DefaultValue\": \"\\\"EligibilityResponse\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationDataKey\", \"DefaultValue\": \"\\\"ClassificationData\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearch\", \"DefaultValue\": \"\\\"AccountSearch\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        },
        {
          "modifier": "internal",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n    internal static class DataAccessConstants\r\n    {\r\n        internal static string SP_GetDynamicEligibilityAttributes = \"[dbsciref].[usp_GetDynamicEligibilityAttributes]\";\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\DataAccessConstants.cs[127..303))",
          "name": "DataAccessConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"internal\", \"Name\": \"SP_GetDynamicEligibilityAttributes\", \"DefaultValue\": \"\\\"[dbsciref].[usp_GetDynamicEligibilityAttributes]\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        },
        {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Reflection;\r\nusing System.Runtime.Serialization;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.NewBusiness.Constants.Enums\r\n{\r\n    public enum IndicativeQuoteProductEnum\r\n    {\r\n        [Description(\"None\")]\r\n        None,\r\n        [Description(\"BOP\")]\r\n        BOP,\r\n        [Description(\"CYBER-ERM\")]\r\n        CYBERERM,\r\n        [Description(\"CYBER-DIGITECT\")]\r\n        CYBERDIGITECT,\r\n        [Description(\"CYBER-PROERM\")]\r\n        CYBERPROERM,\r\n        [Description(\"Appetite\")]\r\n        Appetite,\r\n        [Description(\"Clearance\")]\r\n        Clearance\r\n    }\r\n\r\n    public static class EnumExtensions\r\n    {\r\n        // Note that we never need to expire these cache items, so we just use ConcurrentDictionary rather than MemoryCache\r\n        private static readonly\r\n            ConcurrentDictionary<string, string> DisplayNameCache = new ConcurrentDictionary<string, string>();\r\n\r\n        public static string DisplayName(this Enum value)\r\n        {\r\n            var key = $\"{value.GetType().FullName}.{value}\";\r\n\r\n            var displayName = DisplayNameCache.GetOrAdd(key, x =>\r\n            {\r\n                var name = (DescriptionAttribute[])value\r\n                    .GetType()\r\n                    .GetTypeInfo()\r\n                    .GetField(value.ToString())\r\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\r\n\r\n                return name.Length > 0 ? name[0].Description : value.ToString();\r\n            });\r\n\r\n            return displayName;\r\n        }\r\n    }\r\n}\r\n\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\IndicativeQuoteProductEnum.cs[707..1646))",
          "name": "EnumExtensions",
          "properties": "[{\"Type\": \"ConcurrentDictionary<string, string>\", \"AccessModifier\": \"private\", \"Name\": \"DisplayNameCache\", \"DefaultValue\": \"new ConcurrentDictionary<string, string>()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"key\", \"DefaultValue\": \"$\\\"{value.GetType().FullName}.{value}\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"displayName\", \"DefaultValue\": \"DisplayNameCache.GetOrAdd(key, x =>\\r\\n            {\\r\\n                var name = (DescriptionAttribute[])value\\r\\n                    .GetType()\\r\\n                    .GetTypeInfo()\\r\\n                    .GetField(value.ToString())\\r\\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\\r\\n\\r\\n                return name.Length > 0 ? name[0].Description : value.ToString();\\r\\n            })\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"name\", \"DefaultValue\": \"(DescriptionAttribute[])value\\r\\n                    .GetType()\\r\\n                    .GetTypeInfo()\\r\\n                    .GetField(value.ToString())\\r\\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false)\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": true,
          "namespace": "Chubb.Marketplace.NewBusiness.Constants.Enums"
        },
        {
          "modifier": "public",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.Constants\r\n{\r\n   \r\n    public class TransactionReportingConstants\r\n    {\r\n\r\n       \r\n        \r\n        \r\n        //AddressSelection\r\n        public const string AddressSelectionTransactionTypeCode = \"TTC1\";\r\n\r\n        public const string StreetLookupTransactionSubTypeCode = \"TTC1_TSTC2\";\r\n        public const string AddressTypeStreetLookup = \"Street lookup\";\r\n\r\n        public const string StandardizedAddressTransactionSubTypeCode = \"TTC1_TSTC4\";\r\n        public const string AddressTypeStandardizedAddress = \"Standardized Address\";\r\n\r\n        public const string NonStandardizedAddressTransactionSubTypeCode = \"TTC1_TSTC5\";\r\n        public const string AddressTypeNonStandardizedAddress = \"Non Standardized Address\";\r\n\r\n        //Key\r\n        public const string Address = \"Address\";\r\n\r\n        //Qualification\r\n        public const string QualificationTransactionTypeCode = \"TTC2\";\r\n\r\n        public const string BopIQQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC1\";\r\n        public const string CyberIQQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC2\";\r\n        public const string CyberIQHazardQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC3\";\r\n        public const string CyberIQSingalQualificationStatusTransactionSubTypeCode = \"TTC2_TSTC4\";\r\n        public const string SuggestedTTSAppetiteTransactionTypeCode = \"TTC6\";\r\n        public const string SuggestedTTSAppetiteTransactionSubTypeCode = \"TTC6_TSTC3\";\r\n\r\n        public const string NonIQUserERC = \"ERC1\";\r\n        public const string StateIsNotEligibleForIQERC = \"ERC101\";\r\n        public const string RevenueExceedsIQRangeERC = \"ERC2\";\r\n        public const string RevenueExceedsIQPrefillRangeERC = \"ERC3\";\r\n        public const string UserEnteredTTSIsNotEligibleForIQERC = \"ERC4\";\r\n        public const string UserSelectedTTSIsNotEligibleForIQERC = \"ERC13\";\r\n        public const string SubmissionIsIQEligibleERC = \"ERC5\";\r\n        public const string BOPProductIsUnavailableERC = \"ERC17\";\r\n        public const string CyberProductIsUnavailableERC = \"ERC33\";\r\n\r\n        public const string InEligibleHazardGrade = \"ERC33\";\r\n        public const string NosignalDataResults = \"ERC25\";\r\n\r\n        //AccountSelection\r\n        public const string AccountSelectionTransactionTypeCode = \"TTC3\";\r\n\r\n        public const string NoAccountMatchTransactionSubTypeCode = \"TTC3_TSTC1\";\r\n        public const string OneAccountMatchTransactionSubTypeCode = \"TTC3_TSTC2\";\r\n        public const string MultipleAccountMatchTransactionSubTypeCode = \"TTC3_TSTC3\";\r\n\r\n        public const string AccountNotFoundIQEligibilityRulesCode = \"ERC6\";\r\n        public const string AccountSearchAPITimedoutIQEligibilityRulesCode = \"ERC7\";\r\n        public const string APIExceptionIQEligibilityRulesCode = \"ERC8\";\r\n        public const string ClassificationAPIResponseTimedOut = \"ERC10\";\r\n\r\n        //Classification\r\n        public const string ClassificationTransactionTypeCode = \"TTC5\";\r\n\r\n        public const string ClassificationAPIRequestTransactionSubTypeCode = \"TTC5_TSTC1\";\r\n\r\n        //Key\r\n        public const string State = \"State\";\r\n        public const string TTSCode = \"TTSCode\";\r\n        public const string Revenue = \"Revenue\";\r\n        public const string HasProductAppetite = \"HasProductAppetite\";\r\n        public const string AccountSearchRequest = \"AccountSearchRequest\";\r\n        public const string QuestionsAreValid = \"QuestionsAreValid\";\r\n        public const string HazardSignal = \"HazardSignal\";\r\n\r\n        //KnockoutQuestions\r\n        public const string KnockoutQuestionsTransactionTypeCode = \"TTC4\";\r\n\r\n        public const string OutOfAppetiteTransactionSubTypeCode = \"TTC4_TSTC1\";\r\n\r\n        //SubmissionPath\r\n        public const string IQSubmissionPathCode = \"SPC1\";\r\n        public const string IQPrefillSubmissionPathCode = \"SPC2\";\r\n        public const string StandardSubmissionPathCode = \"SPC3\";\r\n        public const string CommonSubmissionPathCode = \"SPC4\";\r\n\r\n        public const string LongDateTime = \"MM/dd/yyyy HH:mm:ss.fff tt\";\r\n\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\Constants\\TransactionReportingConstants.cs[132..4153))",
          "name": "TransactionReportingConstants",
          "properties": "[{\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressSelectionTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StreetLookupTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC1_TSTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressTypeStreetLookup\", \"DefaultValue\": \"\\\"Street lookup\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StandardizedAddressTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC1_TSTC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressTypeStandardizedAddress\", \"DefaultValue\": \"\\\"Standardized Address\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NonStandardizedAddressTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC1_TSTC5\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AddressTypeNonStandardizedAddress\", \"DefaultValue\": \"\\\"Non Standardized Address\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Address\", \"DefaultValue\": \"\\\"Address\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"QualificationTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BopIQQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberIQQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberIQHazardQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberIQSingalQualificationStatusTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC2_TSTC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SuggestedTTSAppetiteTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC6\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SuggestedTTSAppetiteTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC6_TSTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NonIQUserERC\", \"DefaultValue\": \"\\\"ERC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StateIsNotEligibleForIQERC\", \"DefaultValue\": \"\\\"ERC101\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RevenueExceedsIQRangeERC\", \"DefaultValue\": \"\\\"ERC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"RevenueExceedsIQPrefillRangeERC\", \"DefaultValue\": \"\\\"ERC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"UserEnteredTTSIsNotEligibleForIQERC\", \"DefaultValue\": \"\\\"ERC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"UserSelectedTTSIsNotEligibleForIQERC\", \"DefaultValue\": \"\\\"ERC13\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"SubmissionIsIQEligibleERC\", \"DefaultValue\": \"\\\"ERC5\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"BOPProductIsUnavailableERC\", \"DefaultValue\": \"\\\"ERC17\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CyberProductIsUnavailableERC\", \"DefaultValue\": \"\\\"ERC33\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"InEligibleHazardGrade\", \"DefaultValue\": \"\\\"ERC33\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NosignalDataResults\", \"DefaultValue\": \"\\\"ERC25\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSelectionTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"NoAccountMatchTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC3_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"OneAccountMatchTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC3_TSTC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"MultipleAccountMatchTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC3_TSTC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountNotFoundIQEligibilityRulesCode\", \"DefaultValue\": \"\\\"ERC6\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearchAPITimedoutIQEligibilityRulesCode\", \"DefaultValue\": \"\\\"ERC7\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"APIExceptionIQEligibilityRulesCode\", \"DefaultValue\": \"\\\"ERC8\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationAPIResponseTimedOut\", \"DefaultValue\": \"\\\"ERC10\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC5\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"ClassificationAPIRequestTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC5_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"State\", \"DefaultValue\": \"\\\"State\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"TTSCode\", \"DefaultValue\": \"\\\"TTSCode\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"Revenue\", \"DefaultValue\": \"\\\"Revenue\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HasProductAppetite\", \"DefaultValue\": \"\\\"HasProductAppetite\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"AccountSearchRequest\", \"DefaultValue\": \"\\\"AccountSearchRequest\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"QuestionsAreValid\", \"DefaultValue\": \"\\\"QuestionsAreValid\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"HazardSignal\", \"DefaultValue\": \"\\\"HazardSignal\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"KnockoutQuestionsTransactionTypeCode\", \"DefaultValue\": \"\\\"TTC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"OutOfAppetiteTransactionSubTypeCode\", \"DefaultValue\": \"\\\"TTC4_TSTC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC1\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"IQPrefillSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC2\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"StandardSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC3\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"CommonSubmissionPathCode\", \"DefaultValue\": \"\\\"SPC4\\\"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"public\", \"Name\": \"LongDateTime\", \"DefaultValue\": \"\\\"MM/dd/yyyy HH:mm:ss.fff tt\\\"\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": false,
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        },
        {
          "modifier": "public",
          "source": "using Chubb.Core.Bases;\r\nusing Chubb.Core.Caching.Interfaces;\r\nusing Chubb.Core.Database;\r\nusing Chubb.Core.Logging;\r\nusing Chubb.Marketplace.Appetite.Constants;\r\nusing Chubb.Marketplace.Appetite.Entities;\r\nusing Chubb.Marketplace.Appetite.Enums;\r\nusing Chubb.Marketplace.Appetite.Extentions;\r\nusing Chubb.Marketplace.Framework.Entities;\r\nusing Chubb.Marketplace.Framework.Service;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Chubb.Marketplace.Appetite.DataAccess\r\n{\r\n    public class AppetiteServiceDataAccess\r\n    {\r\n        private DatabaseHelper _dbHelper;\r\n        private IAuthorizedServiceContext _serviceContext;\r\n        private User _userContext;\r\n        private IConfiguration _configuration;\r\n        private ApiLogger _logger;\r\n        private StringBuilder _sbLogClassifications;\r\n        private ICacheManager _cacheManager = null;\r\n        // private string _token;\r\n\r\n        public AppetiteServiceDataAccess(IAuthorizedServiceContext serviceContext)\r\n        {\r\n            _serviceContext = serviceContext;\r\n            _configuration = serviceContext.Configuration;\r\n            _userContext = serviceContext.RequestContext.User;\r\n            _logger = serviceContext.Logger;\r\n            _cacheManager = serviceContext.Cache;\r\n            // _token = serviceContext.RequestContext.Token.EncodedToken;\r\n            _dbHelper = new DatabaseHelper(_configuration, AppetiteConstants.ReferenceDatabaseConnection);\r\n        }\r\n\r\n\r\n        public BusinessSegmentListResponse GetBusinessSegmentList(BusinessSegmentListRequest request)\r\n        {\r\n            BusinessSegmentListResponse response = null;\r\n            BusinessSegmentListRequest ttsRequest = new BusinessSegmentListRequest();\r\n            string businessSegmentListKey = Cache.CacheKeys.GetBusinessSegmentListKey();\r\n            if (_cacheManager?.Exists(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey) == true)\r\n            {\r\n                response = new BusinessSegmentListResponse\r\n                {\r\n                    BusinessClassDetails = _cacheManager.Get<List<BusinessSegmentData>>(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey)\r\n                };\r\n            }\r\n\r\n            if (response?.BusinessClassDetails == null)\r\n            {\r\n                string strRequest = JsonConvert.SerializeObject(request);\r\n                Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n                RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n                response = JsonConvert.DeserializeObject<BusinessSegmentListResponse>(service.ResponseData);\r\n                _cacheManager?.Push(response.BusinessClassDetails, CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey);\r\n            }\r\n\r\n            if (response?.BusinessClassDetails != null)\r\n            {\r\n                response.BusinessClassDetails = request.IsPrimaryOnly == true ? response?.BusinessClassDetails.Where(x => x.IsPrimaryOnly == 1).ToList() : response.BusinessClassDetails;\r\n            }\r\n\r\n            return response;\r\n        }\r\n\r\n        public AppetiteResultResponse GetAppetiteList(AppetiteResultRequest request)\r\n        {\r\n            AppetiteResultResponse appetiteResponse = new AppetiteResultResponse();\r\n            try\r\n            {\r\n                List<AppetiteCheckResult> appetiteResultList = new List<AppetiteCheckResult>();\r\n                List<AppetiteCheckResult> inaccessibleProducts = new List<AppetiteCheckResult>();\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteCheckResult]\";\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = GetAppetiteCheckParameterCollection(request);\r\n                    DatabaseParameter retParam = new DatabaseParameter();\r\n                    retParam.Name = \"@Result\";\r\n                    retParam.SqlType = SqlDbType.Int;\r\n                    retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                    parameterCollection.Add(retParam);\r\n\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            if (DataRecordExtensions.HasColumn(dr, \"PolicyTypeCode\"))\r\n                            {\r\n                                decimal lAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"AppetiteLevel\"]), out lAppetiteLevel);\r\n                                bool lAppetiteRevenueIndicator;\r\n                                bool.TryParse(Convert.ToString(dr[\"AppetiteRevenueIndicator\"]), out lAppetiteRevenueIndicator);\r\n                                bool accessible = true;\r\n                                if (dr.HasColumn(\"Accessible\") && dr[\"Accessible\"] != DBNull.Value)\r\n                                {\r\n                                    bool.TryParse(Convert.ToString(dr[\"Accessible\"]), out accessible);\r\n                                }\r\n\r\n                                AppetiteCheckResult output = new AppetiteCheckResult();\r\n                                output.PolicyTypeCode = Convert.ToString(dr[\"PolicyTypeCode\"]);\r\n                                output.PolicySubTypeCode = Convert.ToString(dr[\"PolicySubTypeCode\"]);\r\n                                output.PolicyType = PolicyType.Unknown.ParsePolicyType(output.PolicyTypeCode, output.PolicySubTypeCode);\r\n                                output.AppetiteLevelValue = lAppetiteLevel;\r\n                                output.AppetiteShortDescription = Convert.ToString(dr[\"AppetiteShortDescription\"]);\r\n                                output.AppetiteLongDescription = Convert.ToString(dr[\"AppetiteLongDescription\"]);\r\n\r\n                                if (dr.HasColumn(\"RevenueLimit\") && dr[\"RevenueLimit\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimit\"]), out decimal revenueMax);\r\n                                    output.AppetiteRevenueMax = revenueMax;\r\n                                }\r\n\r\n                                if (dr.HasColumn(\"RevenueLimitMin\") && dr[\"RevenueLimitMin\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimitMin\"]), out decimal revenueMin);\r\n                                    output.AppetiteRevenueMin = revenueMin;\r\n                                }\r\n\r\n                                output.AnnualRevenueAppetiteIndicator = lAppetiteRevenueIndicator;\r\n                                output.UnderwriterNotes = Convert.ToString(dr[\"UnderwriterNotes\"]);\r\n                                if (accessible)\r\n                                    appetiteResultList.Add(output);\r\n                                else\r\n                                    inaccessibleProducts.Add(output);\r\n\r\n                                decimal lBaseAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"BaseAppetiteLevel\"]), out lBaseAppetiteLevel);\r\n                                output.BaseAppetiteLevel = lBaseAppetiteLevel;\r\n                            }\r\n\r\n                            if (DataRecordExtensions.HasColumn(dr, \"ErrorNumber\") && DataRecordExtensions.HasColumn(dr, \"ErrorMessage\"))\r\n                            {\r\n                                if (dr[\"ErrorNumber\"] != null)\r\n                                {\r\n                                    ErrorNumber = Convert.ToString(dr[\"ErrorNumber\"]);\r\n                                }\r\n                                if (dr[\"ErrorMessage\"] != null)\r\n                                {\r\n                                    ErrorMessage = Convert.ToString(dr[\"ErrorMessage\"]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n\r\n                    appetiteResponse.Status = ResponseStatus.Success;\r\n\r\n                    if (retParam != null && retParam.Value != null)\r\n                    {\r\n                        appetiteResponse.Messages = new List<ResponseMessage>();\r\n                        switch (Convert.ToString(retParam.Value))\r\n                        {\r\n                            case AppetiteConstants.TTSNotAccesibleByProducer:\r\n                                appetiteResponse.TTSNotAccesibleByProducer = true;\r\n                                break;\r\n\r\n                            case AppetiteConstants.AppetiteCheckResultError:\r\n                                appetiteResponse.Messages.Add(new ResponseMessage()\r\n                                {\r\n                                    MessageCode = ErrorNumber,\r\n                                    MessageText = ErrorMessage,\r\n                                    MessageType = MessageType.Error\r\n                                });\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    appetiteResponse.AppetiteCheckResults = appetiteResultList;\r\n                    appetiteResponse.InaccessibleProducts = inaccessibleProducts;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                appetiteResponse.Status = ResponseStatus.Failure;\r\n            }\r\n            return appetiteResponse;\r\n        }\r\n\r\n\r\n        public bool GetCyberTTSCodeEligibility (TTSCodeEligibilityRequest request)\r\n        {\r\n            bool IsTTSCodeEligible=false;\r\n            try\r\n            {\r\n                string spName = \"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\";\r\n\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n\r\n                    parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode));\r\n\r\n                    using (var dr = _dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            IsTTSCodeEligible = Convert.ToBoolean(dr[\"res\"]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n            }\r\n            return IsTTSCodeEligible;\r\n\r\n        }\r\n\r\n        public AppetiteOverrideResponse GetAppetiteOverride(AppetiteOverrideRequest request)\r\n        {\r\n            var response = new AppetiteOverrideResponse();\r\n            try\r\n            {\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteOverride]\";\r\n                DatabaseParameterCollection parameterCollection = GetAppetiteOverrideParameterCollection(request);\r\n                DatabaseParameter retParam = new DatabaseParameter();\r\n                retParam.Name = \"@Result\";\r\n                retParam.SqlType = SqlDbType.Int;\r\n                retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                parameterCollection.Add(retParam);\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n\r\n                            response.PolicyTypeCode = Convert.ToString(dr[\"POL_TY_C\"]);\r\n                            response.PolicySubTypeCode = Convert.ToString(dr[\"POL_SUB_TY_C\"]);\r\n                            response.StateCode = Convert.ToString(dr[\"ST_C\"]);\r\n                            response.AppetiteLevelValue = Convert.ToDecimal(dr[\"APPETITE_LVL_V\"]);\r\n                            response.RuleOrderEx = Convert.ToInt32(dr[\"RULE_ORDER_EX\"]);\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n                }\r\n                response.Status = ResponseStatus.Success;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                response.Status = ResponseStatus.Failure;\r\n            }\r\n            return response;\r\n        }\r\n        DatabaseParameterCollection GetAppetiteCheckParameterCollection(AppetiteResultRequest request)\r\n        {\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            bool isEmpAppetiteCheck = _userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent);\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@IsEmpAppetiteCheck\", isEmpAppetiteCheck, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }\r\n        DatabaseParameterCollection GetAppetiteOverrideParameterCollection(AppetiteOverrideRequest request)\r\n        {\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicyTypeCode\", request.PolicyTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicySubTypeCode\", string.IsNullOrEmpty(request.PolicySubTypeCode) ? string.Empty : request.PolicySubTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }\r\n\r\n          public BaseServiceResponse PostUserEvents(PostUserEventRequest request)\r\n        {\r\n            BaseServiceResponse response = null;\r\n\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Framework.Service.RestfulClient client = new\r\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<BaseServiceResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }\r\n\r\n        public DynamicEligibilityComponent GetDynamicEligibilityAttributes(GetEligibilityQuestionsRequest request)\r\n        {\r\n            string spName = DataAccessConstants.SP_GetDynamicEligibilityAttributes;\r\n            DynamicEligibilityComponent response = new DynamicEligibilityComponent()\r\n            {\r\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\r\n                Messages = new List<ResponseMessage>(),\r\n                Status = ResponseStatus.Failure\r\n            };\r\n            DatabaseParameterCollection paramCollection = new DatabaseParameterCollection();\r\n            try\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(request?.TTSCode))\r\n                {\r\n                    paramCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode, DbType.String));\r\n                    paramCollection.Add(new DatabaseParameter(\"@StateCode\", !string.IsNullOrWhiteSpace(request.StateCode) ? request.StateCode : (object)DBNull.Value, DbType.String));\r\n\r\n                    using (IDbConnection connection = _dbHelper.GetConnObject())\r\n                    {\r\n                        using (IDataReader dr = _dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure))\r\n                        {\r\n                            while (dr.Read())\r\n                            {\r\n                                DynamicEligibilityAttribute dynamicEligibilityAttribute = new DynamicEligibilityAttribute();\r\n                                if (dr[\"VALUE\"] != DBNull.Value) dynamicEligibilityAttribute.Value = dr[\"VALUE\"].ToString();\r\n                                if (dr[\"DATA_TYPE\"] != DBNull.Value) dynamicEligibilityAttribute.DynamicEligibilityDataType = Enum.Parse<DynamicEligibilityDataType>(dr[\"DATA_TYPE\"].ToString());\r\n                                if (dr[\"ELEMENTNAME\"] != DBNull.Value)\r\n                                {\r\n                                    response.DynamicEligibilityAttributes.Add(dr[\"ELEMENTNAME\"].ToString(), dynamicEligibilityAttribute);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    response.Status = ResponseStatus.Success;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                response.Status = ResponseStatus.Failure;\r\n                _logger.LogException(ex, $\"Error occurred in GetDynamicEligibilityAttributes. {ex.Message}\");\r\n            }\r\n            return response;\r\n        }\r\n\r\n        private DataTable CreateAppetiteDataTable(AppetiteResultRequest request)\r\n        {\r\n            string producersString = string.Empty;\r\n            string producerGroupsString = string.Empty;\r\n\r\n            _sbLogClassifications = new StringBuilder();\r\n\r\n            DataTable table = new DataTable(\"AppetiteCheck\");\r\n            DataRow row;\r\n\r\n            table.Columns.Add(\"ClassificationCode\", typeof(string));\r\n            table.Columns.Add(\"ClassificationType\", typeof(string));\r\n            table.Columns.Add(\"PolicyType\", typeof(string));\r\n            table.Columns.Add(\"PolicySubType\", typeof(string));\r\n            table.Columns.Add(\"Producer\", typeof(string));\r\n            table.Columns.Add(\"ProducerGroup\", typeof(string));\r\n\r\n\r\n\r\n            // Get producerGroups from request\r\n            producerGroupsString = GetProducerGroups(request.ProducerGroupsDBList);\r\n\r\n\r\n            string producerGroups = string.Empty;\r\n            if ((_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)) && !request.UseRequestedProducerOnly)\r\n            {\r\n                producerGroups = GetProducerGroupIds();\r\n            }\r\n\r\n            foreach (BusinessClassificationDB bc in request.BusinessClassificationListDB)\r\n            {\r\n                row = table.NewRow();\r\n\r\n                row[\"ClassificationCode\"] = bc.ClassificationCode;\r\n                row[\"ClassificationType\"] = bc.ClassificationType;\r\n                row[\"PolicyType\"] = string.IsNullOrEmpty(bc.PolicyType) ? string.Empty : bc.PolicyType;\r\n                row[\"PolicySubType\"] = string.IsNullOrEmpty(bc.PolicySubType) ? string.Empty : bc.PolicySubType;\r\n\r\n                producersString = GetProducers(bc.Producers);\r\n                row[\"Producer\"] = !string.IsNullOrEmpty(producersString) ? producersString : string.Empty;\r\n\r\n                \r\n                row[\"ProducerGroup\"] = string.IsNullOrEmpty(producerGroups)? bc.ProducerGroups : producerGroups;\r\n\r\n                table.Rows.Add(row);\r\n\r\n                // Add business classifications to log string\r\n                _sbLogClassifications.AppendFormat(\"\\n ClassificationCode:{0} ClassificationType:{1} PolicyType:{2} PolicySubType:{3} Producer:{4} ProducerGrp:{5}\\n\",\r\n                    bc.ClassificationCode, bc.ClassificationType, bc.PolicyType,\r\n                    bc.PolicySubType, producersString, bc.ProducerGroups);\r\n            }\r\n\r\n            return table;\r\n        }\r\n\r\n        private string GetProducers(List<Producer> producers)\r\n        {\r\n            StringBuilder producerSB = new StringBuilder();\r\n            string producersString;\r\n\r\n            if (producers != null)\r\n            {\r\n                foreach (Producer p in producers)\r\n                {\r\n                    producerSB.AppendFormat(\"{0}-{1},\", string.IsNullOrEmpty(p.ProducerNumber) ? \"\" : p.ProducerNumber,\r\n                        string.IsNullOrEmpty(p.ProducerSubNumber) ? \"\" : p.ProducerSubNumber);\r\n                }\r\n            }\r\n\r\n\r\n            producersString = producerSB.ToString();\r\n\r\n            if (producersString.Length > 0)\r\n            {\r\n                //remove the last comma\r\n                producersString = producersString.Remove(producersString.Length - 1);\r\n            }\r\n\r\n            return producersString;\r\n        }\r\n\r\n        private string GetProducerGroups(List<ProducerGroup> producerGroups)\r\n        {\r\n            StringBuilder prodGrpsStringBuilder = new StringBuilder();\r\n            string producerGroupsString;\r\n\r\n            if (producerGroups != null)\r\n            {\r\n                foreach (ProducerGroup pg in producerGroups)\r\n                {\r\n                    prodGrpsStringBuilder.Append(string.IsNullOrEmpty(pg.ProducerGroupTypeCode) ? \"\" : pg.ProducerGroupTypeCode + \",\");\r\n                }\r\n            }\r\n\r\n\r\n            producerGroupsString = prodGrpsStringBuilder.ToString();\r\n\r\n            if (producerGroupsString.Length > 0)\r\n            {\r\n                //remove last comma\r\n                producerGroupsString = producerGroupsString.Remove(producerGroupsString.Length - 1, 1);\r\n            }\r\n\r\n            return producerGroupsString;\r\n        }\r\n        private string GetProducerGroupIds()\r\n        {\r\n            return _configuration.GetSection(AppetiteConstants.InsideSalesProducerGroups)?.Value;\r\n        }\r\n\r\n        public GetProducerGroupDetailsResponse GetProducerGroupFilteredList(GetProducerGroupDetailsRequest request)\r\n        {\r\n            GetProducerGroupDetailsResponse response = new GetProducerGroupDetailsResponse();\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.ProducerGroupsURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<GetProducerGroupDetailsResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }\r\n\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\DataAccess\\AppetiteServiceDataAccess.cs[618..24505))",
          "name": "AppetiteServiceDataAccess",
          "properties": "[{\"Type\": \"DatabaseHelper\", \"AccessModifier\": \"private\", \"Name\": \"_dbHelper\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"IAuthorizedServiceContext\", \"AccessModifier\": \"private\", \"Name\": \"_serviceContext\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"User\", \"AccessModifier\": \"private\", \"Name\": \"_userContext\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"IConfiguration\", \"AccessModifier\": \"private\", \"Name\": \"_configuration\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"ApiLogger\", \"AccessModifier\": \"private\", \"Name\": \"_logger\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"StringBuilder\", \"AccessModifier\": \"private\", \"Name\": \"_sbLogClassifications\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"ICacheManager\", \"AccessModifier\": \"private\", \"Name\": \"_cacheManager\", \"DefaultValue\": \"null\", \"DependentClasses\": []}, {\"Type\": \"BusinessSegmentListResponse\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"null\", \"DependentClasses\": []}, {\"Type\": \"BusinessSegmentListRequest\", \"AccessModifier\": \"private\", \"Name\": \"ttsRequest\", \"DefaultValue\": \"new BusinessSegmentListRequest()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"businessSegmentListKey\", \"DefaultValue\": \"Cache.CacheKeys.GetBusinessSegmentListKey()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"strRequest\", \"DefaultValue\": \"JsonConvert.SerializeObject(request)\", \"DependentClasses\": []}, {\"Type\": \"Chubb.Marketplace.Framework.Service.RestfulClient\", \"AccessModifier\": \"private\", \"Name\": \"client\", \"DefaultValue\": \"new\\r\\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext)\", \"DependentClasses\": []}, {\"Type\": \"RestApiResponse\", \"AccessModifier\": \"private\", \"Name\": \"service\", \"DefaultValue\": \"client.ExecuteAuthorizeRequest(strRequest)\", \"DependentClasses\": []}, {\"Type\": \"AppetiteResultResponse\", \"AccessModifier\": \"private\", \"Name\": \"appetiteResponse\", \"DefaultValue\": \"new AppetiteResultResponse()\", \"DependentClasses\": []}, {\"Type\": \"List<AppetiteCheckResult>\", \"AccessModifier\": \"private\", \"Name\": \"appetiteResultList\", \"DefaultValue\": \"new List<AppetiteCheckResult>()\", \"DependentClasses\": []}, {\"Type\": \"List<AppetiteCheckResult>\", \"AccessModifier\": \"private\", \"Name\": \"inaccessibleProducts\", \"DefaultValue\": \"new List<AppetiteCheckResult>()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorNumber\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorMessage\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"sProcName\", \"DefaultValue\": \"\\\"[dbsciref].[usp_GetAppetiteCheckResult]\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"GetAppetiteCheckParameterCollection(request)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"retParam\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"decimal\", \"AccessModifier\": \"private\", \"Name\": \"lAppetiteLevel\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"lAppetiteRevenueIndicator\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"accessible\", \"DefaultValue\": \"true\", \"DependentClasses\": []}, {\"Type\": \"AppetiteCheckResult\", \"AccessModifier\": \"private\", \"Name\": \"output\", \"DefaultValue\": \"new AppetiteCheckResult()\", \"DependentClasses\": []}, {\"Type\": \"decimal\", \"AccessModifier\": \"private\", \"Name\": \"lBaseAppetiteLevel\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"IsTTSCodeEligible\", \"DefaultValue\": \"false\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"spName\", \"DefaultValue\": \"\\\"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"new AppetiteOverrideResponse()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorNumber\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"ErrorMessage\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"sProcName\", \"DefaultValue\": \"\\\"[dbsciref].[usp_GetAppetiteOverride]\\\"\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"GetAppetiteOverrideParameterCollection(request)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"retParam\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"appetiteCheck\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"DataTable\", \"AccessModifier\": \"private\", \"Name\": \"dt\", \"DefaultValue\": \"CreateAppetiteDataTable(request)\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"isEmpAppetiteCheck\", \"DefaultValue\": \"_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameter\", \"AccessModifier\": \"private\", \"Name\": \"appetiteCheck\", \"DefaultValue\": \"new DatabaseParameter()\", \"DependentClasses\": []}, {\"Type\": \"DataTable\", \"AccessModifier\": \"private\", \"Name\": \"dt\", \"DefaultValue\": \"CreateAppetiteDataTable(request)\", \"DependentClasses\": []}, {\"Type\": \"BaseServiceResponse\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"null\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"strRequest\", \"DefaultValue\": \"JsonConvert.SerializeObject(request)\", \"DependentClasses\": []}, {\"Type\": \"Framework.Service.RestfulClient\", \"AccessModifier\": \"private\", \"Name\": \"client\", \"DefaultValue\": \"new\\r\\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext)\", \"DependentClasses\": []}, {\"Type\": \"RestApiResponse\", \"AccessModifier\": \"private\", \"Name\": \"service\", \"DefaultValue\": \"client.ExecuteAuthorizeRequest(strRequest)\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"spName\", \"DefaultValue\": \"DataAccessConstants.SP_GetDynamicEligibilityAttributes\", \"DependentClasses\": []}, {\"Type\": \"DynamicEligibilityComponent\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"new DynamicEligibilityComponent()\\r\\n            {\\r\\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\\r\\n                Messages = new List<ResponseMessage>(),\\r\\n                Status = ResponseStatus.Failure\\r\\n            }\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"paramCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"IDbConnection\", \"AccessModifier\": \"private\", \"Name\": \"connection\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"DynamicEligibilityAttribute\", \"AccessModifier\": \"private\", \"Name\": \"dynamicEligibilityAttribute\", \"DefaultValue\": \"new DynamicEligibilityAttribute()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producersString\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producerGroupsString\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"DataTable\", \"AccessModifier\": \"private\", \"Name\": \"table\", \"DefaultValue\": \"new DataTable(\\\"AppetiteCheck\\\")\", \"DependentClasses\": []}, {\"Type\": \"DataRow\", \"AccessModifier\": \"private\", \"Name\": \"row\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producerGroups\", \"DefaultValue\": \"string.Empty\", \"DependentClasses\": []}, {\"Type\": \"StringBuilder\", \"AccessModifier\": \"private\", \"Name\": \"producerSB\", \"DefaultValue\": \"new StringBuilder()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producersString\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"StringBuilder\", \"AccessModifier\": \"private\", \"Name\": \"prodGrpsStringBuilder\", \"DefaultValue\": \"new StringBuilder()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"producerGroupsString\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"GetProducerGroupDetailsResponse\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"new GetProducerGroupDetailsResponse()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"strRequest\", \"DefaultValue\": \"JsonConvert.SerializeObject(request)\", \"DependentClasses\": []}, {\"Type\": \"Chubb.Marketplace.Framework.Service.RestfulClient\", \"AccessModifier\": \"private\", \"Name\": \"client\", \"DefaultValue\": \"new\\r\\n                Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.ProducerGroupsURL, _configuration, _serviceContext.RequestContext)\", \"DependentClasses\": []}, {\"Type\": \"RestApiResponse\", \"AccessModifier\": \"private\", \"Name\": \"service\", \"DefaultValue\": \"client.ExecuteRequest(strRequest)\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": true,
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "public",
          "source": "using Chubb.Core.Bases;\r\nusing Chubb.Core.Database;\r\nusing Chubb.Core.Logging;\r\nusing Chubb.Marketplace.Appetite.Constants;\r\nusing Chubb.Marketplace.Appetite.Entities.IndicativeQuote;\r\nusing Chubb.Marketplace.Framework.Entities.Enums;\r\nusing Chubb.Marketplace.Framework.Service;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\n\r\nnamespace Chubb.Marketplace.Appetite.DataAccess.DataBase\r\n{\r\n    public class ReferenceDataAccess\r\n    {\r\n        private DatabaseHelper _dbHelper;\r\n        private readonly ApiLogger _logger;\r\n        public ReferenceDataAccess(IAuthorizedServiceContext serviceContext)\r\n        {\r\n            _logger = serviceContext.Logger;\r\n            _dbHelper = new DatabaseHelper(serviceContext.Configuration, AppetiteConstants.ReferenceDatabaseConnection);\r\n        }\r\n\r\n        public bool ExecuteClassificationService(string TTSCode)\r\n        {\r\n            bool executeProcess = false;\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", TTSCode, DbType.String));\r\n\r\n            using (var connection = _dbHelper.GetConnObject())\r\n            {\r\n                using (IDataReader dr = _dbHelper.ExecuteDataReader(\"[dbsciref].[usp_IsClassficationEnabledForTTS]\", connection, parameterCollection, CommandType.StoredProcedure))\r\n                {\r\n                    while (dr.Read())\r\n                    {\r\n                        executeProcess = bool.TryParse(Convert.ToString(dr[\"EXECUTE_CLASSIFICATION\"]), out bool executeClassification) ? executeClassification : false;\r\n                    }\r\n                }\r\n            }\r\n            return executeProcess;\r\n        }\r\n\r\n        internal IndicativeQuoteTTSCodeEligibilityResponse IsTTSCodeEligible(string ttsCode, string policyType, string policySubType)\r\n        {\r\n            var response = new IndicativeQuoteTTSCodeEligibilityResponse();\r\n            try\r\n            {\r\n                DatabaseParameterCollection paramCollection = new DatabaseParameterCollection();\r\n                paramCollection.Add(new DatabaseParameter(\"@TTS_C\", ttsCode, DbType.String));\r\n                paramCollection.Add(new DatabaseParameter(\"@FeatureName\", MarketplaceFeatures.INDQ.ToString(), DbType.String));\r\n                paramCollection.Add(new DatabaseParameter(\"@PolicyTypeCode\", policyType, DbType.String));\r\n                paramCollection.Add(new DatabaseParameter(\"@PolicySubTypeCode\", policySubType, DbType.String));\r\n\r\n                using (IDbConnection connection = _dbHelper.GetConnObject())\r\n                {\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(\"[dbsciref].usp_GetFeatureEligibility\", connection, paramCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            response.TTSCode = dr[\"TTS_C\"] != null ? dr[\"TTS_C\"].ToString() : string.Empty;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                // Log Exception\r\n                _logger.LogException(ex, \"Error Invoking Database - GetDigitalQuoteDetails\");\r\n\r\n                // Set Response Status to Error\r\n                response.Status = ResponseStatus.Failure;\r\n                response.Messages = new List<ResponseMessage> { new ResponseMessage(\"T0001\", \"Error Invoking Database - GetDigitalQuoteDetails\", MessageType.Error) };\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\DataAccess\\DataBase\\ReferenceDataAccess.cs[417..3619))",
          "name": "ReferenceDataAccess",
          "properties": "[{\"Type\": \"DatabaseHelper\", \"AccessModifier\": \"private\", \"Name\": \"_dbHelper\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"ApiLogger\", \"AccessModifier\": \"private\", \"Name\": \"_logger\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"bool\", \"AccessModifier\": \"private\", \"Name\": \"executeProcess\", \"DefaultValue\": \"false\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"connection\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(\\\"[dbsciref].[usp_IsClassficationEnabledForTTS]\\\", connection, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"new IndicativeQuoteTTSCodeEligibilityResponse()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"paramCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"IDbConnection\", \"AccessModifier\": \"private\", \"Name\": \"connection\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"IDataReader\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(\\\"[dbsciref].usp_GetFeatureEligibility\\\", connection, paramCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": true,
          "namespace": "Chubb.Marketplace.Appetite.DataAccess.DataBase"
        },
        {
          "modifier": "public",
          "source": "using Chubb.Core.Database;\r\nusing Chubb.Marketplace.Appetite.Constants;\r\nusing Chubb.Marketplace.Appetite.Entities.DataBase;\r\nusing Chubb.Marketplace.Framework.Service;\r\nusing Microsoft.Extensions.Configuration;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\n\r\nnamespace Chubb.Marketplace.Appetite.DataAccess\r\n{\r\n    public class IQDataAccessService\r\n    {\r\n        private readonly DatabaseHelper _dbHelper;\r\n        private IConfiguration _configuration;\r\n\r\n        public IQDataAccessService(IAuthorizedServiceContext serviceContext)\r\n        {\r\n            _configuration = serviceContext.Configuration;\r\n            _dbHelper = new DatabaseHelper(_configuration, AppetiteConstants.ReferenceDatabaseConnection);\r\n        }\r\n\r\n        public List<IQEligibilityDBResponse> CheckIQEligibility(IQEligibilityDBRequest eligibilityDBRequest)\r\n        {\r\n            List<IQEligibilityDBResponse> iQEligibilities = new List<IQEligibilityDBResponse>();\r\n            string spName = \"[dbsciref].[usp_CheckIQEligibility]\";\r\n            using (var conn = _dbHelper.GetConnObject())\r\n            {\r\n                DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n\r\n                parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", eligibilityDBRequest.TTS_Code));\r\n                parameterCollection.Add(new DatabaseParameter(\"@StateCode\", eligibilityDBRequest.StateCode));\r\n                parameterCollection.Add(new DatabaseParameter(\"@Revenue\", eligibilityDBRequest.Revenue));\r\n\r\n\r\n                using (var dr = _dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                {\r\n                    while (dr.Read())\r\n                    {\r\n                        IQEligibilityDBResponse dBResponse = new IQEligibilityDBResponse();\r\n\r\n                        dBResponse.PolicyTypeCode = dr[\"POLICY_TYPE_CODE\"] as string;\r\n                        dBResponse.PolicySubTypeCode = dr[\"POLICY_SUBTYPE_CODE\"] as string;\r\n                        dBResponse.IQ_Maximum_Revenue = decimal.TryParse(Convert.ToString(dr[\"IQ_MAXIMUM_REVENUE\"]), out decimal _iqMaxRev) ? _iqMaxRev : default(decimal);\r\n                        dBResponse.IQ_Minimum_Revenue = decimal.TryParse(Convert.ToString(dr[\"IQ_MINIMUM_REVENUE\"]), out decimal _iqMinRev) ? _iqMinRev : default(decimal);\r\n                        dBResponse.Prefill_Minimum_Revenue = decimal.TryParse(Convert.ToString(dr[\"PREFILL_MINIMUM_REVENUE\"]), out decimal _preFillMinRev) ? _preFillMinRev : default(decimal);\r\n\r\n                        dBResponse.Prefill_Maximum_Revenue = decimal.TryParse(Convert.ToString(dr[\"PREFILL_MAXIMUM_REVENUE\"]), out decimal _preFillMaxRev) ? _preFillMaxRev : default(decimal);\r\n\r\n                        dBResponse.IsTTSIQEligible = bool.TryParse(Convert.ToString(dr[\"IS_TTS_IQ_ELIGIBLE\"]), out bool _isTTSIQEligible) && _isTTSIQEligible ? true : false;\r\n                        dBResponse.IsStateIQEligible = bool.TryParse(Convert.ToString(dr[\"IS_STATE_IQ_ELIGIBLE\"]), out bool _isStateIQEligible) && _isStateIQEligible ? true : false;\r\n                        dBResponse.IsRevenueIQEligible = bool.TryParse(Convert.ToString(dr[\"IS_REVENUE_IQ_ELIGIBLE\"]), out bool _isRevenueIQEligible) && _isRevenueIQEligible ? true : false;\r\n                        dBResponse.IsRevenuePrefillEligible = bool.TryParse(Convert.ToString(dr[\"IS_REVENUE_PREFILL_ELIGIBLE\"]), out bool _isRevenuePrefillEligible) && _isRevenuePrefillEligible ? true : false;\r\n                        dBResponse.IsTTSPrefillEligible = bool.TryParse(Convert.ToString(dr[\"IS_TTS_PREFILL_ELIGIBLE\"]), out bool _isTTSPrefillEligible) && _isTTSPrefillEligible ? true : false;\r\n\r\n                        iQEligibilities.Add(dBResponse);\r\n                    }\r\n                }\r\n            }\r\n            return iQEligibilities;\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\DataAccess\\IQDataAccessService.cs[341..3897))",
          "name": "IQDataAccessService",
          "properties": "[{\"Type\": \"DatabaseHelper\", \"AccessModifier\": \"private\", \"Name\": \"_dbHelper\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"IConfiguration\", \"AccessModifier\": \"private\", \"Name\": \"_configuration\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"List<IQEligibilityDBResponse>\", \"AccessModifier\": \"private\", \"Name\": \"iQEligibilities\", \"DefaultValue\": \"new List<IQEligibilityDBResponse>()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"spName\", \"DefaultValue\": \"\\\"[dbsciref].[usp_CheckIQEligibility]\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"DatabaseParameterCollection\", \"AccessModifier\": \"private\", \"Name\": \"parameterCollection\", \"DefaultValue\": \"new DatabaseParameterCollection()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"IQEligibilityDBResponse\", \"AccessModifier\": \"private\", \"Name\": \"dBResponse\", \"DefaultValue\": \"new IQEligibilityDBResponse()\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": true,
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "public",
          "source": "using Chubb.Core.Database;\r\nusing Chubb.Marketplace.Appetite.Constants;\r\n\r\nusing Chubb.Marketplace.Appetite.Entities.DataBase;\r\nusing Chubb.Marketplace.Framework.Service;\r\nusing Microsoft.Extensions.Configuration;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\n\r\nnamespace Chubb.Marketplace.Appetite.DataAccess\r\n{\r\n    public class ProducerGroupsByPolicyTypeDataAccess\r\n    {\r\n        private readonly DatabaseHelper _dbHelper;\r\n        private IConfiguration _configuration;\r\n\r\n        public ProducerGroupsByPolicyTypeDataAccess(IAuthorizedServiceContext serviceContext)\r\n        {\r\n            _configuration = serviceContext.Configuration;\r\n            _dbHelper = new DatabaseHelper(_configuration, AppetiteConstants.ReferenceDatabaseConnection);\r\n        }\r\n\r\n        public List<ProducerGroupsByPolicyType> GetProducerGroupsByPolicyType()\r\n        {\r\n            List<ProducerGroupsByPolicyType> producerIdentifiers = new List<ProducerGroupsByPolicyType>();\r\n\r\n            string spName = \"[dbsciref].[usp_GetProducerGroupsByPolicyType]\";\r\n\r\n            using (var conn = _dbHelper.GetConnObject())\r\n            {\r\n                using (var dr = _dbHelper.ExecuteDataReader(spName, conn, CommandType.StoredProcedure))\r\n                {\r\n                    while (dr.Read())\r\n                    {\r\n\r\n                        ProducerGroupsByPolicyType producerIdentifierGroupType = new ProducerGroupsByPolicyType();\r\n                        producerIdentifierGroupType.PolicyType = string.IsNullOrWhiteSpace(dr[\"POL_TY_C\"] as string) ? null : Convert.ToString(dr[\"POL_TY_C\"]);\r\n                        producerIdentifierGroupType.PolicySubtype = string.IsNullOrWhiteSpace(dr[\"POL_SUB_TY_C\"] as string) ? null : Convert.ToString(dr[\"POL_SUB_TY_C\"]);\r\n                        producerIdentifierGroupType.ProducerGroup = string.IsNullOrWhiteSpace(dr[\"COMB_PRDGRP_C\"] as string) ? null : Convert.ToString(dr[\"COMB_PRDGRP_C\"]);\r\n                        producerIdentifierGroupType.ExcludedProducerGroups = string.IsNullOrWhiteSpace(dr[\"COMB_PRDGRP_EX\"] as string) ? null : Convert.ToString(dr[\"COMB_PRDGRP_EX\"]);\r\n\r\n\r\n                        producerIdentifiers.Add(producerIdentifierGroupType);\r\n                    }\r\n                }\r\n            }\r\n            return producerIdentifiers;\r\n        }\r\n    }\r\n}\r\n",
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\appetite\\Chubb.Marketplace.Appetite\\DataAccess\\ProducerGroupsByPolicyTypeDataAccess.cs[363..2359))",
          "name": "ProducerGroupsByPolicyTypeDataAccess",
          "properties": "[{\"Type\": \"DatabaseHelper\", \"AccessModifier\": \"private\", \"Name\": \"_dbHelper\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"IConfiguration\", \"AccessModifier\": \"private\", \"Name\": \"_configuration\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"List<ProducerGroupsByPolicyType>\", \"AccessModifier\": \"private\", \"Name\": \"producerIdentifiers\", \"DefaultValue\": \"new List<ProducerGroupsByPolicyType>()\", \"DependentClasses\": []}, {\"Type\": \"string\", \"AccessModifier\": \"private\", \"Name\": \"spName\", \"DefaultValue\": \"\\\"[dbsciref].[usp_GetProducerGroupsByPolicyType]\\\"\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"conn\", \"DefaultValue\": \"_dbHelper.GetConnObject()\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"dr\", \"DefaultValue\": \"_dbHelper.ExecuteDataReader(spName, conn, CommandType.StoredProcedure)\", \"DependentClasses\": []}, {\"Type\": \"ProducerGroupsByPolicyType\", \"AccessModifier\": \"private\", \"Name\": \"producerIdentifierGroupType\", \"DefaultValue\": \"new ProducerGroupsByPolicyType()\", \"DependentClasses\": []}]",
          "type": "Class",
          "ds": true,
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      ],
      "method_nodes": [
        {
          "modifier": "public",
          "associated_class": "EnumExtensions",
          "source": "{\r\n            var key = $\"{value.GetType().FullName}.{value}\";\r\n\r\n            var displayName = DisplayNameCache.GetOrAdd(key, x =>\r\n            {\r\n                var name = (DescriptionAttribute[])value\r\n                    .GetType()\r\n                    .GetTypeInfo()\r\n                    .GetField(value.ToString())\r\n                    .GetCustomAttributes(typeof(DescriptionAttribute), false);\r\n\r\n                return name.Length > 0 ? name[0].Description : value.ToString();\r\n            });\r\n\r\n            return displayName;\r\n        }",
          "service_endpoint": "[]",
          "name": "DisplayName",
          "return_type": "string",
          "type": "Method",
          "namespace": "Chubb.Marketplace.NewBusiness.Constants.Enums"
        },
        {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            BusinessSegmentListResponse response = null;\r\n            BusinessSegmentListRequest ttsRequest = new BusinessSegmentListRequest();\r\n            string businessSegmentListKey = Cache.CacheKeys.GetBusinessSegmentListKey();\r\n            if (_cacheManager?.Exists(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey) == true)\r\n            {\r\n                response = new BusinessSegmentListResponse\r\n                {\r\n                    BusinessClassDetails = _cacheManager.Get<List<BusinessSegmentData>>(CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey)\r\n                };\r\n            }\r\n\r\n            if (response?.BusinessClassDetails == null)\r\n            {\r\n                string strRequest = JsonConvert.SerializeObject(request);\r\n                Chubb.Marketplace.Framework.Service.RestfulClient client = new\r\n                    Chubb.Marketplace.Framework.Service.RestfulClient(AppetiteConstants.BusinessSegmentsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n                RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n                response = JsonConvert.DeserializeObject<BusinessSegmentListResponse>(service.ResponseData);\r\n                _cacheManager?.Push(response.BusinessClassDetails, CacheKeyConstants.BusinessSegmentListKeyItemId, businessSegmentListKey);\r\n            }\r\n\r\n            if (response?.BusinessClassDetails != null)\r\n            {\r\n                response.BusinessClassDetails = request.IsPrimaryOnly == true ? response?.BusinessClassDetails.Where(x => x.IsPrimaryOnly == 1).ToList() : response.BusinessClassDetails;\r\n            }\r\n\r\n            return response;\r\n        }",
          "service_endpoint": "[{\"Name\": \"BusinessSegmentsApiURL\", \"Endpoint\": \"http://localhost/V1/businesssegment/GetBusinessSegmentList\"}]",
          "name": "GetBusinessSegmentList",
          "return_type": "BusinessSegmentListResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            AppetiteResultResponse appetiteResponse = new AppetiteResultResponse();\r\n            try\r\n            {\r\n                List<AppetiteCheckResult> appetiteResultList = new List<AppetiteCheckResult>();\r\n                List<AppetiteCheckResult> inaccessibleProducts = new List<AppetiteCheckResult>();\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteCheckResult]\";\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = GetAppetiteCheckParameterCollection(request);\r\n                    DatabaseParameter retParam = new DatabaseParameter();\r\n                    retParam.Name = \"@Result\";\r\n                    retParam.SqlType = SqlDbType.Int;\r\n                    retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                    parameterCollection.Add(retParam);\r\n\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            if (DataRecordExtensions.HasColumn(dr, \"PolicyTypeCode\"))\r\n                            {\r\n                                decimal lAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"AppetiteLevel\"]), out lAppetiteLevel);\r\n                                bool lAppetiteRevenueIndicator;\r\n                                bool.TryParse(Convert.ToString(dr[\"AppetiteRevenueIndicator\"]), out lAppetiteRevenueIndicator);\r\n                                bool accessible = true;\r\n                                if (dr.HasColumn(\"Accessible\") && dr[\"Accessible\"] != DBNull.Value)\r\n                                {\r\n                                    bool.TryParse(Convert.ToString(dr[\"Accessible\"]), out accessible);\r\n                                }\r\n\r\n                                AppetiteCheckResult output = new AppetiteCheckResult();\r\n                                output.PolicyTypeCode = Convert.ToString(dr[\"PolicyTypeCode\"]);\r\n                                output.PolicySubTypeCode = Convert.ToString(dr[\"PolicySubTypeCode\"]);\r\n                                output.PolicyType = PolicyType.Unknown.ParsePolicyType(output.PolicyTypeCode, output.PolicySubTypeCode);\r\n                                output.AppetiteLevelValue = lAppetiteLevel;\r\n                                output.AppetiteShortDescription = Convert.ToString(dr[\"AppetiteShortDescription\"]);\r\n                                output.AppetiteLongDescription = Convert.ToString(dr[\"AppetiteLongDescription\"]);\r\n\r\n                                if (dr.HasColumn(\"RevenueLimit\") && dr[\"RevenueLimit\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimit\"]), out decimal revenueMax);\r\n                                    output.AppetiteRevenueMax = revenueMax;\r\n                                }\r\n\r\n                                if (dr.HasColumn(\"RevenueLimitMin\") && dr[\"RevenueLimitMin\"] != DBNull.Value)\r\n                                {\r\n                                    decimal.TryParse(Convert.ToString(dr[\"RevenueLimitMin\"]), out decimal revenueMin);\r\n                                    output.AppetiteRevenueMin = revenueMin;\r\n                                }\r\n\r\n                                output.AnnualRevenueAppetiteIndicator = lAppetiteRevenueIndicator;\r\n                                output.UnderwriterNotes = Convert.ToString(dr[\"UnderwriterNotes\"]);\r\n                                if (accessible)\r\n                                    appetiteResultList.Add(output);\r\n                                else\r\n                                    inaccessibleProducts.Add(output);\r\n\r\n                                decimal lBaseAppetiteLevel;\r\n                                decimal.TryParse(Convert.ToString(dr[\"BaseAppetiteLevel\"]), out lBaseAppetiteLevel);\r\n                                output.BaseAppetiteLevel = lBaseAppetiteLevel;\r\n                            }\r\n\r\n                            if (DataRecordExtensions.HasColumn(dr, \"ErrorNumber\") && DataRecordExtensions.HasColumn(dr, \"ErrorMessage\"))\r\n                            {\r\n                                if (dr[\"ErrorNumber\"] != null)\r\n                                {\r\n                                    ErrorNumber = Convert.ToString(dr[\"ErrorNumber\"]);\r\n                                }\r\n                                if (dr[\"ErrorMessage\"] != null)\r\n                                {\r\n                                    ErrorMessage = Convert.ToString(dr[\"ErrorMessage\"]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n\r\n                    appetiteResponse.Status = ResponseStatus.Success;\r\n\r\n                    if (retParam != null && retParam.Value != null)\r\n                    {\r\n                        appetiteResponse.Messages = new List<ResponseMessage>();\r\n                        switch (Convert.ToString(retParam.Value))\r\n                        {\r\n                            case AppetiteConstants.TTSNotAccesibleByProducer:\r\n                                appetiteResponse.TTSNotAccesibleByProducer = true;\r\n                                break;\r\n\r\n                            case AppetiteConstants.AppetiteCheckResultError:\r\n                                appetiteResponse.Messages.Add(new ResponseMessage()\r\n                                {\r\n                                    MessageCode = ErrorNumber,\r\n                                    MessageText = ErrorMessage,\r\n                                    MessageType = MessageType.Error\r\n                                });\r\n                                break;\r\n\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    appetiteResponse.AppetiteCheckResults = appetiteResultList;\r\n                    appetiteResponse.InaccessibleProducts = inaccessibleProducts;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                appetiteResponse.Status = ResponseStatus.Failure;\r\n            }\r\n            return appetiteResponse;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteList",
          "return_type": "AppetiteResultResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            bool IsTTSCodeEligible=false;\r\n            try\r\n            {\r\n                string spName = \"[dbfrontend].[usp_GetCyberTTSCodeEligibility]\";\r\n\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n\r\n                    parameterCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode));\r\n\r\n                    using (var dr = _dbHelper.ExecuteDataReader(spName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n                            IsTTSCodeEligible = Convert.ToBoolean(dr[\"res\"]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n            }\r\n            return IsTTSCodeEligible;\r\n\r\n        }",
          "service_endpoint": "[]",
          "name": "GetCyberTTSCodeEligibility",
          "return_type": "bool",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            var response = new AppetiteOverrideResponse();\r\n            try\r\n            {\r\n                string ErrorNumber = string.Empty, ErrorMessage = string.Empty;\r\n                string sProcName = \"[dbsciref].[usp_GetAppetiteOverride]\";\r\n                DatabaseParameterCollection parameterCollection = GetAppetiteOverrideParameterCollection(request);\r\n                DatabaseParameter retParam = new DatabaseParameter();\r\n                retParam.Name = \"@Result\";\r\n                retParam.SqlType = SqlDbType.Int;\r\n                retParam.ParamDirection = ParameterDirection.ReturnValue;\r\n                parameterCollection.Add(retParam);\r\n                using (var conn = _dbHelper.GetConnObject())\r\n                {\r\n                    using (IDataReader dr = _dbHelper.ExecuteDataReader(sProcName, conn, parameterCollection, CommandType.StoredProcedure))\r\n                    {\r\n                        while (dr.Read())\r\n                        {\r\n\r\n                            response.PolicyTypeCode = Convert.ToString(dr[\"POL_TY_C\"]);\r\n                            response.PolicySubTypeCode = Convert.ToString(dr[\"POL_SUB_TY_C\"]);\r\n                            response.StateCode = Convert.ToString(dr[\"ST_C\"]);\r\n                            response.AppetiteLevelValue = Convert.ToDecimal(dr[\"APPETITE_LVL_V\"]);\r\n                            response.RuleOrderEx = Convert.ToInt32(dr[\"RULE_ORDER_EX\"]);\r\n                        }\r\n\r\n                        if (dr != null && !dr.IsClosed)\r\n                            dr.Close();\r\n                    }\r\n                }\r\n                response.Status = ResponseStatus.Success;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogException(ex, ex.Message);\r\n                response.Status = ResponseStatus.Failure;\r\n            }\r\n            return response;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteOverride",
          "return_type": "AppetiteOverrideResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            bool isEmpAppetiteCheck = _userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent);\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@IsEmpAppetiteCheck\", isEmpAppetiteCheck, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteCheckParameterCollection",
          "return_type": "DatabaseParameterCollection",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            DatabaseParameterCollection parameterCollection = new DatabaseParameterCollection();\r\n            DatabaseParameter appetiteCheck = new DatabaseParameter();\r\n            appetiteCheck.Name = \"@AppetiteCheck\";\r\n            DataTable dt = CreateAppetiteDataTable(request);\r\n            appetiteCheck.Value = dt;\r\n            appetiteCheck.SqlType = SqlDbType.Structured;\r\n            appetiteCheck.DataProviderType = DatabaseParameter.DataProviderTypeEnum.Sql;\r\n            parameterCollection.Add(appetiteCheck);\r\n            parameterCollection.Add(new DatabaseParameter(\"@Revenue\", request.RevenueAmount.Value, DbType.Decimal));\r\n            parameterCollection.Add(new DatabaseParameter(\"@StateCode\", request.PrimaryStateOrProvinceAbbreviation, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@NonProfitInd\", request.NotForProfitIndicator.Value, DbType.Boolean));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicyTypeCode\", request.PolicyTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@PolicySubTypeCode\", string.IsNullOrEmpty(request.PolicySubTypeCode) ? string.Empty : request.PolicySubTypeCode, DbType.String));\r\n            parameterCollection.Add(new DatabaseParameter(\"@CountyCode\", request.CountyCode, DbType.String));\r\n\r\n            return parameterCollection;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetAppetiteOverrideParameterCollection",
          "return_type": "DatabaseParameterCollection",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            BaseServiceResponse response = null;\r\n\r\n            string strRequest = JsonConvert.SerializeObject(request);\r\n            Framework.Service.RestfulClient client = new\r\n                Framework.Service.RestfulClient(AppetiteConstants.RewardsApiURL, _configuration, _serviceContext.RequestContext);\r\n\r\n            RestApiResponse service = client.ExecuteAuthorizeRequest(strRequest);\r\n            response = JsonConvert.DeserializeObject<BaseServiceResponse>(service.ResponseData);\r\n\r\n            return response;\r\n        }",
          "service_endpoint": "[{\"Name\": \"RewardsApiURL\", \"Endpoint\": \"http://localhost/V1/Rewards/PostUserEvent\"}]",
          "name": "PostUserEvents",
          "return_type": "BaseServiceResponse",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "public",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            string spName = DataAccessConstants.SP_GetDynamicEligibilityAttributes;\r\n            DynamicEligibilityComponent response = new DynamicEligibilityComponent()\r\n            {\r\n                DynamicEligibilityAttributes = new Dictionary<string, DynamicEligibilityAttribute>(),\r\n                Messages = new List<ResponseMessage>(),\r\n                Status = ResponseStatus.Failure\r\n            };\r\n            DatabaseParameterCollection paramCollection = new DatabaseParameterCollection();\r\n            try\r\n            {\r\n                if (!string.IsNullOrWhiteSpace(request?.TTSCode))\r\n                {\r\n                    paramCollection.Add(new DatabaseParameter(\"@TTSCode\", request.TTSCode, DbType.String));\r\n                    paramCollection.Add(new DatabaseParameter(\"@StateCode\", !string.IsNullOrWhiteSpace(request.StateCode) ? request.StateCode : (object)DBNull.Value, DbType.String));\r\n\r\n                    using (IDbConnection connection = _dbHelper.GetConnObject())\r\n                    {\r\n                        using (IDataReader dr = _dbHelper.ExecuteDataReader(spName, connection, paramCollection, CommandType.StoredProcedure))\r\n                        {\r\n                            while (dr.Read())\r\n                            {\r\n                                DynamicEligibilityAttribute dynamicEligibilityAttribute = new DynamicEligibilityAttribute();\r\n                                if (dr[\"VALUE\"] != DBNull.Value) dynamicEligibilityAttribute.Value = dr[\"VALUE\"].ToString();\r\n                                if (dr[\"DATA_TYPE\"] != DBNull.Value) dynamicEligibilityAttribute.DynamicEligibilityDataType = Enum.Parse<DynamicEligibilityDataType>(dr[\"DATA_TYPE\"].ToString());\r\n                                if (dr[\"ELEMENTNAME\"] != DBNull.Value)\r\n                                {\r\n                                    response.DynamicEligibilityAttributes.Add(dr[\"ELEMENTNAME\"].ToString(), dynamicEligibilityAttribute);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    response.Status = ResponseStatus.Success;\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                response.Status = ResponseStatus.Failure;\r\n                _logger.LogException(ex, $\"Error occurred in GetDynamicEligibilityAttributes. {ex.Message}\");\r\n            }\r\n            return response;\r\n        }",
          "service_endpoint": "[]",
          "name": "GetDynamicEligibilityAttributes",
          "return_type": "DynamicEligibilityComponent",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        },
        {
          "modifier": "private",
          "associated_class": "AppetiteServiceDataAccess",
          "source": "{\r\n            string producersString = string.Empty;\r\n            string producerGroupsString = string.Empty;\r\n\r\n            _sbLogClassifications = new StringBuilder();\r\n\r\n            DataTable table = new DataTable(\"AppetiteCheck\");\r\n            DataRow row;\r\n\r\n            table.Columns.Add(\"ClassificationCode\", typeof(string));\r\n            table.Columns.Add(\"ClassificationType\", typeof(string));\r\n            table.Columns.Add(\"PolicyType\", typeof(string));\r\n            table.Columns.Add(\"PolicySubType\", typeof(string));\r\n            table.Columns.Add(\"Producer\", typeof(string));\r\n            table.Columns.Add(\"ProducerGroup\", typeof(string));\r\n\r\n\r\n\r\n            // Get producerGroups from request\r\n            producerGroupsString = GetProducerGroups(request.ProducerGroupsDBList);\r\n\r\n\r\n            string producerGroups = string.Empty;\r\n            if ((_userContext.IsEmployee || (request.IsInsideSales && !_userContext.IsAgent)) && !request.UseRequestedProducerOnly)\r\n            {\r\n                producerGroups = GetProducerGroupIds();\r\n            }\r\n\r\n            foreach (BusinessClassificationDB bc in request.BusinessClassificationListDB)\r\n            {\r\n                row = table.NewRow();\r\n\r\n                row[\"ClassificationCode\"] = bc.ClassificationCode;\r\n                row[\"ClassificationType\"] = bc.ClassificationType;\r\n                row[\"PolicyType\"] = string.IsNullOrEmpty(bc.PolicyType) ? string.Empty : bc.PolicyType;\r\n                row[\"PolicySubType\"] = string.IsNullOrEmpty(bc.PolicySubType) ? string.Empty : bc.PolicySubType;\r\n\r\n                producersString = GetProducers(bc.Producers);\r\n                row[\"Producer\"] = !string.IsNullOrEmpty(producersString) ? producersString : string.Empty;\r\n\r\n                \r\n                row[\"ProducerGroup\"] = string.IsNullOrEmpty(producerGroups)? bc.ProducerGroups : producerGroups;\r\n\r\n                table.Rows.Add(row);\r\n\r\n                // Add business classifications to log string\r\n                _sbLogClassifications.AppendFormat(\"\\n ClassificationCode:{0} ClassificationType:{1} PolicyType:{2} PolicySubType:{3} Producer:{4} ProducerGrp:{5}\\n\",\r\n                    bc.ClassificationCode, bc.ClassificationType, bc.PolicyType,\r\n                    bc.PolicySubType, producersString, bc.ProducerGroups);\r\n            }\r\n\r\n            return table;\r\n        }",
          "service_endpoint": "[]",
          "name": "CreateAppetiteDataTable",
          "return_type": "DataTable",
          "type": "Method",
          "namespace": "Chubb.Marketplace.Appetite.DataAccess"
        }
      ],
      "controller_nodes": [
        {
          "name": "GetBillingAccountSummary",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "GetBillDetails",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "GetPaymentSchedule",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "GetBillingAddress",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "GetBillAccountPolicyDetails",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "UpdateBillingAddress",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "GetBillAccountPolicies",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "GetBillingDocumentsList",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "UpdateEnrollment",
          "type": "Controller",
          "namespace": ""
        },
        {
          "name": "HttpPost(RegisterRiskLocation)",
          "type": "Controller",
          "namespace": ""
        }
      ],
      "storedprocedure_nodes": [
        {
          "source": "",
          "name": "usp_GetFeatureEligibility",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_GetPrintIndicator",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_RegisterRiskLocation",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_GetBurReportPolicyTracker",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_GetQuoteAdditionalInfo",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_GetQuoteDetails",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_GetQuoteDetailsForComplexityScore",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_GetComplexityScores",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_UpdateQuoteDetailsForComplexity",
          "type": "StoredProcedure",
          "namespace": ""
        },
        {
          "source": "",
          "name": "usp_UpdateComplexityScore",
          "type": "StoredProcedure",
          "namespace": ""
        }
      ],
      "table_nodes": [],
      "constant_nodes": [
        {
          "source": "string : TheForeFrontPackage : \"TFP\"",
          "name": "appetite-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.Appetite.BusinessLogic"
        },
        {
          "source": "string : IndQGenericCode : \"IQ001\"",
          "name": "appetite-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.NewBusiness.BusinessLogic.IndicativeQuote"
        },
        {
          "source": "string : IndQGenericCode : \"IQ001\"",
          "name": "appetite-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.Appetite.BusinessLogic.OpportunityQuote"
        },
        {
          "source": "string : CyberClassCodeAndHazardDataURL : \"CyberClassCodeAndHazardDataURL\"\nstring : ReferenceDatabaseConnection : \"ReferenceDatabaseConnection\"\nstring : AppetiteSettings : \"AppetiteSettings\"\nstring : BusinessSegmentsApiURL : \"BusinessSegmentsApiURL\"\nstring : SCIProducerGroupId : \"SCIMarketplaceSCIGroup\"\nstring : BOAProducerGroup : \"BOAProducerGroup\"\nstring : ServiceName : \"ServiceName\"\nstring : GetAppetiteData : \"GetAppetiteData\"\nstring : CheckAppetite : \"CheckAppetite\"\nstring : RewardsApiURL : \"RewardsApiURL\"\nstring : RewardsEnabled : \"RewardsEnabled\"\nstring : ProducerGroupsURL : \"ProducerGroupsURL\"\nstring : BusinessPropertyDataURL : \"BusinessPropertyDataURL\"\nstring : CacheWebsiteScoreData : \"CacheWebsiteScoreData\"\nstring : CacheWebsiteSignalData : \"CacheWebsiteSignalData\"\nstring : CacheWebsiteSignalDataWithTimeOut : \"CacheWebsiteSignalDataWithTimeOut\"\nstring : CacheWebsiteScoreDataWithTimeOut : \"CacheWebsiteScoreDataWithTimeOut\"\nstring : PanelProducerGroupCodes : \"PanelProducerGroupCodes\"\nstring : TTSNotAccesibleByProducer : \"3\"\nstring : AppetiteCheckResultError : \"1\"\nstring : EnhancedAccountSearchURL : \"EnhancedAccountSearchURL\"\nstring : P360AccountSearch : \"P360AccountSearch\"\nstring : ExternalDataUrl : \"ExternalDataUrl\"\nstring : ExternalDataAPI : \"ExternalDataAPI\"\nstring : GetEnhancedAccountSearcTokenServiceUrl : \"GetEnhancedAccountSearcTokenServiceUrl\"\nstring : P360IQApiHeaders : \"P360IQApiHeaders\"\nstring : P360DnBApiHeaders : \"P360DnBApiHeaders\"\nstring : IntelligentQuoteDb : \"IntelligentQuoteDb\"\nstring : AccountSearchApiHeaders : \"AccountSearchApiHeaders\"\nstring : P360DnBTokenApiHeaders : \"P360DnBTokenApiHeaders\"\nstring : Standard : \"Standard\"\nstring : IQ : \"IQ\"\nstring : IQPrefill : \"IQ Prefill\"\nstring : Common : \"Common\"\nstring : GetTokenServiceUrl : \"GetTokenServiceUrl\"\nstring : TransactionReportingApiURL : \"TransactionReportingApiURL\"\nstring : TransactionReportingExternalApiURL : \"TransactionReportingExternalApiURL\"\nstring : MatchAccountCount : \"MatchAccountCount\"\nstring : Error404NotFound : \"The remote server returned an error: (404) Not Found\"\nstring : SmallCommercialRevenueMax : \"SmallCommercialRevenueMax\"\nstring : LowerMiddleMarketRevenueMax : \"LowerMiddleMarketRevenueMax\"\nstring : ForeFrontRevenueMax : \"ForeFrontRevenueMax\"\nstring : InsideSalesProducerGroups : \"InsideSalesProducerGroups\"\nstring : BusinessSegmentDetails : \"BusinessSegmentDetails\"\nstring : RegexTimeOut : \"RegexTimeOut\"\nstring : TtsClassifyUpdateURL : \"TtsClassifyUpdateURL\"\nstring : WAITFORSIGNALDATACALLTOCOMPLETE : \"WAITFORSIGNALDATACALLTOCOMPLETE\"\nstring : EXTENDCCSTIMEOUT : \"EXTENDCCSTIMEOUT\"\nstring : BOPCOMMERCIALLIABILITYELIGIBILITYSTATES : \"BOPCommercialLiabilityEligibilityStates\"\nstring : COVERAGETYPE : \"CoverageType\"\nstring : COMMERCIALLIABILITYONLY : \"CommercialLiabilityOnly\"\nstring : TTS : \"TTS\"\nstring : CyberClassCode : \"CyberClassCode\"\nstring : HazardGrade : \"HazardGrade\"\nstring : P360TtsMatchCount : \"P360TtsMatchCount\"\nstring : HighConfidenceBracket : \"high\"\nstring : AddressSelectionTransactionTypeCode : \"TTC1\"\nstring : StreetLookupTransactionSubTypeCode : \"TTC1_TSTC2\"\nstring : AddressTypeStreetLookup : \"Street lookup\"\nstring : StandardizedAddressTransactionSubTypeCode : \"TTC1_TSTC4\"\nstring : AddressTypeStandardizedAddress : \"Standardized Address\"\nstring : NonStandardizedAddressTransactionSubTypeCode : \"TTC1_TSTC5\"\nstring : AddressTypeNonStandardizedAddress : \"Non Standardized Address\"\nstring : Address : \"Address\"\nstring : QualificationTransactionTypeCode : \"TTC2\"\nstring : BopIQQualificationStatusTransactionSubTypeCode : \"TTC2_TSTC1\"\nstring : CyberIQQualificationStatusTransactionSubTypeCode : \"TTC2_TSTC2\"\nstring : CyberIQHazardQualificationStatusTransactionSubTypeCode : \"TTC2_TSTC3\"\nstring : CyberIQSingalQualificationStatusTransactionSubTypeCode : \"TTC2_TSTC4\"\nstring : SuggestedTTSAppetiteTransactionTypeCode : \"TTC6\"\nstring : SuggestedTTSAppetiteTransactionSubTypeCode : \"TTC6_TSTC3\"\nstring : NonIQUserERC : \"ERC1\"\nstring : StateIsNotEligibleForIQERC : \"ERC101\"\nstring : RevenueExceedsIQRangeERC : \"ERC2\"\nstring : RevenueExceedsIQPrefillRangeERC : \"ERC3\"\nstring : UserEnteredTTSIsNotEligibleForIQERC : \"ERC4\"\nstring : UserSelectedTTSIsNotEligibleForIQERC : \"ERC13\"\nstring : SubmissionIsIQEligibleERC : \"ERC5\"\nstring : BOPProductIsUnavailableERC : \"ERC17\"\nstring : CyberProductIsUnavailableERC : \"ERC33\"\nstring : InEligibleHazardGrade : \"ERC33\"\nstring : NosignalDataResults : \"ERC25\"\nstring : AccountSelectionTransactionTypeCode : \"TTC3\"\nstring : NoAccountMatchTransactionSubTypeCode : \"TTC3_TSTC1\"\nstring : OneAccountMatchTransactionSubTypeCode : \"TTC3_TSTC2\"\nstring : MultipleAccountMatchTransactionSubTypeCode : \"TTC3_TSTC3\"\nstring : AccountNotFoundIQEligibilityRulesCode : \"ERC6\"\nstring : AccountSearchAPITimedoutIQEligibilityRulesCode : \"ERC7\"\nstring : APIExceptionIQEligibilityRulesCode : \"ERC8\"\nstring : ClassificationAPIResponseTimedOut : \"ERC10\"\nstring : ClassificationTransactionTypeCode : \"TTC5\"\nstring : ClassificationAPIRequestTransactionSubTypeCode : \"TTC5_TSTC1\"\nstring : State : \"State\"\nstring : TTSCode : \"TTSCode\"\nstring : Revenue : \"Revenue\"\nstring : HasProductAppetite : \"HasProductAppetite\"\nstring : AccountSearchRequest : \"AccountSearchRequest\"\nstring : QuestionsAreValid : \"QuestionsAreValid\"\nstring : HazardSignal : \"HazardSignal\"\nstring : KnockoutQuestionsTransactionTypeCode : \"TTC4\"\nstring : OutOfAppetiteTransactionSubTypeCode : \"TTC4_TSTC1\"\nstring : IQSubmissionPathCode : \"SPC1\"\nstring : IQPrefillSubmissionPathCode : \"SPC2\"\nstring : StandardSubmissionPathCode : \"SPC3\"\nstring : CommonSubmissionPathCode : \"SPC4\"\nstring : LongDateTime : \"MM/dd/yyyy HH:mm:ss.fff tt\"",
          "name": "appetite-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.Appetite.Constants"
        },
        {
          "source": "string : _code : \"AP2\"\nstring : _errorMessage : \"Error Invoking Appetite Check\"\nstring : _code : \"AP18\"\nstring : _errorMessage : \"Dun & Bradstreet Error\"\nstring : _code : \"AP1\"\nstring : _errorMessage : \"Error Invoking Appetite API\"",
          "name": "appetite-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.Appetite.Exceptions"
        },
        {
          "source": "string : PolicyAutoIdDocumentApiURL : \"PolicyAutoIdDocumentApiURL\"\nstring : DeletePolicyAutoIdDocumentApiURL : \"DeletePolicyAutoIdDocumentApiURL\"\nstring : RequesterId : \"SCIMP\"\nint : ProductTitleNameMaxLength : 45",
          "name": "autoidcard-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.AutoIdCard.Business.Constants"
        },
        {
          "source": "string : SourceSystemName : \"BCWS\"\nstring : LineOfBusinessTypeCode : \"C\"\nstring : ClientWIPUserID : \"ClientWIPUserID\"\nstring : AddressTypeCode : \"0140\"\nstring : SourceSystemAddressId : \"14\"\nstring : ServiceName : \"ServiceName\"\nstring : ServiceSystemId : \"Q3\"\nstring : PolicyDocumentListApiURL : \"PolicyDocumentListApiURL\"\nstring : GetPolicyDocumentApiURL : \"GetPolicyDocumentApiURL\"\nstring : USACountryCode : \"8A\"\nstring : EnrollmentTypeName : \"Billing\"\nstring : EnrollmentOptionName : \"Paperless\"\nstring : EnrollmentOptionCode : \"DBill01\"\nstring : BNYAutoPayKey : \"BNY RCR\"\nstring : BNYRoutingKey : \"CCONE\"\nstring : PaymentOptionEligible : \"eligible\"\nstring : PaymentOptionEnrolled : \"enrolled\"\nstring : PaymentOptioMinDisplay : \"Minimum Due\"\nstring : PaymentOptioAccountBalnaceDisplay : \"Account Balance\"\nstring : PaymentOptioMinCode : \"MIN\"\nstring : PaymentOptioAccountBalnaceCode : \"BAL\"\nstring : TRSAutoPayKey : \"TRS RCR\"\nstring : CompIndicatorEnroll : \"enl\"\nstring : CompIndicatorUnenroll : \"uel\"\nstring : CompIndicatorReg : \"reg\"\nstring : FooterHeaderIndicator : \"s\"\nstring : AccountType : \"SCI\"\nstring : CustomerEntryPoint : \"CHCR\"\nstring : GetTokenDigitalServiceUrl : \"GetTokenDigitalServiceUrl\"\nstring : DigitalTokenApiHeaders : \"SecuredSettings:DigitalTokenApiHeaders\"\nstring : DigitalApiHeaders : \"SecuredSettings:DigitalApiHeaders\"\nstring : MajescoBillingAccountDetailsUrl : \"MajescoBillingAccountDetailsUrl\"\nstring : MajescoBillingAddressUpdateUrl : \"MajescoBillingAddressUpdateUrl\"\nstring : MajescoBillingAccountActivityUrl : \"MajescoBillingAccountActivityUrl\"\nstring : MajescoPaymentScheduleUrl : \"MajescoPaymentScheduleUrl\"\nstring : ICCDocumentListUrl : \"ICCDocumentListUrl\"\nstring : CorrelationId : \"CorrelationId\"\nstring : CPNumber : \"CPNumber\"\nstring : AccountNumber : \"AccountNumber\"\nstring : GetBillingAddressRetryAttempts : \"GetBillingAddressRetryAttempts\"\nstring : GetBillingAddressRetryWaitTime : \"GetBillingAddressRetryWaitTime\"\nstring : BillingTypeDirectBill : \"Direct Bill\"\nstring : AddressTypeNameBilling : \"Billing\"\nstring : BillAccountPolicyAssociationRetrievalURL : \"BillAccountPolicyAssociationRetrievalURL\"\nstring : ClientWIP : \"ClientWIP\"\nstring : IsMajescoBillingSystemEnabled : \"IsMajescoBillingSystemEnabled\"\nstring : ErrorCode : \"BCWS503\"\nstring : ErrorMessage : \"We are currently performing scheduled maintenance. Please check back shortly for your billing details.\"\nstring : BIL100 : \"BIL100\"\nstring : BILL101 : \"BILL101\"\nstring : BillingAccountRetrievalURL : \"BillingAccountRetrievalURL\"\nstring : CustomerUpdateURL : \"CustomerUpdateURL\"\nstring : CustomerPolicyURL : \"CustomerPolicyURL\"\nstring : EnrollmentManagementURL : \"EnrollmentManagementURL\"\nstring : ValidateBillingAddressApiURL : \"ValidateBillingAddressApiURL\"\nstring : ICCDocumentListUrl : \"ICCDocumentListUrl\"\nstring : BillingAddressChangeNotificationApiURL : \"BillingAddressChangeNotificationApiURL\"\nstring : MajescoPaymentScheduleUrl : \"MajescoPaymentScheduleUrl\"",
          "name": "billing-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.Billing.Constants"
        },
        {
          "source": "string : _code : \"CC31\"\nstring : _errorMessage : \"Error Invoking Billing Activity Service\"\nstring : _code : \"CC31\"\nstring : _errorMessage : \"Error invoking billing address retrieval service: {0}\"\nstring : _code : \"CC32\"\nstring : _errorMessage : \"Error Invoking Payment Schedule Service\"\nstring : _code : \"CC33\"\nstring : _errorMessage : \"Error Invoking Update Customer Service\"",
          "name": "billing-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.Billing.Exceptions"
        },
        {
          "source": "string : GetBurReportURL : \"GetBurReportURL\"\nstring : GetBurReportPDF : \"GetBurReportPDF\"\nstring : ProMatrixGetTokenServiceUrl : \"ProMatrixGetTokenServiceUrl\"\nstring : ProMatrixAddressSearchUrl : \"ProMatrixAddressSearchUrl\"\nstring : ProMetrixSurveyOrderUrl : \"ProMetrixSurveyOrderUrl\"\nstring : ExternalDataSaveApiUrl : \"ExternalDataSaveApiUrl\"\nstring : DuckCreekServiceUrl : \"DuckCreekServiceUrl\"\nstring : GetCustomerContact : \"GetCustomerContact\"\nstring : SavePolicyActionRuleURL : \"SavePolicyActionRuleURL\"\nstring : FileDocumentToCUWRepositoryURL : \"FileDocumentToCUWRepositoryURL\"\nstring : GetPolicyDataURL : \"GetPolicyDataURL\"\nstring : WorkItemManagementRetrievalURL : \"WorkItemManagementRetrievalURL\"\nstring : XML : \"xml\"\nstring : JSON : \"json\"\nstring : ServiceSystemId : \"Q3\"\nstring : EDG22 : \"EDG22\"\nstring : SCIServiceConsumerId : \"SCI\"\nstring : ADB2CAuthUrl : \"ADB2CTokenServiceUrl\"\nstring : AuthTokenCacheKey : \"TokenKey\"\nstring : WorkItemTypeCode : \"001\"\nstring : PolicyEntryTypeCode : \"020\"\nstring : PolicyActionCode : \"001\"\nstring : PolicyActionRuleCode : \"007\"\nstring : DocumentRepositoryName : \"EnvironmentAppSettings:DocumentRepositoryName\"\nstring : DocumentRetrievalUrl : \"EnvironmentAppSettings:DocumentRetrievalUrl\"\nstring : IDD_ : \"idd_\"\nstring : DOCUMENT_ID : \"documentid\"\nstring : CUWDocumentStatusCode : \"C\"\nstring : CUWDataTypeName : \"ACROBAT\"\nstring : DocumentTypeNumberCode : \"00165\"\nstring : ServiceConsumerSystemId : \"001\"\nstring : DocumentApiURL : \"DocumentApiURL\"\nstring : PolicyAdminSettings : \"PolicyAdminSettings\"",
          "name": "burreport-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.BurReport.Constants"
        },
        {
          "source": "string : ATPDMDatabaseConnection : \"ATPDMDatabaseConnection\"\nstring : DigitalDatabaseConnection : \"DigitalDatabaseConnection\"\nstring : GetPolicyDataURL : \"GetPolicyDataURL\"\nstring : GetFormsApiURL : \"GetFormsApiURL\"\nstring : ReferralCodesXpath : \"//Session.getDocumentRs/session/data/policy/UnderwriterReferrals/UnderwriterReferral/RuleCode\"\nstring : BOPQuoteIDXpathInUmb : \"//Session.getDocumentRs/session/data/integrations/BusinessOwners_Retrieval_Events/BOP_PolicyID\"\nint : StandardEvaluatedButNoRules : 1\nint : StandardEvaluatedRules : 3\nstring : UpdateQuoteDetailURL : \"UpdateQuoteDetailURL\"",
          "name": "businessprocess-Constant",
          "type": "Constant",
          "namespace": "Chubb.Marketplace.BusinessProcess.Constants"
        }
      ],
      "enum_nodes": [
        {
          "source": "\r\n    public enum AppetiteRuleCode\r\n    {\r\n        AR001, M001, M002, AR002\r\n    }\r\n",
          "name": "AppetiteRuleCode",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.BusinessLogic"
        },
        {
          "source": "\r\n    public enum UnderwriterRestrictionCodes\r\n    {\r\n        UW01\r\n    }\r\n",
          "name": "UnderwriterRestrictionCodes",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.BusinessLogic"
        },
        {
          "source": "\r\n    public enum UnderwriterRestrictionActions\r\n    {\r\n        Enable, Disable\r\n    }\r\n",
          "name": "UnderwriterRestrictionActions",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.BusinessLogic"
        },
        {
          "source": "    public enum IndicativeQuoteProductEnum\r\n    {\r\n        [Description(\"None\")]\r\n        None,\r\n        [Description(\"BOP\")]\r\n        BOP,\r\n        [Description(\"CYBER-ERM\")]\r\n        CYBERERM,\r\n        [Description(\"CYBER-DIGITECT\")]\r\n        CYBERDIGITECT,\r\n        [Description(\"CYBER-PROERM\")]\r\n        CYBERPROERM,\r\n        [Description(\"Appetite\")]\r\n        Appetite,        \r\n        UMBRELLA,\r\n        [Description(\"Clearance\")]\r\n        Clearance,\r\n        [Description(\"ExistingSubmissions\")]\r\n        ExistingSubmissions,\r\n\r\n    }\r\n",
          "name": "IndicativeQuoteProductEnum",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.NewBusiness.Constants.Enums"
        },
        {
          "source": "    public enum AppetiteResultCodes\r\n    {\r\n        NotEligible,\r\n        NoRevenueAppetite,\r\n        NoPolicyAppetite,\r\n        HasAppetite,\r\n        TTSNotAllowedForProducer\r\n    }\r\n",
          "name": "AppetiteResultCodes",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.Entities"
        },
        {
          "source": "\r\n    public enum BopLimitType\r\n    {\r\n        Building, BusinessPersonalProperty\r\n    }\r\n",
          "name": "BopLimitType",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.Entities.IndicativeQuote"
        },
        {
          "source": "        public enum FailureTypeEnum\r\n        {\r\n            General,\r\n            TimeOut,\r\n            NotFound,\r\n            Exception\r\n        }\r\n",
          "name": "FailureTypeEnum",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.Enums"
        },
        {
          "source": "    public enum DynamicEligibilityDataType\r\n    {\r\n        NUMBER,\r\n        MONEY\r\n    }\r\n",
          "name": "DynamicEligibilityDataType",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.Enums"
        },
        {
          "source": "    public enum EventSubTypeEnum\r\n    {\r\n        [EnumMember(Value = \"None\")]\r\n        None,\r\n        [EnumMember(Value = \"BP\")]\r\n        BusinessOwnerPolicy,\r\n        [EnumMember(Value = \"CY\")]\r\n        Cyber,\r\n        [EnumMember(Value = \"UM\")]\r\n        Umbrella,\r\n        [EnumMember(Value = \"WC\")]\r\n        WorkersComp,\r\n        [EnumMember(Value = \"AU\")]\r\n        Auto,\r\n        [EnumMember(Value = \"CRIME\")]\r\n        CRIME,\r\n        [EnumMember(Value = \"EPMISCLIAB\")]\r\n        EPMISCLIAB,\r\n        [EnumMember(Value = \"DO\")]\r\n        DO,\r\n        [EnumMember(Value = \"EMPLOYMENT\")]\r\n        EMPLOYMENT,\r\n        [EnumMember(Value = \"FIDUCIARY\")]\r\n        FIDUCIARY,\r\n        [EnumMember(Value = \"SOCIAL_NETWORK\")]\r\n        SOCIAL_NETWORK,\r\n        [EnumMember(Value = \"BMQPKG\")]\r\n        BMQPKG\r\n    }\r\n",
          "name": "EventSubTypeEnum",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.Enums"
        },
        {
          "source": "    public enum EventTypeEnum\r\n    {\r\n        [EnumMember(Value = \"QUOTE\")]\r\n        QUOTE,\r\n        [EnumMember(Value = \"ISSUANCE\")]\r\n        ISSUANCE,\r\n        [EnumMember(Value = \"APPETITECHECK\")]\r\n        APPETITECHECK,\r\n        [EnumMember(Value = \"GIFTCARDREDEMPTION\")]\r\n        GIFTCARDREDEMPTION,\r\n        [EnumMember(Value = \"PROMOTION\")]\r\n        PROMOTION\r\n    }\r\n",
          "name": "EventTypeEnum",
          "type": "Enum",
          "namespace": "Chubb.Marketplace.Appetite.Enums"
        }
      ],
      "file_nodes": []
    },
    "dependency_tests": [
      {
        "query_type": "old_schema",
        "query": "\n                MATCH (source:Class {name: $class_name, repository: $repo, organization: $org})\n                MATCH (source)-[r:DEPENDS_ON]->(target:Class)\n                RETURN target.name as target_class, r.type as dependency_type\n                LIMIT 5\n                ",
        "results": [],
        "success": true
      },
      {
        "query_type": "new_schema",
        "query": "\n                MATCH (source:Class {name: $class_name, source: $repo})\n                MATCH (source)-[r:DEPENDS_ON]->(target:Class)\n                RETURN target.name as target_class, r.type as dependency_type\n                LIMIT 5\n                ",
        "results": [],
        "success": true
      },
      {
        "query_type": "mixed_schema",
        "query": "\n                MATCH (source:Class {name: $class_name})\n                WHERE (source.repository = $repo AND source.organization = $org) \n                   OR (source.source = $repo)\n                MATCH (source)-[r:DEPENDS_ON]->(target:Class)\n                RETURN target.name as target_class, r.type as dependency_type\n                LIMIT 5\n                ",
        "results": [],
        "success": true
      }
    ],
    "data_samples": [
      {
        "repository": {
          "externalEndpoints": "[]",
          "name": "autoidcard",
          "namespace": "",
          "type": "Repository"
        },
        "rel1": {},
        "class": {
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\AutoIDCard\\Chubb.Marketplace.AutoIdCard.Api\\Configuration\\AutoIdCardConfigurationExtention.cs[590..1712))",
          "modifier": "public",
          "name": "AutoIdCardConfigurationExtention",
          "namespace": "Chubb.Marketplace.AutoIdCard.Api.Configuration",
          "source": "namespace Chubb.Marketplace.AutoIdCard.Api.Configuration\r\n{\r\n    using Chubb.Marketplace.AutoIdCard.Business.EntityConvertion;\r\n    using Chubb.Marketplace.AutoIdCard.Business.EntityConvertion.Auto;\r\n    using Chubb.Marketplace.AutoIdCard.Model.Entities.AutoIdCardResponse;\r\n    using Chubb.Marketplace.AutoIdCard.Model.Entities.Configs;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.Extensions.Configuration;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using System.IO;\r\n\r\n    /// <summary>\r\n    /// Micro source system configuration\r\n    /// </summary>\r\n    public static class AutoIdCardConfigurationExtention\r\n    {\r\n        /// <summary>\r\n        /// Add SCI configuration to service provider\r\n        /// </summary>\r\n        /// <param name=\"services\">Service provider instance</param>\r\n        /// <param name=\"configuration\">System configuration instance</param>\r\n        /// <returns>Service provider instance for chaning</returns>\r\n        public static IServiceCollection AddAutoIdCardSourceSystem(this IServiceCollection services, IConfiguration configuration, IWebHostEnvironment env)\r\n        {\r\n\r\n            services.AddSingleton<IEntityConverter<AppDataPolicyAutoIdCardResponse>>(srvs =>\r\n            {\r\n                var xsltPath = Path.Combine(srvs.GetService<IHostingEnvironment>().WebRootPath, @\"Xslt\\AutoIdCard\\AutoIdCard.xslt\");\r\n                var constantsPath = Path.Combine(srvs.GetService<IHostingEnvironment>().WebRootPath, @\"Constants\\AutoId\\ResponseEntity.xml\");\r\n                return new AutoIdCardXsltEntityConverter<AppDataPolicyAutoIdCardResponse>(xsltPath, constantsPath);\r\n\r\n            });\r\n\r\n            return services;\r\n        }\r\n    }\r\n}\r\n",
          "type": "Class",
          "properties": "[{\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"xsltPath\", \"DefaultValue\": \"Path.Combine(srvs.GetService<IHostingEnvironment>().WebRootPath, @\\\"Xslt\\\\AutoIdCard\\\\AutoIdCard.xslt\\\")\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"constantsPath\", \"DefaultValue\": \"Path.Combine(srvs.GetService<IHostingEnvironment>().WebRootPath, @\\\"Constants\\\\AutoId\\\\ResponseEntity.xml\\\")\", \"DependentClasses\": []}]",
          "ds": true
        },
        "rel2": {},
        "method": {
          "return_type": "IServiceCollection",
          "modifier": "public",
          "name": "AddAutoIdCardSourceSystem",
          "namespace": "Chubb.Marketplace.AutoIdCard.Api.Configuration",
          "associated_class": "AutoIdCardConfigurationExtention",
          "source": "{\r\n\r\n            services.AddSingleton<IEntityConverter<AppDataPolicyAutoIdCardResponse>>(srvs =>\r\n            {\r\n                var xsltPath = Path.Combine(srvs.GetService<IHostingEnvironment>().WebRootPath, @\"Xslt\\AutoIdCard\\AutoIdCard.xslt\");\r\n                var constantsPath = Path.Combine(srvs.GetService<IHostingEnvironment>().WebRootPath, @\"Constants\\AutoId\\ResponseEntity.xml\");\r\n                return new AutoIdCardXsltEntityConverter<AppDataPolicyAutoIdCardResponse>(xsltPath, constantsPath);\r\n\r\n            });\r\n\r\n            return services;\r\n        }",
          "service_endpoint": "[]",
          "type": "Method"
        }
      },
      {
        "repository": {
          "externalEndpoints": "[]",
          "name": "autoidcard",
          "namespace": "",
          "type": "Repository"
        },
        "rel1": {},
        "class": {
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\AutoIDCard\\Chubb.Marketplace.AutoIdCard.Api\\Controllers\\AutoIdCardController.cs[847..4391))",
          "modifier": "public",
          "name": "AutoIdCardController",
          "namespace": "Chubb.Marketplace.AutoIdCard.Api.Controllers",
          "source": "using Chubb.Marketplace.AutoIdCard.Business.Common;\r\nusing Chubb.Marketplace.AutoIdCard.Business.EntityConvertion;\r\nusing Chubb.Marketplace.AutoIdCard.Business.PolicyData;\r\nusing Chubb.Marketplace.AutoIdCard.Business.PolicyData.Auto;\r\nusing Chubb.Marketplace.AutoIdCard.Business.Services;\r\nusing Chubb.Marketplace.AutoIdCard.Model.Entities;\r\nusing Chubb.Marketplace.AutoIdCard.Model.Entities.AutoIdCardResponse;\r\nusing Chubb.Marketplace.AutoIdCard.Model.Entities.Configs;\r\nusing Chubb.Marketplace.Framework.Controller;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Caching.Distributed;\r\nusing Microsoft.Extensions.Caching.Memory;\r\nusing Microsoft.Extensions.Options;\r\n\r\nnamespace Chubb.Marketplace.AutoIdCard.Api.Controllers\r\n{\r\n    /// <summary>\r\n    /// Implements AutoIdCard Actions\r\n    /// </summary>\r\n    //[Authorize()]\r\n    [Route(\"api/[controller]\")]\r\n    [ApiController]\r\n    public class AutoIdCardController : AuthorizedController\r\n    {\r\n        private readonly IEntityConverterFactory entityConverterFactory;\r\n        private readonly IOptions<AutoIdCardConfigurations> autoIdCardConfigurations;\r\n        //private readonly IIdentityAccessor identityAccessor;\r\n        //private readonly IPolicyDataSourceFactory policySourceFactory;\r\n\r\n        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"AutoIdCardController\"/> class.\r\n        /// </summary>\r\n        /// <param name=\"configuration\">Configurations</param>\r\n        /// <param name=\"cache\">Distributed cache</param>\r\n        /// <param name=\"httpContextAccessor\"> Http Context Accessor</param>\r\n        /// <param name=\"memoryCache\"> Memory Cache</param>\r\n        /// <param name=\"entityConverterFactory\">Entity Converter Factory instance</param>\r\n        /// <param name=\"autoIdCardConfigurations\">AutoIdCardConfigurations</param>\r\n        public AutoIdCardController(\r\n            IConfiguration configuration,\r\n            IDistributedCache cache,\r\n             IMemoryCache memoryCache,\r\n            IHttpContextAccessor httpContextAccessor,\r\n            IEntityConverterFactory entityConverterFactory,\r\n            IOptions<AutoIdCardConfigurations> autoIdCardConfigurations)\r\n            : base(configuration, cache, memoryCache, httpContextAccessor)\r\n        {\r\n            this.entityConverterFactory = entityConverterFactory ?? throw new ArgumentNullException(nameof(entityConverterFactory));\r\n            this.autoIdCardConfigurations = autoIdCardConfigurations ?? throw new ArgumentNullException(nameof(autoIdCardConfigurations));\r\n            //this.policySourceFactory = policySourceFactory ?? throw new ArgumentNullException(nameof(policySourceFactory));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Upload data\r\n        /// </summary>\r\n        /// <param name=\"request\">PolicyAutoIdCardRequest</param>\r\n        /// <returns>Auto Id Card activity</returns>\r\n        [HttpPost]\r\n        [Route(\"transformation\")]\r\n        [FormatFilter]\r\n        [ProducesResponseType(typeof(AppDataPolicyAutoIdCardResponse), 200)]\r\n        public async Task<IActionResult> AutoIdCardTransformation([FromBody] AppDataPolicyAutoIdCardRequest request)\r\n        {\r\n            AppDataPolicyAutoIdCardResponse response = null;\r\n            try\r\n            {\r\n                if (request.FilePathName == null)\r\n                {\r\n                    return this.BadRequest(AutoIdCardResponseAutoIdCard.GetErrorResponse(ResponseCode.BadRequest, \"FilePathName is required.\"));\r\n                }\r\n\r\n                IPolicyDataSource iPolicyDataSource = new AutoIdCardPolicyDataSource(base.Configuration, base.Cache, base.MemoryCache, base.Token, request, autoIdCardConfigurations);\r\n                var policy = await iPolicyDataSource.GetPolicy(request);\r\n                AutoIdCardTransformationService autoIdCardTransformationService = new AutoIdCardTransformationService(base.Configuration, base.Cache, base.MemoryCache, base.Token, request, this.entityConverterFactory, this.autoIdCardConfigurations);\r\n                response = autoIdCardTransformationService.AutoIdCardTransformation(request, policy);\r\n\r\n                return this.Ok(response);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                return this.StatusCode(500, AutoIdCardResponseAutoIdCard.GetErrorResponse(ResponseCode.InternalServerError, e.Message));\r\n            }\r\n        }\r\n    }\r\n}",
          "type": "Class",
          "properties": "[{\"Type\": \"IEntityConverterFactory\", \"AccessModifier\": \"private\", \"Name\": \"entityConverterFactory\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"IOptions<AutoIdCardConfigurations>\", \"AccessModifier\": \"private\", \"Name\": \"autoIdCardConfigurations\", \"DefaultValue\": \"\", \"DependentClasses\": []}, {\"Type\": \"AppDataPolicyAutoIdCardResponse\", \"AccessModifier\": \"private\", \"Name\": \"response\", \"DefaultValue\": \"null\", \"DependentClasses\": []}, {\"Type\": \"IPolicyDataSource\", \"AccessModifier\": \"private\", \"Name\": \"iPolicyDataSource\", \"DefaultValue\": \"new AutoIdCardPolicyDataSource(base.Configuration, base.Cache, base.MemoryCache, base.Token, request, autoIdCardConfigurations)\", \"DependentClasses\": []}, {\"Type\": \"var\", \"AccessModifier\": \"private\", \"Name\": \"policy\", \"DefaultValue\": \"await iPolicyDataSource.GetPolicy(request)\", \"DependentClasses\": []}, {\"Type\": \"AutoIdCardTransformationService\", \"AccessModifier\": \"private\", \"Name\": \"autoIdCardTransformationService\", \"DefaultValue\": \"new AutoIdCardTransformationService(base.Configuration, base.Cache, base.MemoryCache, base.Token, request, this.entityConverterFactory, this.autoIdCardConfigurations)\", \"DependentClasses\": []}]",
          "ds": true
        },
        "rel2": {},
        "method": {
          "return_type": "Task<IActionResult>",
          "modifier": "public",
          "name": "AutoIdCardTransformation",
          "namespace": "Chubb.Marketplace.AutoIdCard.Api.Controllers",
          "associated_class": "AutoIdCardController",
          "source": "{\r\n            AppDataPolicyAutoIdCardResponse response = null;\r\n            try\r\n            {\r\n                if (request.FilePathName == null)\r\n                {\r\n                    return this.BadRequest(AutoIdCardResponseAutoIdCard.GetErrorResponse(ResponseCode.BadRequest, \"FilePathName is required.\"));\r\n                }\r\n\r\n                IPolicyDataSource iPolicyDataSource = new AutoIdCardPolicyDataSource(base.Configuration, base.Cache, base.MemoryCache, base.Token, request, autoIdCardConfigurations);\r\n                var policy = await iPolicyDataSource.GetPolicy(request);\r\n                AutoIdCardTransformationService autoIdCardTransformationService = new AutoIdCardTransformationService(base.Configuration, base.Cache, base.MemoryCache, base.Token, request, this.entityConverterFactory, this.autoIdCardConfigurations);\r\n                response = autoIdCardTransformationService.AutoIdCardTransformation(request, policy);\r\n\r\n                return this.Ok(response);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                return this.StatusCode(500, AutoIdCardResponseAutoIdCard.GetErrorResponse(ResponseCode.InternalServerError, e.Message));\r\n            }\r\n        }",
          "service_endpoint": "[]",
          "type": "Method"
        }
      },
      {
        "repository": {
          "externalEndpoints": "[]",
          "name": "autoidcard",
          "namespace": "",
          "type": "Repository"
        },
        "rel1": {},
        "class": {
          "file_path": "SourceFile(C:\\Users\\TUSAURA\\Documents\\GitHub\\sre-codebase-analytica\\Repositories\\AutoIDCard\\Chubb.Marketplace.AutoIdCard.Api\\Controllers\\HealthChecks\\LivenessController.cs[200..847))",
          "modifier": "public",
          "name": "LivenessController",
          "namespace": "Chubb.Marketplace.AutoIdCard.Api.Controllers.HealthChecks",
          "source": "using Microsoft.AspNetCore.Mvc;\r\n\r\nnamespace Chubb.Marketplace.AutoIdCard.Api.Controllers.HealthChecks\r\n{\r\n    /// <summary>\r\n    /// Liveness Controller\r\n    /// </summary>\r\n    //[Authorize()]\r\n    [Produces(\"application/json\")]\r\n    [ApiController]\r\n    public class LivenessController\r\n    {\r\n        /// <summary>\r\n        /// Returns basic 200 OK response to denote API instance is up and accessible -  Unauthorized.\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        /// <response code=\"200\">I am alive!</response>\r\n        ///  /// <remarks>\r\n        /// </remarks>\r\n        [Route(\"Liveness\")]\r\n        [HttpGet]\r\n        [ProducesResponseType(typeof(string), 200)]\r\n        public ActionResult<string> Liveness()\r\n        {\r\n            //return \"I am alive\";\r\n            return LivenessService.Alive();\r\n        }\r\n    }\r\n}\r\n",
          "type": "Class",
          "properties": "[]",
          "ds": true
        },
        "rel2": {},
        "method": {
          "return_type": "ActionResult<string>",
          "modifier": "public",
          "name": "Liveness",
          "namespace": "Chubb.Marketplace.AutoIdCard.Api.Controllers.HealthChecks",
          "associated_class": "LivenessController",
          "source": "{\r\n            //return \"I am alive\";\r\n            return LivenessService.Alive();\r\n        }",
          "service_endpoint": "[]",
          "type": "Method"
        }
      }
    ],
    "schema_summary": {
      "total_node_types": 0,
      "total_relationship_types": 8,
      "total_properties": 12,
      "has_old_schema": false,
      "has_new_schema": true,
      "is_mixed_schema": false,
      "recommended_approach": "new_schema"
    }
  }
}